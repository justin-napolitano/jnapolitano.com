<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gcp on Justin Napolitano</title>
    <link>jnapolitano.com/tags/gcp/</link>
    <description>Recent content in gcp on Justin Napolitano</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>jayburdindustries</copyright>
    <lastBuildDate>Thu, 18 Jul 2024 15:49:48 -0500</lastBuildDate><atom:link href="jnapolitano.com/tags/gcp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create and Deploy Cloud Run Job Script</title>
      <link>jnapolitano.com/posts/create_deploy_cloud_run_job/</link>
      <pubDate>Thu, 18 Jul 2024 15:49:48 -0500</pubDate>
      
      <guid>jnapolitano.com/posts/create_deploy_cloud_run_job/</guid>
      <description>Cloud Run Job Deployment Script This repository contains a script to build and deploy a Python application as a Cloud Run Job using Google Cloud Build. The script dynamically generates a cloudbuild.yaml file and submits it to Google Cloud Build.
Prerequisites Before using the deployment script, ensure you have the following:
 Google Cloud SDK: Installed and configured. Docker: Installed. Google Cloud Project: Created and configured. Service Account Key: A service account key JSON file with appropriate permissions stored at keys/service-account-key.</description>
    </item>
    
    <item>
      <title>GCP Secret Manager Script</title>
      <link>jnapolitano.com/posts/gcp-secret-creation/</link>
      <pubDate>Thu, 18 Jul 2024 12:25:11 -0500</pubDate>
      
      <guid>jnapolitano.com/posts/gcp-secret-creation/</guid>
      <description>GCP Secret Manager Script This script manages secrets in Google Cloud Platform&amp;rsquo;s Secret Manager. It can create, overwrite, and delete secrets based on the provided YAML configuration file and environment variables.
Prerequisites  Python 3.6 or higher Google Cloud SDK installed and authenticated Necessary Python packages installed (google-cloud-secret-manager, python-dotenv, pyyaml)  Installation   Clone the repository:
git clone https://github.com/justin-napolitano/gcp-secret-creation.py.git cd your-repo-directory   Create a virtual environment and activate it:</description>
    </item>
    
    <item>
      <title>Schedule a GCP Cloud Run Chron Job</title>
      <link>jnapolitano.com/posts/schedule-gcp-chron-jobs/</link>
      <pubDate>Tue, 16 Jul 2024 17:23:06 -0500</pubDate>
      
      <guid>jnapolitano.com/posts/schedule-gcp-chron-jobs/</guid>
      <description>How to Schedule a Cloud Run Job Using Google Cloud Scheduler In this tutorial, we&amp;rsquo;ll walk through the process of scheduling a job in Google Cloud Run using Google Cloud Scheduler. This is particularly useful for tasks that need to run at regular intervals, such as data processing, periodic updates, or maintenance tasks.
Prerequisites Before we start, ensure you have the following:
 A Google Cloud project. gcloud command-line tool installed and authenticated.</description>
    </item>
    
    <item>
      <title>GCP Cloud Run: LOC Flattener</title>
      <link>jnapolitano.com/posts/loc_normalizer/</link>
      <pubDate>Thu, 11 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>jnapolitano.com/posts/loc_normalizer/</guid>
      <description>Library of Congress Normalizer Job This repo normalizes the existing library of congress schema into a db that wil then be used to construct a knowledge graph of supreme court law.
Plan  Setup a venv to run locally Install requirements Write out the script to interface with gcp Set up a docker container and test locally build the image upload to gcp create the job  Setup the venv Install I installed virtualenv locally on ubuntu</description>
    </item>
    
    <item>
      <title>Library of Congress Prodfier</title>
      <link>jnapolitano.com/posts/loc-prodifier/</link>
      <pubDate>Wed, 19 Jun 2024 22:36:34 -0500</pubDate>
      
      <guid>jnapolitano.com/posts/loc-prodifier/</guid>
      <description>Loc Prodifier Overview Loc Prodifier is a Python script designed to merge data from staging tables into production tables in Google BigQuery without inserting duplicate records. It uses the Google Cloud BigQuery Python client and can be run both locally and in Google Cloud Run. The script is designed to be flexible and scalable, allowing for parallel execution across multiple tables using Google Cloud Workflows.
Features  Merges data from staging tables into production tables without duplicates.</description>
    </item>
    
    <item>
      <title>GCP Cloud Run Job Scraper</title>
      <link>jnapolitano.com/posts/l_o_c_scraper/</link>
      <pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>jnapolitano.com/posts/l_o_c_scraper/</guid>
      <description>Library of Congress Scraper Job This repo scrapes the library of congress for all of the US Supreme Court Cases available on their platform. I intent to use this data to create a research tool to better understand the corpus of text.
Quick History of this project I had started work on this as an undergraduate at university, but the chatbot apis were not yet available.. and training modesl were far too expensive.</description>
    </item>
    
  </channel>
</rss>
