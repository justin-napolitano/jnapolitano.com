<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Justin Napolitano</title>
		<link>//localhost:1313/en/posts/</link>
		<description>Recent content in Posts on Justin Napolitano</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<managingEditor>personal.jnapolitano@gmail.com (Justin Napolitano)</managingEditor>
		<webMaster>personal.jnapolitano@gmail.com (Justin Napolitano)</webMaster>
		<copyright>CobraCorp</copyright>
		<lastBuildDate>Wed, 24 Apr 2024 17:23:50 -0500</lastBuildDate>
		<atom:link href="//localhost:1313/en/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Postgres to Neo4j Workflow: Relationships</title>
			<link>//localhost:1313/en/posts/supreme-court-meta-relationships/</link>
			<pubDate>Tue, 06 Aug 2024 16:10:02 -0500</pubDate>
			<guid>//localhost:1313/en/posts/supreme-court-meta-relationships/</guid>
			<description><![CDATA[Streamlining Data Transfer from PostgreSQL to Neo4j with Java... With Relationships Between Nodes]]></description>
			<content type="html"><![CDATA[<h1 id="updating-the-postgres-to-neo-workflow-with-standard-meta-data-relationships">Updating the PostGres to Neo workflow with Standard Meta Data Relationships</h1>
<p>In my previous post i detailed how to export data from postgresql to neo4j with a java workflow.. but I did not add how add relationships once the node insert completes.</p>
<p>Here is the repo btw <code>https://github.com/justin-napolitano/supreme-court-transfer</code></p>
<h2 id="relationshipcreatorjava">RelationshipCreator.java</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">package</span><span class="w"> </span><span class="nn">com.supreme_court_transfer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.neo4j.driver.Session</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.neo4j.driver.Transaction</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.neo4j.driver.TransactionWork</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.slf4j.Logger</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.slf4j.LoggerFactory</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">RelationshipCreator</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">Logger</span><span class="w"> </span><span class="n">logger</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LoggerFactory</span><span class="p">.</span><span class="na">getLogger</span><span class="p">(</span><span class="n">RelationshipCreator</span><span class="p">.</span><span class="na">class</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">createRelationships</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Starting relationship creation process...&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">try</span><span class="w"> </span><span class="p">(</span><span class="n">Session</span><span class="w"> </span><span class="n">session</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Neo4jConnection</span><span class="p">.</span><span class="na">getSession</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// Relationship creation methods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">createCallNumberToItemRelationships</span><span class="p">(</span><span class="n">session</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">createResourceToItemRelationships</span><span class="p">(</span><span class="n">session</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">createContributorToItemRelationships</span><span class="p">(</span><span class="n">session</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">createSubjectToItemRelationships</span><span class="p">(</span><span class="n">session</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// Add more relationship creation methods as needed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">Exception</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">logger</span><span class="p">.</span><span class="na">error</span><span class="p">(</span><span class="s">&#34;An error occurred during the relationship creation process.&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Relationship creation process completed.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">createCallNumberToItemRelationships</span><span class="p">(</span><span class="n">Session</span><span class="w"> </span><span class="n">session</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">session</span><span class="p">.</span><span class="na">writeTransaction</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">TransactionWork</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">public</span><span class="w"> </span><span class="n">Void</span><span class="w"> </span><span class="nf">execute</span><span class="p">(</span><span class="n">Transaction</span><span class="w"> </span><span class="n">tx</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">tx</span><span class="p">.</span><span class="na">run</span><span class="p">(</span><span class="s">&#34;MATCH (c:CallNumber), (i:Item) &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;WHERE c.externalId = i.callNumber &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;CREATE (c)-[:ASSOCIATED_WITH]-&gt;(i)&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Created relationships between CallNumbers and Items based on external_id.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">createResourceToItemRelationships</span><span class="p">(</span><span class="n">Session</span><span class="w"> </span><span class="n">session</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">session</span><span class="p">.</span><span class="na">writeTransaction</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">TransactionWork</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">public</span><span class="w"> </span><span class="n">Void</span><span class="w"> </span><span class="nf">execute</span><span class="p">(</span><span class="n">Transaction</span><span class="w"> </span><span class="n">tx</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">tx</span><span class="p">.</span><span class="na">run</span><span class="p">(</span><span class="s">&#34;MATCH (r:Resource), (i:Item) &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;WHERE r.externalId = i.externalId &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;CREATE (r)-[:RESOURCE_OF]-&gt;(i)&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Created relationships between Resources and Items based on external_id.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">createContributorToItemRelationships</span><span class="p">(</span><span class="n">Session</span><span class="w"> </span><span class="n">session</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">session</span><span class="p">.</span><span class="na">writeTransaction</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">TransactionWork</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">public</span><span class="w"> </span><span class="n">Void</span><span class="w"> </span><span class="nf">execute</span><span class="p">(</span><span class="n">Transaction</span><span class="w"> </span><span class="n">tx</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">tx</span><span class="p">.</span><span class="na">run</span><span class="p">(</span><span class="s">&#34;MATCH (c:Contributor), (i:Item) &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;WHERE c.externalId = i.externalId &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;CREATE (c)-[:CONTRIBUTED_TO]-&gt;(i)&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Created relationships between Contributors and Items based on external_id.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">createSubjectToItemRelationships</span><span class="p">(</span><span class="n">Session</span><span class="w"> </span><span class="n">session</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">session</span><span class="p">.</span><span class="na">writeTransaction</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">TransactionWork</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">public</span><span class="w"> </span><span class="n">Void</span><span class="w"> </span><span class="nf">execute</span><span class="p">(</span><span class="n">Transaction</span><span class="w"> </span><span class="n">tx</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">tx</span><span class="p">.</span><span class="na">run</span><span class="p">(</span><span class="s">&#34;MATCH (s:Subject), (i:Item) &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;WHERE s.externalId = i.externalId &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;CREATE (s)-[:SUBJECT_OF]-&gt;(i)&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Created relationships between Subjects and Items based on external_id.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">createRelationships</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Neo4jConnection</span><span class="p">.</span><span class="na">close</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h3 id="build-and-execute">Build and Execute</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> supreme-court-transfer
</span></span><span class="line"><span class="cl">mvn compile
</span></span><span class="line"><span class="cl">mvn exec:java -Dexec.mainClass<span class="o">=</span><span class="s2">&#34;com.supreme_court_transfer.App&#34;</span>
</span></span><span class="line"><span class="cl">mvn exec:java -Dexec.mainClass<span class="o">=</span><span class="s2">&#34;com.supreme_court_transfer.RelationshipCreator&#34;</span> 
</span></span></code></pre></div>]]></content>
			<postid> ee751a0a90103cc504a61050eb896198</postid>
			<author></author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Postgres to Neo4j Workflow</title>
			<link>//localhost:1313/en/posts/supreme-court-to-postgres-to-neo/</link>
			<pubDate>Tue, 06 Aug 2024 15:10:02 -0500</pubDate>
			<guid>//localhost:1313/en/posts/supreme-court-to-postgres-to-neo/</guid>
			<description><![CDATA[Streamlining Data Transfer from PostgreSQL to Neo4j with Java]]></description>
			<content type="html"><![CDATA[<h1 id="streamlining-data-transfer-from-postgresql-to-neo4j-with-java">Streamlining Data Transfer from PostgreSQL to Neo4j with Java</h1>
<p>In my previous few posts I put together a postgres db of supreme court meta data. That is cool. I have a few more ideas.. but I wanted to explore the graph a bit before expanding it with some nlp.  So in this post I am writing about how to ingest a bunch of nodes into neo4j with a java workflow. In the next post I&rsquo;ll detail adding relationships.. because it is useless without relationships.</p>
<p>When dealing with large datasets, it&rsquo;s crucial to have an efficient process for transferring data from a relational database like PostgreSQL to a graph database like Neo4j. In this post, we&rsquo;ll walk through how to upload nodes and create relationships in Neo4j using Java, ensuring a modular and maintainable workflow.</p>
<h2 id="prerequisites">Prerequisites</h2>
<ol>
<li>Java Development Kit (JDK) 8 or higher</li>
<li>Maven</li>
<li>Neo4j and PostgreSQL instances running</li>
<li>A .env file for managing environment variables</li>
</ol>
<h2 id="project-setup">Project Setup</h2>
<p>Step 1: Create a Maven Project
First, create a new Maven project using the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mvn archetype:generate -DgroupId<span class="o">=</span>com.supreme_court_transfer -DartifactId<span class="o">=</span>supreme-court-transfer -DarchetypeArtifactId<span class="o">=</span>maven-archetype-quickstart -DinteractiveMode<span class="o">=</span><span class="nb">false</span>
</span></span></code></pre></div><h3 id="step-2-directory-structure">Step 2: Directory Structure</h3>
<p>Your project structure should look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">supreme-court-transfer</span><span class="o">/</span>
</span></span><span class="line"><span class="cl"><span class="err">├──</span> <span class="nt">pom</span><span class="p">.</span><span class="nc">xml</span>
</span></span><span class="line"><span class="cl"><span class="err">├──</span> <span class="nt">src</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">├──</span> <span class="nt">main</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">│</span>   <span class="err">├──</span> <span class="nt">java</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">│</span>   <span class="err">│</span>   <span class="err">└──</span> <span class="nt">com</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">│</span>   <span class="err">│</span>       <span class="err">└──</span> <span class="nt">supreme_court_transfer</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">│</span>   <span class="err">│</span>           <span class="err">├──</span> <span class="nt">App</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">│</span>   <span class="err">│</span>           <span class="err">├──</span> <span class="nt">CallNumber</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">│</span>   <span class="err">│</span>           <span class="err">├──</span> <span class="nt">Contributor</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">│</span>   <span class="err">│</span>           <span class="err">├──</span> <span class="nt">DataTransferService</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">│</span>   <span class="err">│</span>           <span class="err">├──</span> <span class="nt">Item</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">│</span>   <span class="err">│</span>           <span class="err">├──</span> <span class="nt">Neo4jConnection</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">│</span>   <span class="err">│</span>           <span class="err">├──</span> <span class="nt">PostgresConnection</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">│</span>   <span class="err">│</span>           <span class="err">├──</span> <span class="nt">RelationshipCreator</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">│</span>   <span class="err">│</span>           <span class="err">├──</span> <span class="nt">Resource</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">│</span>   <span class="err">│</span>           <span class="err">└──</span> <span class="nt">Subject</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">│</span>   <span class="err">└──</span> <span class="nt">resources</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">│</span>       <span class="err">└──</span> <span class="nt">logback</span><span class="p">.</span><span class="nc">xml</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">└──</span> <span class="nt">test</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>       <span class="err">└──</span> <span class="nt">java</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>           <span class="err">└──</span> <span class="nt">com</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>               <span class="err">└──</span> <span class="nt">supreme_court_transfer</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>                   <span class="err">└──</span> <span class="nt">AppTest</span><span class="p">.</span><span class="nc">java</span>
</span></span></code></pre></div><h3 id="step-3-add-dependencies">Step 3: Add Dependencies</h3>
<p>Update your pom.xml with the necessary dependencies:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>com.supreme_court_transfer<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>supreme-court-transfer<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;maven.compiler.source&gt;</span>1.8<span class="nt">&lt;/maven.compiler.source&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;maven.compiler.target&gt;</span>1.8<span class="nt">&lt;/maven.compiler.target&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.postgresql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>postgresql<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>42.3.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.neo4j.driver<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>neo4j-java-driver<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>4.4.3<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>io.github.cdimascio<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>dotenv-java<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>2.2.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.slf4j<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>slf4j-api<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>1.7.32<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>ch.qos.logback<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>logback-classic<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>1.2.10<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;version&gt;</span>4.12<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><h3 id="managing-environment-variables">Managing Environment Variables</h3>
<h3 id="create-a-env-file-in-the-root-directory-of-your-project">Create a .env file in the root directory of your project:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">POSTGRES_URL=jdbc:postgresql://localhost:5432/supreme_court
</span></span><span class="line"><span class="cl">POSTGRES_USER=example
</span></span><span class="line"><span class="cl">POSTGRES_PASSWORD=example
</span></span><span class="line"><span class="cl">NEO4J_URL=bolt://localhost:7687
</span></span><span class="line"><span class="cl">NEO4J_USER=neo4j
</span></span><span class="line"><span class="cl">NEO4J_PASSWORD=password
</span></span></code></pre></div><h2 id="implementing-data-transfer">Implementing Data Transfer</h2>
<h3 id="step-4-define-entity-classes">Step 4: Define Entity Classes</h3>
<p>Define Java classes for each table in your PostgreSQL database.</p>
<h4 id="callnumberjava">CallNumber.java</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">package</span><span class="w"> </span><span class="nn">com.supreme_court_transfer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">CallNumber</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">id</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">callNumber</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">externalId</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Constructor, getters, and setters</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h4 id="contributorjava">Contributor.java</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">package</span><span class="w"> </span><span class="nn">com.supreme_court_transfer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Contributor</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">id</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">externalId</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">contributor</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Constructor, getters, and setters</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h4 id="resourcejava">Resource.java</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">package</span><span class="w"> </span><span class="nn">com.supreme_court_transfer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Resource</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">id</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">pdf</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">image</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">externalId</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Constructor, getters, and setters</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h4 id="itemjava">Item.java</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">package</span><span class="w"> </span><span class="nn">com.supreme_court_transfer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Item</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">id</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">notes</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">callNumber</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">createdPublished</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">title</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">date</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">sourceCollection</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">externalId</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Constructor, getters, and setters</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h4 id="subjectjava">Subject.java</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span><span class="w"> </span><span class="nn">com.supreme_court_transfer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Subject</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">id</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">externalId</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">subject</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Constructor, getters, and setters</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h3 id="step-5-database-connection-classes">Step 5: Database Connection Classes</h3>
<h4 id="postgresconnectionjava">PostgresConnection.java</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">package</span><span class="w"> </span><span class="nn">com.supreme_court_transfer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.sql.Connection</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.sql.DriverManager</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.sql.SQLException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">io.github.cdimascio.dotenv.Dotenv</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">PostgresConnection</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">Dotenv</span><span class="w"> </span><span class="n">dotenv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Dotenv</span><span class="p">.</span><span class="na">load</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">URL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dotenv</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="s">&#34;POSTGRES_URL&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">USER</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dotenv</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="s">&#34;POSTGRES_USER&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">PASSWORD</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dotenv</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="s">&#34;POSTGRES_PASSWORD&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">Connection</span><span class="w"> </span><span class="nf">getConnection</span><span class="p">()</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">SQLException</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">DriverManager</span><span class="p">.</span><span class="na">getConnection</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span><span class="w"> </span><span class="n">USER</span><span class="p">,</span><span class="w"> </span><span class="n">PASSWORD</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h4 id="neo4jconnectionjava">Neo4jConnection.java</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">package</span><span class="w"> </span><span class="nn">com.supreme_court_transfer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.neo4j.driver.AuthTokens</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.neo4j.driver.Driver</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.neo4j.driver.GraphDatabase</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.neo4j.driver.Session</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">io.github.cdimascio.dotenv.Dotenv</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Neo4jConnection</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">Dotenv</span><span class="w"> </span><span class="n">dotenv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Dotenv</span><span class="p">.</span><span class="na">load</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">NEO4J_URL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dotenv</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="s">&#34;NEO4J_URL&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">NEO4J_USER</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dotenv</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="s">&#34;NEO4J_USER&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">NEO4J_PASSWORD</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dotenv</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="s">&#34;NEO4J_PASSWORD&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">Driver</span><span class="w"> </span><span class="n">driver</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">GraphDatabase</span><span class="p">.</span><span class="na">driver</span><span class="p">(</span><span class="n">NEO4J_URL</span><span class="p">,</span><span class="w"> </span><span class="n">AuthTokens</span><span class="p">.</span><span class="na">basic</span><span class="p">(</span><span class="n">NEO4J_USER</span><span class="p">,</span><span class="w"> </span><span class="n">NEO4J_PASSWORD</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">Session</span><span class="w"> </span><span class="nf">getSession</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">driver</span><span class="p">.</span><span class="na">session</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">close</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">driver</span><span class="p">.</span><span class="na">close</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h3 id="step-6-implement-data-transfer-service">Step 6: Implement Data Transfer Service</h3>
<h4 id="datatransferservicejava">DataTransferService.java</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">package</span><span class="w"> </span><span class="nn">com.supreme_court_transfer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.neo4j.driver.Session</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.neo4j.driver.Values</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.slf4j.Logger</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.slf4j.LoggerFactory</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.sql.Connection</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.sql.ResultSet</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.sql.Statement</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.ArrayList</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.List</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">DataTransferService</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">Logger</span><span class="w"> </span><span class="n">logger</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LoggerFactory</span><span class="p">.</span><span class="na">getLogger</span><span class="p">(</span><span class="n">DataTransferService</span><span class="p">.</span><span class="na">class</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// CallNumber methods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">CallNumber</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">fetchCallNumbersFromPostgres</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">limit</span><span class="p">)</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">Exception</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">List</span><span class="o">&lt;</span><span class="n">CallNumber</span><span class="o">&gt;</span><span class="w"> </span><span class="n">callNumbers</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Connection</span><span class="w"> </span><span class="n">postgresConn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">PostgresConnection</span><span class="p">.</span><span class="na">getConnection</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Statement</span><span class="w"> </span><span class="n">stmt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">postgresConn</span><span class="p">.</span><span class="na">createStatement</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">ResultSet</span><span class="w"> </span><span class="n">rs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">stmt</span><span class="p">.</span><span class="na">executeQuery</span><span class="p">(</span><span class="s">&#34;SELECT id, call_number, external_id FROM callnumbers LIMIT &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">limit</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">rs</span><span class="p">.</span><span class="na">next</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">callNumbers</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">CallNumber</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">rs</span><span class="p">.</span><span class="na">getInt</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">rs</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="s">&#34;call_number&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">rs</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="s">&#34;external_id&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">rs</span><span class="p">.</span><span class="na">close</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">stmt</span><span class="p">.</span><span class="na">close</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">postgresConn</span><span class="p">.</span><span class="na">close</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Fetched {} call numbers from PostgreSQL.&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">callNumbers</span><span class="p">.</span><span class="na">size</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">callNumbers</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">insertCallNumbersIntoNeo4j</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">CallNumber</span><span class="o">&gt;</span><span class="w"> </span><span class="n">callNumbers</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Session</span><span class="w"> </span><span class="n">neo4jSession</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Neo4jConnection</span><span class="p">.</span><span class="na">getSession</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">CallNumber</span><span class="w"> </span><span class="n">callNumber</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">callNumbers</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">neo4jSession</span><span class="p">.</span><span class="na">run</span><span class="p">(</span><span class="s">&#34;CREATE (:CallNumber {id: $id, callNumber: $callNumber, externalId: $externalId})&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">Values</span><span class="p">.</span><span class="na">parameters</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="s">&#34;id&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">callNumber</span><span class="p">.</span><span class="na">getId</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="s">&#34;callNumber&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">callNumber</span><span class="p">.</span><span class="na">getCallNumber</span><span class="p">(),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="s">&#34;externalId&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">callNumber</span><span class="p">.</span><span class="na">getExternalId</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">neo4jSession</span><span class="p">.</span><span class="na">close</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Inserted {} call numbers into Neo4j.&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">callNumbers</span><span class="p">.</span><span class="na">size</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">transferCallNumbers</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">limit</span><span class="p">)</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">Exception</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">logger</span><span class="p">.</span><span class="na">debug</span><span class="p">(</span><span class="s">&#34;Starting transfer of call numbers.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">List</span><span class="o">&lt;</span><span class="n">CallNumber</span><span class="o">&gt;</span><span class="w"> </span><span class="n">callNumbers</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fetchCallNumbersFromPostgres</span><span class="p">(</span><span class="n">limit</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">insertCallNumbersIntoNeo4j</span><span class="p">(</span><span class="n">callNumbers</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">logger</span><span class="p">.</span><span class="na">debug</span><span class="p">(</span><span class="s">&#34;Completed transfer of call numbers.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Repeat similar methods for other entities: Contributor, Resource, Item, Subject</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h3 id="step-7-main-application-class">Step 7: Main Application Class</h3>
<h4 id="appjava">App.java</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">package</span><span class="w"> </span><span class="nn">com.supreme_court_transfer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">io.github.cdimascio.dotenv.Dotenv</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.slf4j.Logger</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.slf4j.LoggerFactory</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">App</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">Logger</span><span class="w"> </span><span class="n">logger</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LoggerFactory</span><span class="p">.</span><span class="na">getLogger</span><span class="p">(</span><span class="n">App</span><span class="p">.</span><span class="na">class</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Load environment variables from .env file</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Dotenv</span><span class="w"> </span><span class="n">dotenv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Dotenv</span><span class="p">.</span><span class="na">load</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// Log to verify environment variables (optional, for debugging purposes)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">logger</span><span class="p">.</span><span class="na">debug</span><span class="p">(</span><span class="s">&#34;Postgres URL: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">dotenv</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="s">&#34;POSTGRES_URL&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">logger</span><span class="p">.</span><span class="na">debug</span><span class="p">(</span><span class="s">&#34;Neo4j URL: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">dotenv</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="s">&#34;NEO4J_URL&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">limit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">MAX_VALUE</span><span class="p">;</span><span class="w"> </span><span class="c1">// Default to no limit</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="na">length</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">limit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Integer</span><span class="p">.</span><span class="na">parseInt</span><span class="p">(</span><span class="n">args</span><span class="o">[</span><span class="n">0</span><span class="o">]</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">NumberFormatException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">logger</span><span class="p">.</span><span class="na">error</span><span class="p">(</span><span class="s">&#34;Invalid limit argument, using default value (no limit).&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Starting data transfer process with limit {}...&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">limit</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">DataTransferService</span><span class="p">.</span><span class="na">transferCallNumbers</span><span class="p">(</span><span class="n">limit</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">DataTransferService</span><span class="p">.</span><span class="na">transferContributors</span><span class="p">(</span><span class="n">limit</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">DataTransferService</span><span class="p">.</span><span class="na">transferResources</span><span class="p">(</span><span class="n">limit</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">DataTransferService</span><span class="p">.</span><span class="na">transferItems</span><span class="p">(</span><span class="n">limit</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">DataTransferService</span><span class="p">.</span><span class="na">transferSubjects</span><span class="p">(</span><span class="n">limit</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Data transfer process completed.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">Exception</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">logger</span><span class="p">.</span><span class="na">error</span><span class="p">(</span><span class="s">&#34;An error occurred during the data transfer process.&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">finally</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">Neo4jConnection</span><span class="p">.</span><span class="na">close</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h3 id="step-8-create-the-relationships">Step 8: Create the Relationships</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span><span class="w"> </span><span class="nn">com.supreme_court_transfer</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.neo4j.driver.Session</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.neo4j.driver.Transaction</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.neo4j.driver.TransactionWork</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.slf4j.Logger</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.slf4j.LoggerFactory</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">RelationshipCreator</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kd">final</span><span class="w"> </span><span class="n">Logger</span><span class="w"> </span><span class="n">logger</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">LoggerFactory</span><span class="p">.</span><span class="na">getLogger</span><span class="p">(</span><span class="n">RelationshipCreator</span><span class="p">.</span><span class="na">class</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">createRelationships</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Starting relationship creation process...&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">try</span><span class="w"> </span><span class="p">(</span><span class="n">Session</span><span class="w"> </span><span class="n">session</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Neo4jConnection</span><span class="p">.</span><span class="na">getSession</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// Relationship creation methods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">createCallNumberToItemRelationships</span><span class="p">(</span><span class="n">session</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">createResourceToItemRelationships</span><span class="p">(</span><span class="n">session</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">createContributorToItemRelationships</span><span class="p">(</span><span class="n">session</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">createSubjectToItemRelationships</span><span class="p">(</span><span class="n">session</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// Add more relationship creation methods as needed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">Exception</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">logger</span><span class="p">.</span><span class="na">error</span><span class="p">(</span><span class="s">&#34;An error occurred during the relationship creation process.&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Relationship creation process completed.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">createCallNumberToItemRelationships</span><span class="p">(</span><span class="n">Session</span><span class="w"> </span><span class="n">session</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">session</span><span class="p">.</span><span class="na">writeTransaction</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">TransactionWork</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">public</span><span class="w"> </span><span class="n">Void</span><span class="w"> </span><span class="nf">execute</span><span class="p">(</span><span class="n">Transaction</span><span class="w"> </span><span class="n">tx</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">tx</span><span class="p">.</span><span class="na">run</span><span class="p">(</span><span class="s">&#34;MATCH (c:CallNumber), (i:Item) &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;WHERE c.externalId = i.callNumber &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;CREATE (c)-[:ASSOCIATED_WITH]-&gt;(i)&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Created relationships between CallNumbers and Items based on external_id.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">createResourceToItemRelationships</span><span class="p">(</span><span class="n">Session</span><span class="w"> </span><span class="n">session</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">session</span><span class="p">.</span><span class="na">writeTransaction</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">TransactionWork</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">public</span><span class="w"> </span><span class="n">Void</span><span class="w"> </span><span class="nf">execute</span><span class="p">(</span><span class="n">Transaction</span><span class="w"> </span><span class="n">tx</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">tx</span><span class="p">.</span><span class="na">run</span><span class="p">(</span><span class="s">&#34;MATCH (r:Resource), (i:Item) &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;WHERE r.externalId = i.externalId &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;CREATE (r)-[:RESOURCE_OF]-&gt;(i)&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Created relationships between Resources and Items based on external_id.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">createContributorToItemRelationships</span><span class="p">(</span><span class="n">Session</span><span class="w"> </span><span class="n">session</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">session</span><span class="p">.</span><span class="na">writeTransaction</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">TransactionWork</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">public</span><span class="w"> </span><span class="n">Void</span><span class="w"> </span><span class="nf">execute</span><span class="p">(</span><span class="n">Transaction</span><span class="w"> </span><span class="n">tx</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">tx</span><span class="p">.</span><span class="na">run</span><span class="p">(</span><span class="s">&#34;MATCH (c:Contributor), (i:Item) &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;WHERE c.externalId = i.externalId &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;CREATE (c)-[:CONTRIBUTED_TO]-&gt;(i)&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Created relationships between Contributors and Items based on external_id.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">createSubjectToItemRelationships</span><span class="p">(</span><span class="n">Session</span><span class="w"> </span><span class="n">session</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">session</span><span class="p">.</span><span class="na">writeTransaction</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">TransactionWork</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nd">@Override</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">public</span><span class="w"> </span><span class="n">Void</span><span class="w"> </span><span class="nf">execute</span><span class="p">(</span><span class="n">Transaction</span><span class="w"> </span><span class="n">tx</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">tx</span><span class="p">.</span><span class="na">run</span><span class="p">(</span><span class="s">&#34;MATCH (s:Subject), (i:Item) &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;WHERE s.externalId = i.externalId &#34;</span><span class="w"> </span><span class="o">+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                       </span><span class="s">&#34;CREATE (s)-[:SUBJECT_OF]-&gt;(i)&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">logger</span><span class="p">.</span><span class="na">info</span><span class="p">(</span><span class="s">&#34;Created relationships between Subjects and Items based on external_id.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="kc">null</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">createRelationships</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Neo4jConnection</span><span class="p">.</span><span class="na">close</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h3 id="step-9-compile-and-run-the-workflowprogram">Step 9: Compile and Run the workflowProgram</h3>
<p>To compile and run the relationship creation program, use the following commands:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nb">cd</span> supreme-court-transfer
</span></span><span class="line"><span class="cl">mvn compile
</span></span><span class="line"><span class="cl">mvn exec:java -Dexec.mainClass<span class="o">=</span><span class="s2">&#34;com.supreme_court_transfer.App&#34;</span>
</span></span><span class="line"><span class="cl">mvn exec:java -Dexec.mainClass<span class="o">=</span><span class="s2">&#34;com.supreme_court_transfer.RelationshipCreator&#34;</span> 
</span></span></code></pre></div>]]></content>
			<postid> b05a13831085582340b17b3b24a4d167</postid>
			<author></author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>PERN Stack with GraphQl and Apollo</title>
			<link>//localhost:1313/en/posts/sup-court-pern-stack/</link>
			<pubDate>Fri, 02 Aug 2024 15:16:27 -0500</pubDate>
			<guid>//localhost:1313/en/posts/sup-court-pern-stack/</guid>
			<description><![CDATA[Build a Website Backend with Apollo and Graphql]]></description>
			<content type="html"><![CDATA[<h1 id="setting-up-a-pern-stack-with-graphql-and-apollo">Setting Up a PERN Stack with GraphQL and Apollo:</h1>
<p>Source Repo : <code>https://github.com/justin-napolitano/sup-court-pern-stack.git</code></p>
<p>I&rsquo;ve been playing with a knowledge graph recently. Most of the data modelling is complete&hellip; well at least the groundwork is done.</p>
<p>In this part of the series,we&rsquo;ll walk through the process of setting up a PostgreSQL, Express, React, Node.js (PERN) stack application with GraphQL and Apollo.</p>
<p>The point is to build out a backend so I can then build out a react client to explore the beautiful grapth.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>Before we begin, make sure you have the following installed:</p>
<p>Node.js
PostgreSQL
npm or yarn
Step 1: Project Setup
Initialize the project:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mkdir my-pern-app
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> my-pern-app
</span></span><span class="line"><span class="cl">npm init -y
</span></span></code></pre></div><h3 id="install-dependencies">Install dependencies:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">npm install express sequelize pg pg-hstore apollo-server-express graphql graphql-iso-date dotenv cors morgan bcrypt dataloader
</span></span></code></pre></div><h3 id="step-2-configure-environment-variables">Step 2: Configure Environment Variables</h3>
<p>Create a .env file in the root of your project with the following content:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">DATABASE_URL=postgres://example:example@localhost:5432/supreme_court
</span></span><span class="line"><span class="cl">SECRET=asdlplplfwfwefwekwself.2342.dawasdq
</span></span><span class="line"><span class="cl">PORT=8000
</span></span><span class="line"><span class="cl">NODE_ENV=development
</span></span></code></pre></div><h3 id="step-3-set-up-sequelize">Step 3: Set Up Sequelize</h3>
<p>Create a config directory with the following files:</p>
<h4 id="srcconfigdbjs">src/config/db.js</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">dotenv</span> <span class="nx">from</span> <span class="s1">&#39;dotenv&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">dotenv</span><span class="p">.</span><span class="nx">config</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">dbConfig</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">development</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">url</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_URL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">dialect</span><span class="o">:</span> <span class="s1">&#39;postgres&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">logging</span><span class="o">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">,</span> <span class="c1">// Ensure logging is either a function or false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">test</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">url</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">TEST_DATABASE_URL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">dialect</span><span class="o">:</span> <span class="s1">&#39;postgres&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">logging</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">production</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">url</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_URL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">dialect</span><span class="o">:</span> <span class="s1">&#39;postgres&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">logging</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">dialectOptions</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">ssl</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">require</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">rejectUnauthorized</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">environment</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="s1">&#39;development&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">dbConfig</span><span class="p">[</span><span class="nx">environment</span><span class="p">];</span>
</span></span></code></pre></div><h3 id="step-4-create-models">Step 4: Create Models</h3>
<p>Create a models directory with the following files:</p>
<h4 id="srcmodelsindexjs">src/models/index.js</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">Sequelize</span><span class="p">,</span> <span class="nx">Op</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;sequelize&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">config</span> <span class="nx">from</span> <span class="s1">&#39;../config&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sequelize</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Sequelize</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">databaseUrl</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">dialect</span><span class="o">:</span> <span class="s1">&#39;postgres&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">logging</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">nodeEnv</span> <span class="o">===</span> <span class="s1">&#39;development&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">dialectOptions</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ssl</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">nodeEnv</span> <span class="o">===</span> <span class="s1">&#39;production&#39;</span> <span class="o">?</span> <span class="p">{</span> <span class="nx">rejectUnauthorized</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">operatorsAliases</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$eq</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">eq</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$ne</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">ne</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$gte</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">gte</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$gt</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">gt</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$lte</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">lte</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$lt</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">lt</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$not</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">not</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$in</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="k">in</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$notIn</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">notIn</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$is</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">is</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$like</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">like</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$notLike</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">notLike</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$iLike</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">iLike</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$notILike</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">notILike</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$regexp</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">regexp</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$notRegexp</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">notRegexp</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$iRegexp</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">iRegexp</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$notIRegexp</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">notIRegexp</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$between</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">between</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$notBetween</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">notBetween</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$overlap</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">overlap</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$contains</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">contains</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$contained</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">contained</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$adjacent</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">adjacent</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$strictLeft</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">strictLeft</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$strictRight</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">strictRight</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$noExtendRight</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">noExtendRight</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$noExtendLeft</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">noExtendLeft</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$and</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">and</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$or</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">or</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$any</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">any</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$all</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">all</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$values</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">values</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$col</span><span class="o">:</span> <span class="nx">Op</span><span class="p">.</span><span class="nx">col</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">models</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">User</span><span class="o">:</span> <span class="nx">sequelize</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;./user&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Message</span><span class="o">:</span> <span class="nx">sequelize</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="s1">&#39;./message&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">models</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">key</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;associate&#39;</span> <span class="k">in</span> <span class="nx">models</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">models</span><span class="p">[</span><span class="nx">key</span><span class="p">].</span><span class="nx">associate</span><span class="p">(</span><span class="nx">models</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="p">{</span> <span class="nx">sequelize</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">models</span><span class="p">;</span>
</span></span></code></pre></div><h4 id="srcmodelsuserjs">src/models/user.js</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">bcrypt</span> <span class="nx">from</span> <span class="s1">&#39;bcrypt&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">(</span><span class="nx">sequelize</span><span class="p">,</span> <span class="nx">DataTypes</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">sequelize</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">username</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nx">DataTypes</span><span class="p">.</span><span class="nx">STRING</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">unique</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">allowNull</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">validate</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">notEmpty</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">email</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nx">DataTypes</span><span class="p">.</span><span class="nx">STRING</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">unique</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">allowNull</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">validate</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">notEmpty</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">isEmail</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">password</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nx">DataTypes</span><span class="p">.</span><span class="nx">STRING</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">allowNull</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">validate</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">notEmpty</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">len</span><span class="o">:</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">42</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">role</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nx">DataTypes</span><span class="p">.</span><span class="nx">STRING</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">User</span><span class="p">.</span><span class="nx">associate</span> <span class="o">=</span> <span class="nx">models</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">User</span><span class="p">.</span><span class="nx">hasMany</span><span class="p">(</span><span class="nx">models</span><span class="p">.</span><span class="nx">Message</span><span class="p">,</span> <span class="p">{</span> <span class="nx">onDelete</span><span class="o">:</span> <span class="s1">&#39;CASCADE&#39;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">User</span><span class="p">.</span><span class="nx">findByLogin</span> <span class="o">=</span> <span class="kr">async</span> <span class="nx">login</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">User</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">where</span><span class="o">:</span> <span class="p">{</span> <span class="nx">username</span><span class="o">:</span> <span class="nx">login</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">user</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">User</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">where</span><span class="o">:</span> <span class="p">{</span> <span class="nx">email</span><span class="o">:</span> <span class="nx">login</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">user</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">User</span><span class="p">.</span><span class="nx">beforeCreate</span><span class="p">(</span><span class="kr">async</span> <span class="nx">user</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">user</span><span class="p">.</span><span class="nx">password</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">user</span><span class="p">.</span><span class="nx">generatePasswordHash</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">User</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">generatePasswordHash</span> <span class="o">=</span> <span class="kr">async</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">saltRounds</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kr">await</span> <span class="nx">bcrypt</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span> <span class="nx">saltRounds</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">User</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">validatePassword</span> <span class="o">=</span> <span class="kr">async</span> <span class="kd">function</span><span class="p">(</span><span class="nx">password</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kr">await</span> <span class="nx">bcrypt</span><span class="p">.</span><span class="nx">compare</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">password</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">User</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">user</span><span class="p">;</span>
</span></span></code></pre></div><h4 id="srcmodelsmessagejs">src/models/message.js</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="p">(</span><span class="nx">sequelize</span><span class="p">,</span> <span class="nx">DataTypes</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">Message</span> <span class="o">=</span> <span class="nx">sequelize</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">text</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">type</span><span class="o">:</span> <span class="nx">DataTypes</span><span class="p">.</span><span class="nx">STRING</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">validate</span><span class="o">:</span> <span class="p">{</span> <span class="nx">notEmpty</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">Message</span><span class="p">.</span><span class="nx">associate</span> <span class="o">=</span> <span class="nx">models</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Message</span><span class="p">.</span><span class="nx">belongsTo</span><span class="p">(</span><span class="nx">models</span><span class="p">.</span><span class="nx">User</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">Message</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">message</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">Step</span> <span class="mi">5</span><span class="o">:</span> <span class="nx">Set</span> <span class="nx">Up</span> <span class="nx">GraphQL</span> <span class="nx">Schema</span> <span class="nx">and</span> <span class="nx">Resolvers</span>
</span></span><span class="line"><span class="cl"><span class="nx">Create</span> <span class="nx">a</span> <span class="nx">schema</span> <span class="nx">directory</span> <span class="kd">with</span> <span class="nx">the</span> <span class="nx">following</span> <span class="nx">files</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">####</span> <span class="nx">src</span><span class="o">/</span><span class="nx">schema</span><span class="o">/</span><span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span></span><span class="line"><span class="cl"><span class="nx">javascript</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">gql</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;apollo-server-express&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">userSchema</span> <span class="nx">from</span> <span class="s1">&#39;./user&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">messageSchema</span> <span class="nx">from</span> <span class="s1">&#39;./message&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">linkSchema</span> <span class="o">=</span> <span class="nx">gql</span><span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">  scalar Date
</span></span></span><span class="line"><span class="cl"><span class="sb">
</span></span></span><span class="line"><span class="cl"><span class="sb">  type Query {
</span></span></span><span class="line"><span class="cl"><span class="sb">    _: Boolean
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">
</span></span></span><span class="line"><span class="cl"><span class="sb">  type Mutation {
</span></span></span><span class="line"><span class="cl"><span class="sb">    _: Boolean
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">
</span></span></span><span class="line"><span class="cl"><span class="sb">  type Subscription {
</span></span></span><span class="line"><span class="cl"><span class="sb">    _: Boolean
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">[</span><span class="nx">linkSchema</span><span class="p">,</span> <span class="nx">userSchema</span><span class="p">,</span> <span class="nx">messageSchema</span><span class="p">];</span>
</span></span></code></pre></div><h4 id="srcschemauserjs">src/schema/user.js</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">gql</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;apollo-server-express&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">gql</span><span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">  extend type Query {
</span></span></span><span class="line"><span class="cl"><span class="sb">    users: [User!]
</span></span></span><span class="line"><span class="cl"><span class="sb">    user(id: ID!): User
</span></span></span><span class="line"><span class="cl"><span class="sb">    me: User
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">
</span></span></span><span class="line"><span class="cl"><span class="sb">  extend type Mutation {
</span></span></span><span class="line"><span class="cl"><span class="sb">    signUp(
</span></span></span><span class="line"><span class="cl"><span class="sb">      username: String!
</span></span></span><span class="line"><span class="cl"><span class="sb">      email: String!
</span></span></span><span class="line"><span class="cl"><span class="sb">      password: String!
</span></span></span><span class="line"><span class="cl"><span class="sb">    ): Token!
</span></span></span><span class="line"><span class="cl"><span class="sb">
</span></span></span><span class="line"><span class="cl"><span class="sb">    signIn(login: String!, password: String!): Token!
</span></span></span><span class="line"><span class="cl"><span class="sb">    updateUser(username: String!): User!
</span></span></span><span class="line"><span class="cl"><span class="sb">    deleteUser(id: ID!): Boolean!
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">
</span></span></span><span class="line"><span class="cl"><span class="sb">  type Token {
</span></span></span><span class="line"><span class="cl"><span class="sb">    token: String!
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">
</span></span></span><span class="line"><span class="cl"><span class="sb">  type User {
</span></span></span><span class="line"><span class="cl"><span class="sb">    id: ID!
</span></span></span><span class="line"><span class="cl"><span class="sb">    username: String!
</span></span></span><span class="line"><span class="cl"><span class="sb">    email: String!
</span></span></span><span class="line"><span class="cl"><span class="sb">    role: String
</span></span></span><span class="line"><span class="cl"><span class="sb">    messages: [Message!]
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">`</span><span class="p">;</span>
</span></span></code></pre></div><h4 id="srcschemamessagejs">src/schema/message.js</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">gql</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;apollo-server-express&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">gql</span><span class="sb">`
</span></span></span><span class="line"><span class="cl"><span class="sb">  extend type Query {
</span></span></span><span class="line"><span class="cl"><span class="sb">    messages(cursor: String, limit: Int): MessageConnection!
</span></span></span><span class="line"><span class="cl"><span class="sb">    message(id: ID!): Message!
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">
</span></span></span><span class="line"><span class="cl"><span class="sb">  extend type Mutation {
</span></span></span><span class="line"><span class="cl"><span class="sb">    createMessage(text: String!): Message!
</span></span></span><span class="line"><span class="cl"><span class="sb">    deleteMessage(id: ID!): Boolean!
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">
</span></span></span><span class="line"><span class="cl"><span class="sb">  type MessageConnection {
</span></span></span><span class="line"><span class="cl"><span class="sb">    edges: [Message!]!
</span></span></span><span class="line"><span class="cl"><span class="sb">    pageInfo: PageInfo!
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">
</span></span></span><span class="line"><span class="cl"><span class="sb">  type PageInfo {
</span></span></span><span class="line"><span class="cl"><span class="sb">    hasNextPage: Boolean!
</span></span></span><span class="line"><span class="cl"><span class="sb">    endCursor: String!
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">
</span></span></span><span class="line"><span class="cl"><span class="sb">  type Message {
</span></span></span><span class="line"><span class="cl"><span class="sb">    id: ID!
</span></span></span><span class="line"><span class="cl"><span class="sb">    text: String!
</span></span></span><span class="line"><span class="cl"><span class="sb">    createdAt: Date!
</span></span></span><span class="line"><span class="cl"><span class="sb">    user: User!
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">
</span></span></span><span class="line"><span class="cl"><span class="sb">  extend type Subscription {
</span></span></span><span class="line"><span class="cl"><span class="sb">    messageCreated: MessageCreated!
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">
</span></span></span><span class="line"><span class="cl"><span class="sb">  type MessageCreated {
</span></span></span><span class="line"><span class="cl"><span class="sb">    message: Message!
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">Create</span> <span class="nx">a</span> <span class="nx">resolvers</span> <span class="nx">directory</span> <span class="kd">with</span> <span class="nx">the</span> <span class="nx">following</span> <span class="nx">files</span><span class="o">:</span>
</span></span></code></pre></div><h4 id="srcresolversindexjs">src/resolvers/index.js</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">GraphQLDateTime</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;graphql-iso-date&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">userResolvers</span> <span class="nx">from</span> <span class="s1">&#39;./user&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">messageResolvers</span> <span class="nx">from</span> <span class="s1">&#39;./message&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">customScalarResolver</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">Date</span><span class="o">:</span> <span class="nx">GraphQLDateTime</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="nx">customScalarResolver</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">userResolvers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">messageResolvers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span></code></pre></div><h4 id="srcresolversuserjs">src/resolvers/user.js</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">jwt</span> <span class="nx">from</span> <span class="s1">&#39;jsonwebtoken&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">combineResolvers</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;graphql-resolvers&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">AuthenticationError</span><span class="p">,</span> <span class="nx">UserInputError</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;apollo-server&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">isAdmin</span><span class="p">,</span> <span class="nx">isAuthenticated</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./authorization&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">createToken</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;../utils/auth&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Query</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">users</span><span class="o">:</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="p">{</span> <span class="nx">models</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kr">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">findAll</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">user</span><span class="o">:</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">models</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kr">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">findByPk</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">me</span><span class="o">:</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="p">{</span> <span class="nx">models</span><span class="p">,</span> <span class="nx">me</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">me</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kr">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">findByPk</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">Mutation</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">signUp</span><span class="o">:</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="p">{</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">email</span><span class="p">,</span> <span class="nx">password</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">models</span><span class="p">,</span> <span class="nx">secret</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">username</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">email</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">password</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span> <span class="nx">token</span><span class="o">:</span> <span class="nx">createToken</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">secret</span><span class="p">,</span> <span class="s1">&#39;30m&#39;</span><span class="p">)</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">signIn</span><span class="o">:</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="p">{</span> <span class="nx">login</span><span class="p">,</span> <span class="nx">password</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">models</span><span class="p">,</span> <span class="nx">secret</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">findByLogin</span><span class="p">(</span><span class="nx">login</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="k">new</span> <span class="nx">UserInputError</span><span class="p">(</span><span class="s1">&#39;No user found with these login credentials.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">isValid</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">user</span><span class="p">.</span><span class="nx">validatePassword</span><span class="p">(</span><span class="nx">password</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isValid</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="k">new</span> <span class="nx">AuthenticationError</span><span class="p">(</span><span class="s1">&#39;Invalid password.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span> <span class="nx">token</span><span class="o">:</span> <span class="nx">createToken</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">secret</span><span class="p">,</span> <span class="s1">&#39;30m&#39;</span><span class="p">)</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">updateUser</span><span class="o">:</span> <span class="nx">combineResolvers</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isAuthenticated</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="kr">async</span> <span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="p">{</span> <span class="nx">username</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">models</span><span class="p">,</span> <span class="nx">me</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">findByPk</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kr">await</span> <span class="nx">user</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span> <span class="nx">username</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">deleteUser</span><span class="o">:</span> <span class="nx">combineResolvers</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isAdmin</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="kr">async</span> <span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">models</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kr">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">destroy</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">          <span class="nx">where</span><span class="o">:</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">});</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">User</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">messages</span><span class="o">:</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="p">{</span> <span class="nx">models</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kr">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">findAll</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">where</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">userId</span><span class="o">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h4 id="srcresolversmessagejs">src/resolvers/message.js</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">PubSub</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;apollo-server&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">combineResolvers</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;graphql-resolvers&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">isAuthenticated</span><span class="p">,</span> <span class="nx">isMessageOwner</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./authorization&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pubsub</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PubSub</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">MESSAGE_CREATED</span> <span class="o">=</span> <span class="s1">&#39;MESSAGE_CREATED&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Query</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">messages</span><span class="o">:</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="p">{</span> <span class="nx">cursor</span><span class="p">,</span> <span class="nx">limit</span> <span class="o">=</span> <span class="mi">100</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">models</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">cursorOptions</span> <span class="o">=</span> <span class="nx">cursor</span>
</span></span><span class="line"><span class="cl">        <span class="o">?</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">where</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="nx">createdAt</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="nx">models</span><span class="p">.</span><span class="nx">Sequelize</span><span class="p">.</span><span class="nx">Op</span><span class="p">.</span><span class="nx">lt</span><span class="p">]</span><span class="o">:</span> <span class="nx">cursor</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">:</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">messages</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">findAll</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">order</span><span class="o">:</span> <span class="p">[[</span><span class="s1">&#39;createdAt&#39;</span><span class="p">,</span> <span class="s1">&#39;DESC&#39;</span><span class="p">]],</span>
</span></span><span class="line"><span class="cl">        <span class="nx">limit</span><span class="o">:</span> <span class="nx">limit</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">...</span><span class="nx">cursorOptions</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">hasNextPage</span> <span class="o">=</span> <span class="nx">messages</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">limit</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">edges</span> <span class="o">=</span> <span class="nx">hasNextPage</span> <span class="o">?</span> <span class="nx">messages</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="nx">messages</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">edges</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">pageInfo</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">hasNextPage</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">endCursor</span><span class="o">:</span> <span class="nx">edges</span><span class="p">[</span><span class="nx">edges</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="nx">createdAt</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">message</span><span class="o">:</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">models</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kr">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">findByPk</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">Mutation</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">createMessage</span><span class="o">:</span> <span class="nx">combineResolvers</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isAuthenticated</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="kr">async</span> <span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="p">{</span> <span class="nx">text</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">me</span><span class="p">,</span> <span class="nx">models</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">          <span class="nx">text</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">userId</span><span class="o">:</span> <span class="nx">me</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">pubsub</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="nx">MESSAGE_CREATED</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">messageCreated</span><span class="o">:</span> <span class="p">{</span> <span class="nx">message</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">message</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">deleteMessage</span><span class="o">:</span> <span class="nx">combineResolvers</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isAuthenticated</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">isMessageOwner</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="kr">async</span> <span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">models</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">findByPk</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Message not found&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kr">await</span> <span class="nx">message</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">Subscription</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">messageCreated</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">subscribe</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">pubsub</span><span class="p">.</span><span class="nx">asyncIterator</span><span class="p">(</span><span class="nx">MESSAGE_CREATED</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">Message</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">user</span><span class="o">:</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="p">{</span> <span class="nx">models</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kr">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">findByPk</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">userId</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h4 id="srcresolversauthorizationjs">src/resolvers/authorization.js</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">ForbiddenError</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;apollo-server&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">combineResolvers</span><span class="p">,</span> <span class="nx">skip</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;graphql-resolvers&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">isAuthenticated</span> <span class="o">=</span> <span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="p">{</span> <span class="nx">me</span> <span class="p">})</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">me</span> <span class="o">?</span> <span class="nx">skip</span> <span class="o">:</span> <span class="k">new</span> <span class="nx">ForbiddenError</span><span class="p">(</span><span class="s1">&#39;Not authenticated as user.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">isAdmin</span> <span class="o">=</span> <span class="nx">combineResolvers</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">isAuthenticated</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nx">parent</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="p">{</span> <span class="nx">me</span><span class="o">:</span> <span class="p">{</span> <span class="nx">role</span> <span class="p">}</span> <span class="p">})</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">role</span> <span class="o">===</span> <span class="s1">&#39;ADMIN&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="o">?</span> <span class="nx">skip</span>
</span></span><span class="line"><span class="cl">      <span class="o">:</span> <span class="k">new</span> <span class="nx">ForbiddenError</span><span class="p">(</span><span class="s1">&#39;Not authorized as admin.&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">isMessageOwner</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">parent</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">id</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">models</span><span class="p">,</span> <span class="nx">me</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">findByPk</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="p">{</span> <span class="nx">raw</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">userId</span> <span class="o">!==</span> <span class="nx">me</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">throw</span> <span class="k">new</span> <span class="nx">ForbiddenError</span><span class="p">(</span><span class="s1">&#39;Not authenticated as owner.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">skip</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h3 id="step-6-configure-loaders">Step 6: Configure Loaders</h3>
<p>Create a loaders directory with the following files:</p>
<h4 id="srcloadersuserjs">src/loaders/user.js</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">batchUsers</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">models</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">users</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">models</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">findAll</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">where</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">id</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="nx">models</span><span class="p">.</span><span class="nx">Sequelize</span><span class="p">.</span><span class="nx">Op</span><span class="p">.</span><span class="k">in</span><span class="p">]</span><span class="o">:</span> <span class="nx">keys</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">keys</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">key</span> <span class="p">=&gt;</span> <span class="nx">users</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">user</span> <span class="p">=&gt;</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">key</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h4 id="srcloadersindexjs">src/loaders/index.js</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">DataLoader</span> <span class="nx">from</span> <span class="s1">&#39;dataloader&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">models</span> <span class="nx">from</span> <span class="s1">&#39;../models&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">batchUsers</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./user&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">loaders</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">user</span><span class="o">:</span> <span class="k">new</span> <span class="nx">DataLoader</span><span class="p">(</span><span class="nx">keys</span> <span class="p">=&gt;</span> <span class="nx">batchUsers</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nx">models</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">loaders</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">Step</span> <span class="mi">7</span><span class="o">:</span> <span class="nx">Set</span> <span class="nx">Up</span> <span class="nx">Apollo</span> <span class="nx">Server</span>
</span></span><span class="line"><span class="cl"><span class="nx">Create</span> <span class="nx">a</span> <span class="nx">server</span><span class="p">.</span><span class="nx">js</span> <span class="nx">file</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">src</span> <span class="nx">directory</span><span class="o">:</span>
</span></span></code></pre></div><h4 id="srcserverjs">src/server.js</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">ApolloServer</span><span class="p">,</span> <span class="nx">AuthenticationError</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;apollo-server-express&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">express</span> <span class="nx">from</span> <span class="s1">&#39;express&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">cors</span> <span class="nx">from</span> <span class="s1">&#39;cors&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">morgan</span> <span class="nx">from</span> <span class="s1">&#39;morgan&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">http</span> <span class="nx">from</span> <span class="s1">&#39;http&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">schema</span> <span class="nx">from</span> <span class="s1">&#39;./schema&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">resolvers</span> <span class="nx">from</span> <span class="s1">&#39;./resolvers&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">models</span><span class="p">,</span> <span class="p">{</span> <span class="nx">sequelize</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./models&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">loaders</span> <span class="nx">from</span> <span class="s1">&#39;./loaders&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">config</span> <span class="nx">from</span> <span class="s1">&#39;./config&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">verifyToken</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./utils/auth&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">logger</span> <span class="nx">from</span> <span class="s1">&#39;./config/logger&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">morgan</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">getMe</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="s1">&#39;x-token&#39;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">verifyToken</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">throw</span> <span class="k">new</span> <span class="nx">AuthenticationError</span><span class="p">(</span><span class="s1">&#39;Session expired, please login again&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApolloServer</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">introspection</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">playground</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">typeDefs</span><span class="o">:</span> <span class="nx">schema</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">resolvers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">formatError</span><span class="o">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;SequelizeValidationError: &#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;Validation error: &#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="p">...</span><span class="nx">error</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">message</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">context</span><span class="o">:</span> <span class="kr">async</span> <span class="p">({</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">connection</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">connection</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">models</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">loaders</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">getMe</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">models</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">me</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">secret</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">secret</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">loaders</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">server</span><span class="p">.</span><span class="nx">applyMiddleware</span><span class="p">({</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/graphql&#39;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">httpServer</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">server</span><span class="p">.</span><span class="nx">installSubscriptionHandlers</span><span class="p">(</span><span class="nx">httpServer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">sequelize</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">().</span><span class="nx">then</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">logger</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">&#39;Database connected successfully&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">sequelize</span><span class="p">.</span><span class="nx">sync</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="nx">then</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">httpServer</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">port</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">logger</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="sb">`Server running at http://localhost:</span><span class="si">${</span><span class="nx">config</span><span class="p">.</span><span class="nx">port</span><span class="si">}</span><span class="sb">/graphql`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}).</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">logger</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Unable to connect to the database:&#39;</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><h3 id="create-an-indexjs-file-in-the-src-directory">Create an index.js file in the src directory:</h3>
<h4 id="srcindexjs">src/index.js</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="s1">&#39;dotenv/config&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="s1">&#39;./server&#39;</span><span class="p">;</span>
</span></span></code></pre></div><h3 id="step-8-start-the-server">Step 8: Start the Server</h3>
<p>To start the server, use the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">npx nodemon src/index.js
</span></span></code></pre></div><p>Your server should now be running, and you can access the Apollo GraphQL playground at http://localhost:8000/graphql.</p>
]]></content>
			<postid> fa5380b8e86d317704456bdb8aab8ee5</postid>
			<author></author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>PostGreSQL Java: Data Ingestion</title>
			<link>//localhost:1313/en/posts/sup-court-data-ingestion/</link>
			<pubDate>Wed, 31 Jul 2024 14:25:13 -0500</pubDate>
			<guid>//localhost:1313/en/posts/sup-court-data-ingestion/</guid>
			<description><![CDATA[Setting Up a Data Ingestion Workflow with Java and Google Cloud Storage]]></description>
			<content type="html"><![CDATA[<h1 id="setting-up-a-data-ingestion-workflow-with-java-and-google-cloud-storage">Setting Up a Data Ingestion Workflow with Java and Google Cloud Storage</h1>
<h2 id="introduction">Introduction</h2>
<p>In this blog post, we will walk through setting up a data ingestion workflow using Java. The workflow will download JSON data from a Google Cloud Storage (GCS) bucket, parse it, and insert it into a PostgreSQL database. We will also handle unique constraint violations gracefully.</p>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>Java 11 or higher installed</li>
<li>Maven installed</li>
<li>PostgreSQL running locally (preferably in a Docker container)</li>
<li>Google Cloud Storage bucket with JSON files</li>
<li>Service account key for Google Cloud Storage</li>
</ul>
<h2 id="setting-up-the-project">Setting Up the Project</h2>
<h3 id="1-project-structure">1. Project Structure</h3>
<p>Create the following directory structure for your project:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="nt">sup-court-data-ingestion</span><span class="o">/</span>
</span></span><span class="line"><span class="cl"><span class="err">└──</span> <span class="nt">src</span><span class="o">/</span>
</span></span><span class="line"><span class="cl">    <span class="err">└──</span> <span class="nt">main</span><span class="o">/</span>
</span></span><span class="line"><span class="cl">        <span class="err">└──</span> <span class="nt">java</span><span class="o">/</span>
</span></span><span class="line"><span class="cl">            <span class="err">└──</span> <span class="nt">com</span><span class="o">/</span>
</span></span><span class="line"><span class="cl">                <span class="err">└──</span> <span class="nt">data_ingestion</span><span class="o">/</span>
</span></span><span class="line"><span class="cl">                    <span class="err">├──</span> <span class="nt">GCSClient</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl">                    <span class="err">├──</span> <span class="nt">DataIngestionClient</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl">                    <span class="err">├──</span> <span class="nt">CallNumbersProcessor</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl">                    <span class="err">├──</span> <span class="nt">ContributorsProcessor</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl">                    <span class="err">├──</span> <span class="nt">ItemsProcessor</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl">                    <span class="err">├──</span> <span class="nt">ResourcesProcessor</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl">                    <span class="err">├──</span> <span class="nt">SubjectsProcessor</span><span class="p">.</span><span class="nc">java</span>
</span></span><span class="line"><span class="cl">                    <span class="err">└──</span> <span class="nt">DataIngestionMain</span><span class="p">.</span><span class="nc">java</span>
</span></span></code></pre></div><h3 id="2-pomxml">2. pom.xml</h3>
<p>Ensure your pom.xml includes the necessary dependencies:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span> <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>com.data_ingestion<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>sup-court-data-ingestion<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;name&gt;</span>sup-court-data-ingestion<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;url&gt;</span>http://maven.apache.org<span class="nt">&lt;/url&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.postgresql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>postgresql<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>42.2.23<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>com.google.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>google-cloud-storage<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>2.1.4<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.json<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>json<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>20210307<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>3.8.1<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&lt;source&gt;</span>11<span class="nt">&lt;/source&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&lt;target&gt;</span>11<span class="nt">&lt;/target&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>exec-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>3.0.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&lt;mainClass&gt;</span>com.data_ingestion.DataIngestionMain<span class="nt">&lt;/mainClass&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/build&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><h2 id="implementing-the-java-classes">Implementing the Java Classes</h2>
<h3 id="1-gcsclientjava">1. GCSClient.java</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span><span class="w"> </span><span class="nn">com.data_ingestion</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">com.google.auth.oauth2.GoogleCredentials</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">com.google.cloud.storage.*</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.io.FileInputStream</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.io.IOException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.nio.charset.StandardCharsets</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.ArrayList</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.List</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">com.google.api.gax.paging.Page</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">GCSClient</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">Storage</span><span class="w"> </span><span class="n">storage</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="nf">GCSClient</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">projectId</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">credentialsPath</span><span class="p">)</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">IOException</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">GoogleCredentials</span><span class="w"> </span><span class="n">credentials</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">GoogleCredentials</span><span class="p">.</span><span class="na">fromStream</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">FileInputStream</span><span class="p">(</span><span class="n">credentialsPath</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="na">createScoped</span><span class="p">(</span><span class="n">List</span><span class="p">.</span><span class="na">of</span><span class="p">(</span><span class="s">&#34;https://www.googleapis.com/auth/cloud-platform&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">storage</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">StorageOptions</span><span class="p">.</span><span class="na">newBuilder</span><span class="p">().</span><span class="na">setProjectId</span><span class="p">(</span><span class="n">projectId</span><span class="p">).</span><span class="na">setCredentials</span><span class="p">(</span><span class="n">credentials</span><span class="p">).</span><span class="na">build</span><span class="p">().</span><span class="na">getService</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="nf">downloadJson</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">bucketName</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">objectName</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Blob</span><span class="w"> </span><span class="n">blob</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">storage</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">BlobId</span><span class="p">.</span><span class="na">of</span><span class="p">(</span><span class="n">bucketName</span><span class="p">,</span><span class="w"> </span><span class="n">objectName</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">blob</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="kc">null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">RuntimeException</span><span class="p">(</span><span class="s">&#34;No such object&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">String</span><span class="p">(</span><span class="n">blob</span><span class="p">.</span><span class="na">getContent</span><span class="p">(),</span><span class="w"> </span><span class="n">StandardCharsets</span><span class="p">.</span><span class="na">UTF_8</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">listObjects</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">bucketName</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">objectNames</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Page</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&gt;</span><span class="w"> </span><span class="n">blobs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">storage</span><span class="p">.</span><span class="na">list</span><span class="p">(</span><span class="n">bucketName</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">Blob</span><span class="w"> </span><span class="n">blob</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">blobs</span><span class="p">.</span><span class="na">iterateAll</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">objectNames</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">blob</span><span class="p">.</span><span class="na">getName</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">objectNames</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h3 id="2-dataingestionclientjava">2. DataIngestionClient.java</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">package</span><span class="w"> </span><span class="nn">com.data_ingestion</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.sql.*</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.List</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">DataIngestionClient</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">private</span><span class="w"> </span><span class="n">Connection</span><span class="w"> </span><span class="n">connection</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="nf">DataIngestionClient</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">url</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">user</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="w"> </span><span class="n">password</span><span class="p">)</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">SQLException</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">connection</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">DriverManager</span><span class="p">.</span><span class="na">getConnection</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="p">,</span><span class="w"> </span><span class="n">password</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">insertData</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">insertSQL</span><span class="p">,</span><span class="w"> </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span><span class="w"> </span><span class="n">parameters</span><span class="p">)</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">SQLException</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">try</span><span class="w"> </span><span class="p">(</span><span class="n">PreparedStatement</span><span class="w"> </span><span class="n">pstmt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">connection</span><span class="p">.</span><span class="na">prepareStatement</span><span class="p">(</span><span class="n">insertSQL</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">parameters</span><span class="p">.</span><span class="na">size</span><span class="p">();</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">pstmt</span><span class="p">.</span><span class="na">setObject</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">,</span><span class="w"> </span><span class="n">parameters</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="n">i</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">pstmt</span><span class="p">.</span><span class="na">executeUpdate</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">close</span><span class="p">()</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">SQLException</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">connection</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="kc">null</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="o">!</span><span class="n">connection</span><span class="p">.</span><span class="na">isClosed</span><span class="p">())</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">connection</span><span class="p">.</span><span class="na">close</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h3 id="3-processors-with-exception-handling">3. Processors with Exception Handling</h3>
<h4 id="callnumbersprocessorjava">CallNumbersProcessor.java</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span><span class="w"> </span><span class="nn">com.data_ingestion</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.json.JSONObject</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.postgresql.util.PSQLException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.sql.SQLException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.ArrayList</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.List</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">CallNumbersProcessor</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">process</span><span class="p">(</span><span class="n">JSONObject</span><span class="w"> </span><span class="n">jsonObject</span><span class="p">,</span><span class="w"> </span><span class="n">DataIngestionClient</span><span class="w"> </span><span class="n">dbClient</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getJSONObject</span><span class="p">(</span><span class="s">&#34;item&#34;</span><span class="p">).</span><span class="na">getJSONArray</span><span class="p">(</span><span class="s">&#34;call_number&#34;</span><span class="p">).</span><span class="na">getString</span><span class="p">(</span><span class="n">0</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">dbClient</span><span class="p">.</span><span class="na">insertData</span><span class="p">(</span><span class="s">&#34;INSERT INTO CallNumbers (external_id, call_number) VALUES (?, ?)&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">params</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">PSQLException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="na">getSQLState</span><span class="p">().</span><span class="na">equals</span><span class="p">(</span><span class="s">&#34;23505&#34;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// 23505 is the SQL state for unique violation</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">System</span><span class="p">.</span><span class="na">err</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Duplicate entry for CallNumbers with external_id: &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">SQLException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h4 id="contributorsprocessorjava">ContributorsProcessor.java</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">package</span><span class="w"> </span><span class="nn">com.data_ingestion</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.json.JSONObject</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.postgresql.util.PSQLException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.sql.SQLException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.ArrayList</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.List</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">ContributorsProcessor</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">process</span><span class="p">(</span><span class="n">JSONObject</span><span class="w"> </span><span class="n">jsonObject</span><span class="p">,</span><span class="w"> </span><span class="n">DataIngestionClient</span><span class="w"> </span><span class="n">dbClient</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getJSONArray</span><span class="p">(</span><span class="s">&#34;contributor&#34;</span><span class="p">).</span><span class="na">getString</span><span class="p">(</span><span class="n">0</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">dbClient</span><span class="p">.</span><span class="na">insertData</span><span class="p">(</span><span class="s">&#34;INSERT INTO Contributors (external_id, contributor) VALUES (?, ?)&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">params</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">PSQLException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="na">getSQLState</span><span class="p">().</span><span class="na">equals</span><span class="p">(</span><span class="s">&#34;23505&#34;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">System</span><span class="p">.</span><span class="na">err</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Duplicate entry for Contributors with external_id: &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">SQLException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h4 id="itemsprocessorjava">ItemsProcessor.java</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">package</span><span class="w"> </span><span class="nn">com.data_ingestion</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.json.JSONObject</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.postgresql.util.PSQLException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.sql.SQLException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.ArrayList</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.List</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">ItemsProcessor</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">process</span><span class="p">(</span><span class="n">JSONObject</span><span class="w"> </span><span class="n">jsonObject</span><span class="p">,</span><span class="w"> </span><span class="n">DataIngestionClient</span><span class="w"> </span><span class="n">dbClient</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">JSONObject</span><span class="w"> </span><span class="n">item</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getJSONObject</span><span class="p">(</span><span class="s">&#34;item&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="na">getJSONArray</span><span class="p">(</span><span class="s">&#34;call_number&#34;</span><span class="p">).</span><span class="na">getString</span><span class="p">(</span><span class="n">0</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="na">optString</span><span class="p">(</span><span class="s">&#34;created_published&#34;</span><span class="p">,</span><span class="w"> </span><span class="kc">null</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="na">optString</span><span class="p">(</span><span class="s">&#34;date&#34;</span><span class="p">,</span><span class="w"> </span><span class="kc">null</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="na">optString</span><span class="p">(</span><span class="s">&#34;notes&#34;</span><span class="p">,</span><span class="w"> </span><span class="kc">null</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="na">optString</span><span class="p">(</span><span class="s">&#34;source_collection&#34;</span><span class="p">,</span><span class="w"> </span><span class="kc">null</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="s">&#34;title&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">dbClient</span><span class="p">.</span><span class="na">insertData</span><span class="p">(</span><span class="s">&#34;INSERT INTO Items (call_number, created_published, date, notes, source_collection, title, external_id) VALUES (?, ?, ?, ?, ?, ?, ?)&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">params</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">PSQLException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="na">getSQLState</span><span class="p">().</span><span class="na">equals</span><span class="p">(</span><span class="s">&#34;23505&#34;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">System</span><span class="p">.</span><span class="na">err</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Duplicate entry for Items with external_id: &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">SQLException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h4 id="resourcesprocessorjava">ResourcesProcessor.java</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">package</span><span class="w"> </span><span class="nn">com.data_ingestion</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.json.JSONArray</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.json.JSONObject</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.postgresql.util.PSQLException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.sql.SQLException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.ArrayList</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.List</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">ResourcesProcessor</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">process</span><span class="p">(</span><span class="n">JSONObject</span><span class="w"> </span><span class="n">jsonObject</span><span class="p">,</span><span class="w"> </span><span class="n">DataIngestionClient</span><span class="w"> </span><span class="n">dbClient</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">JSONArray</span><span class="w"> </span><span class="n">resourcesArray</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getJSONArray</span><span class="p">(</span><span class="s">&#34;resources&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">resourcesArray</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">JSONObject</span><span class="w"> </span><span class="n">resource</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">resourcesArray</span><span class="p">.</span><span class="na">getJSONObject</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">resource</span><span class="p">.</span><span class="na">optString</span><span class="p">(</span><span class="s">&#34;image&#34;</span><span class="p">,</span><span class="w"> </span><span class="kc">null</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">resource</span><span class="p">.</span><span class="na">optString</span><span class="p">(</span><span class="s">&#34;pdf&#34;</span><span class="p">,</span><span class="w"> </span><span class="kc">null</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">dbClient</span><span class="p">.</span><span class="na">insertData</span><span class="p">(</span><span class="s">&#34;INSERT INTO Resources (external_id, image, pdf) VALUES (?, ?, ?)&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">params</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">PSQLException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="na">getSQLState</span><span class="p">().</span><span class="na">equals</span><span class="p">(</span><span class="s">&#34;23505&#34;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">System</span><span class="p">.</span><span class="na">err</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Duplicate entry for Resources with external_id: &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">SQLException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h4 id="subjectsprocessorjava">SubjectsProcessor.java</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">package</span><span class="w"> </span><span class="nn">com.data_ingestion</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.json.JSONArray</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.json.JSONObject</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.postgresql.util.PSQLException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.sql.SQLException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.ArrayList</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.List</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">SubjectsProcessor</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">process</span><span class="p">(</span><span class="n">JSONObject</span><span class="w"> </span><span class="n">jsonObject</span><span class="p">,</span><span class="w"> </span><span class="n">DataIngestionClient</span><span class="w"> </span><span class="n">dbClient</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">JSONArray</span><span class="w"> </span><span class="n">subjectsArray</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getJSONArray</span><span class="p">(</span><span class="s">&#34;subject&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">subjectsArray</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">params</span><span class="p">.</span><span class="na">add</span><span class="p">(</span><span class="n">subjectsArray</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="n">i</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">dbClient</span><span class="p">.</span><span class="na">insertData</span><span class="p">(</span><span class="s">&#34;INSERT INTO Subjects (external_id, subject) VALUES (?, ?, ?)&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">params</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">PSQLException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="na">getSQLState</span><span class="p">().</span><span class="na">equals</span><span class="p">(</span><span class="s">&#34;23505&#34;</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">System</span><span class="p">.</span><span class="na">err</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Duplicate entry for Subjects with external_id: &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">SQLException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="the-main-file">The Main File</h2>
<h3 id="dataingestionmainjava">DataIngestionMain.java</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">package</span><span class="w"> </span><span class="nn">com.data_ingestion</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.json.JSONArray</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">org.json.JSONObject</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.io.IOException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.sql.SQLException</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.List</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">DataIngestionMain</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">String</span><span class="w"> </span><span class="n">dbName</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;supreme-court&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">String</span><span class="w"> </span><span class="n">dbUrl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;jdbc:postgresql://localhost:5432/&#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">dbName</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">String</span><span class="w"> </span><span class="n">user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;example&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">String</span><span class="w"> </span><span class="n">password</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;example&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">String</span><span class="w"> </span><span class="n">projectId</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;smart-axis-421517&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">String</span><span class="w"> </span><span class="n">credentialsPath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;/home/cobra/Repos/justin-napolitano/sup-court-data-ingestion/resources/secret.json&#34;</span><span class="p">;</span><span class="w">  </span><span class="c1">// Update this to the path of your JSON key</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">String</span><span class="w"> </span><span class="n">bucketName</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&#34;processed_results&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">try</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Initializing Database Client...&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">DataIngestionClient</span><span class="w"> </span><span class="n">dbClient</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">DataIngestionClient</span><span class="p">(</span><span class="n">dbUrl</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="p">,</span><span class="w"> </span><span class="n">password</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Database Client initialized.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Initializing GCS Client...&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">GCSClient</span><span class="w"> </span><span class="n">gcsClient</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">GCSClient</span><span class="p">(</span><span class="n">projectId</span><span class="p">,</span><span class="w"> </span><span class="n">credentialsPath</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;GCS Client initialized.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Listing objects in the bucket: &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">bucketName</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">objectNames</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gcsClient</span><span class="p">.</span><span class="na">listObjects</span><span class="p">(</span><span class="n">bucketName</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Total objects found: &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">objectNames</span><span class="p">.</span><span class="na">size</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">objectName</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">objectNames</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Processing object: &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">objectName</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// Download JSON data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">String</span><span class="w"> </span><span class="n">jsonData</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gcsClient</span><span class="p">.</span><span class="na">downloadJson</span><span class="p">(</span><span class="n">bucketName</span><span class="p">,</span><span class="w"> </span><span class="n">objectName</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Downloaded JSON data for object: &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">objectName</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// Parse JSON data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">JSONObject</span><span class="w"> </span><span class="n">jsonObject</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">JSONObject</span><span class="p">(</span><span class="n">jsonData</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">JSONArray</span><span class="w"> </span><span class="n">resultsArray</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">jsonObject</span><span class="p">.</span><span class="na">getJSONObject</span><span class="p">(</span><span class="s">&#34;content&#34;</span><span class="p">).</span><span class="na">getJSONArray</span><span class="p">(</span><span class="s">&#34;results&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Parsed JSON data. Total results: &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">resultsArray</span><span class="p">.</span><span class="na">length</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="c1">// Process each result</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">resultsArray</span><span class="p">.</span><span class="na">length</span><span class="p">();</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">JSONObject</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">resultsArray</span><span class="p">.</span><span class="na">getJSONObject</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Processing result &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">&#34; of &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">resultsArray</span><span class="p">.</span><span class="na">length</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="c1">// Process CallNumbers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">CallNumbersProcessor</span><span class="w"> </span><span class="n">callNumbersProcessor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">CallNumbersProcessor</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">callNumbersProcessor</span><span class="p">.</span><span class="na">process</span><span class="p">(</span><span class="n">result</span><span class="p">,</span><span class="w"> </span><span class="n">dbClient</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Processed CallNumbers for result &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="c1">// Process Contributors</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">ContributorsProcessor</span><span class="w"> </span><span class="n">contributorsProcessor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ContributorsProcessor</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">contributorsProcessor</span><span class="p">.</span><span class="na">process</span><span class="p">(</span><span class="n">result</span><span class="p">,</span><span class="w"> </span><span class="n">dbClient</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Processed Contributors for result &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="c1">// Process Items</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">ItemsProcessor</span><span class="w"> </span><span class="n">itemsProcessor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ItemsProcessor</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">itemsProcessor</span><span class="p">.</span><span class="na">process</span><span class="p">(</span><span class="n">result</span><span class="p">,</span><span class="w"> </span><span class="n">dbClient</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Processed Items for result &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="c1">// Process Resources</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">ResourcesProcessor</span><span class="w"> </span><span class="n">resourcesProcessor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">ResourcesProcessor</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">resourcesProcessor</span><span class="p">.</span><span class="na">process</span><span class="p">(</span><span class="n">result</span><span class="p">,</span><span class="w"> </span><span class="n">dbClient</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Processed Resources for result &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="c1">// Process Subjects</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">SubjectsProcessor</span><span class="w"> </span><span class="n">subjectsProcessor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">SubjectsProcessor</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">subjectsProcessor</span><span class="p">.</span><span class="na">process</span><span class="p">(</span><span class="n">result</span><span class="p">,</span><span class="w"> </span><span class="n">dbClient</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Processed Subjects for result &#34;</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">1</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">dbClient</span><span class="p">.</span><span class="na">close</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&#34;Database Client connection closed.&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">catch</span><span class="w"> </span><span class="p">(</span><span class="n">SQLException</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">IOException</span><span class="w"> </span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">e</span><span class="p">.</span><span class="na">printStackTrace</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h2 id="running-the-project">Running the Project</h2>
<h3 id="navigate-to-the-project-directory">Navigate to the Project Directory:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> /path/to/sup-court-data-ingestion
</span></span><span class="line"><span class="cl">Compile the Project:
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mvn compile
</span></span><span class="line"><span class="cl">Execute the Main Class:
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mvn exec:java -Dexec.mainClass<span class="o">=</span><span class="s2">&#34;com.data_ingestion.DataIngestionMain&#34;</span>
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>In this blog post, we walked through setting up a data ingestion workflow using Java and Google Cloud Storage. We covered how to handle unique constraint violations and ensure our data is correctly ingested into the PostgreSQL database. By following these steps, you should be able to set up a robust data ingestion workflow for your own use case.Copy code</p>
]]></content>
			<postid> 20a7090b5adc8449001ce3d5cde1aeb6</postid>
			<author></author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>DataShare &#43; Docker Compose</title>
			<link>//localhost:1313/en/posts/sup-court-graph/docker_compose_blog/</link>
			<pubDate>Mon, 29 Jul 2024 16:12:27 -0500</pubDate>
			<guid>//localhost:1313/en/posts/sup-court-graph/docker_compose_blog/</guid>
			<description><![CDATA[Deploying DataShare with Docker Compose]]></description>
			<content type="html"><![CDATA[<h1 id="deploying-datashare-with-docker-compose">Deploying DataShare with Docker Compose</h1>
<p>Docker Compose is a powerful tool for defining and running multi-container Docker applications. In this blog post, we will walk through a Docker Compose script that sets up a comprehensive data sharing application stack, including DataShare, Elasticsearch, Redis, and PostgreSQL. This setup ensures seamless data management and sharing across different services.</p>
<h2 id="overview-of-services">Overview of Services</h2>
<p>The Docker Compose file defines the following services:</p>
<ul>
<li><strong>DataShare</strong>: A powerful data sharing platform.</li>
<li><strong>Elasticsearch</strong>: A search and analytics engine.</li>
<li><strong>Redis</strong>: An in-memory data structure store.</li>
<li><strong>PostgreSQL</strong>: A robust relational database.</li>
</ul>
<h2 id="docker-compose-file-breakdown">Docker Compose File Breakdown</h2>
<p>Here is the Docker Compose script we&rsquo;ll be discussing:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.7&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">datashare</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">icij/datashare:13.9.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="l">datashare</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">8080</span><span class="p">:</span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DS_DOCKER_MOUNTED_DATA_DIR=/home/datashare/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bind</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">source</span><span class="p">:</span><span class="w"> </span><span class="l">${HOME}/Datashare</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">target</span><span class="p">:</span><span class="w"> </span><span class="l">/home/datashare/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">source</span><span class="p">:</span><span class="w"> </span><span class="l">datashare-models</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">target</span><span class="p">:</span><span class="w"> </span><span class="l">/home/datashare/dist</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      --dataSourceUrl jdbc:postgresql://postgresql/datashare?user=datashare\&amp;password=password 
</span></span></span><span class="line"><span class="cl"><span class="sd">      --mode LOCAL
</span></span></span><span class="line"><span class="cl"><span class="sd">      --tcpListenPort 8080</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">postgresql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">redis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">elasticsearch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">elasticsearch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">docker.elastic.co/elasticsearch/elasticsearch:7.9.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="kc">on</span>-<span class="l">failure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">source</span><span class="p">:</span><span class="w"> </span><span class="l">elasticsearch-data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">target</span><span class="p">:</span><span class="w"> </span><span class="l">/usr/share/elasticsearch/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">read_only</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;http.host=0.0.0.0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;transport.host=0.0.0.0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;cluster.name=datashare&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;discovery.type=single-node&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;discovery.zen.minimum_master_nodes=1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;xpack.license.self_generated.type=basic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;http.cors.enabled=true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;http.cors.allow-origin=*&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;http.cors.allow-methods=OPTIONS, HEAD, GET, POST, PUT, DELETE&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">redis</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">redis:4.0.1-alpine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="kc">on</span>-<span class="l">failure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">postgresql</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">postgres:12-alpine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_USER=datashare</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_PASSWORD=password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_DB=datashare</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">volume</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">source</span><span class="p">:</span><span class="w"> </span><span class="l">postgresql-data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">target</span><span class="p">:</span><span class="w"> </span><span class="l">/var/lib/postgresql/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">datashare-models</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">elasticsearch-data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">postgresql-data</span><span class="p">:</span><span class="w">
</span></span></span></code></pre></div><h2 id="service-configuration-details">Service Configuration Details</h2>
<h3 id="datashare">DataShare</h3>
<ul>
<li><strong>Image</strong>: Uses the <code>icij/datashare:13.9.0</code> image.</li>
<li><strong>Hostname</strong>: Sets the hostname to <code>datashare</code>.</li>
<li><strong>Ports</strong>: Maps port 8080 on the host to port 8080 in the container.</li>
<li><strong>Environment Variables</strong>: Sets <code>DS_DOCKER_MOUNTED_DATA_DIR</code> to <code>/home/datashare/data</code>.</li>
<li><strong>Volumes</strong>:
<ul>
<li>Binds the host directory <code>${HOME}/Datashare</code> to <code>/home/datashare/data</code> in the container.</li>
<li>Mounts a Docker-managed volume <code>datashare-models</code> to <code>/home/datashare/dist</code>.</li>
</ul>
</li>
<li><strong>Command</strong>: Configures the DataShare application to connect to PostgreSQL and operate in local mode.</li>
<li><strong>Depends On</strong>: Ensures that the <code>postgresql</code>, <code>redis</code>, and <code>elasticsearch</code> services are started before <code>datashare</code>.</li>
</ul>
<h3 id="elasticsearch">Elasticsearch</h3>
<ul>
<li><strong>Image</strong>: Uses <code>docker.elastic.co/elasticsearch/elasticsearch:7.9.1</code>.</li>
<li><strong>Restart Policy</strong>: Restarts the container on failure.</li>
<li><strong>Volumes</strong>: Uses a Docker-managed volume <code>elasticsearch-data</code> for data persistence.</li>
<li><strong>Environment Variables</strong>: Configures various Elasticsearch settings, including enabling CORS for HTTP.</li>
</ul>
<h3 id="redis">Redis</h3>
<ul>
<li><strong>Image</strong>: Uses <code>redis:4.0.1-alpine</code>.</li>
<li><strong>Restart Policy</strong>: Restarts the container on failure.</li>
</ul>
<h3 id="postgresql">PostgreSQL</h3>
<ul>
<li><strong>Image</strong>: Uses <code>postgres:12-alpine</code>.</li>
<li><strong>Environment Variables</strong>: Sets up the database with a user, password, and database name.</li>
<li><strong>Volumes</strong>: Uses a Docker-managed volume <code>postgresql-data</code> for data persistence.</li>
</ul>
<h2 id="volumes">Volumes</h2>
<p>The Compose file defines three Docker-managed volumes:</p>
<ul>
<li><strong>datashare-models</strong>: Used by the <code>datashare</code> service.</li>
<li><strong>elasticsearch-data</strong>: Used by the <code>elasticsearch</code> service.</li>
<li><strong>postgresql-data</strong>: Used by the <code>postgresql</code> service.</li>
</ul>
<h2 id="running-the-docker-compose-setup">Running the Docker Compose Setup</h2>
<p>To start the services defined in this Compose file, navigate to the directory containing the <code>docker-compose.yml</code> file and run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker-compose up -d
</span></span></code></pre></div><p>This command will download the necessary images (if not already present), create the containers, and start the services in detached mode.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Using Docker Compose, we can efficiently manage and deploy a multi-container setup for a data sharing application. This setup includes DataShare, Elasticsearch, Redis, and PostgreSQL, ensuring robust data management and analytics capabilities.</p>
<p>For more detailed instructions and additional configurations, you can refer to the <a href="https://icij.gitbook.io/datashare/server-mode/install-with-docker">official DataShare documentation</a>.</p>
<p>With this setup, you can streamline your data sharing processes, enhance collaboration, and leverage the powerful search and analytics features provided by Elasticsearch, all within a manageable and scalable Docker environment.</p>
]]></content>
			<postid> 5befa40e6daa823aa36fa4a334709041</postid>
			<author>Jay Burd</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Bread and Wine</title>
			<link>//localhost:1313/en/posts/bread-and-wine/</link>
			<pubDate>Fri, 19 Jul 2024 00:39:38 -0500</pubDate>
			<guid>//localhost:1313/en/posts/bread-and-wine/</guid>
			<description><![CDATA[Ignazio Silone]]></description>
			<content type="html"><![CDATA[<h1 id="bread-and-wine">Bread and Wine</h1>
<p><em>&ldquo;There always comes a time in life when the young men get bored by the bread and wine at home. They look for food elsewhere. The bread and wine of in inns at the crossroads can calm their hunger and thirst for a while. But man cannot spend all his life at the inns.&rdquo;</em></p>
<h2 id="letting-go-of-idealism">Letting Go of Idealism</h2>
<p>I like this novel.  I like Don Paolo.  I live abstractly.  I would like to live in reality. I think the point of this novel.. or the point that I am taking  away from this.. is that like the quote above.. ereyoung people can seek the fruits of society, of learning, and idealism&hellip; but must at some point face reality. They must return home.. return to themselves and their history to find nourishing bread.</p>
<h2 id="there-is-no-salvation">There is No Salvation</h2>
<p>There cannot be salvation in one&rsquo;s life nor their death. In order &ldquo;to live well one must sell their soul.&rdquo; In order to live as a saint one must also sell their soul.  Christina is consumed by wolves.  She left the security of her home to aid a man she loves.  Alone in the mountains she dies in the jaws of wolves willing to kill without remorse.  She is no martyr.. She leaves three older women alone to die.  Her platonic ideal of a partner will likely die from the elements or be murdered by fascists.</p>
<p>I do not think Silone&rsquo;s take is quite as cynical as mine.  He implies that one may save their soul by overcoming &ldquo;his individual, family, class selfishness and frees himself of the idea of the resignation to the existing evil.&rdquo; I do not think we can overcome ourselves, family, or class. We are condemned to live a life bound by these contraints.  Truth and justice can not prevail. Ruthlessnes and might reign supreme.</p>
<h2 id="men-of-good-will">Men of Good Will</h2>
<p>Maybe.. just maybe we can live aside men of good will.. though I do not believe such a man breathes. We intend to act the saint.. but lead our lovers their death by professing ideals we cannot hope to uphold. We intend to create the kingdom of god but must survive within the empire of Caesar. What shall be unto God must be taken from Caesar.</p>
<h2 id="a-meaningful-life">A Meaningful Life</h2>
<p>So then we are completely damned.. &ldquo;no more or less than others&rdquo; but we are damned to live.  I do not know if dedicating oneself to justice is more meaningful than dedicating oneself to wealth and pleasure.  To seek either path might simply be to chase egotistic ideals of a life well spent.  Maybe there is no meaning. There is no purpose. There just is&hellip; as in there just are things that we experience&hellip; There is no truth to discover.. there is no hidden path to realization.. there just is.</p>
<h2 id="to-reduce-suffering">To Reduce Suffering</h2>
<p>And again I attempt to find a purpose.. I can not live principle. I want to reduce my own suffering.. I want to live a life in which I do not suffer for a greater purpose. I do not want to perform rituals to earn the right to live.  I do not want to crawl upon my knees for the favor of God.</p>
<p>And yet, I cannot reduce my suffering without causing suffering. I cannot live in peace without being willing to attain my peace by force.. and defend it against those willing to harm.</p>
<h2 id="reality">Reality</h2>
<p>I wrote at the beginning of this post.. that I would like to live in reality. I do not really know what this means. I consider reality to be the world devoid of idealism.. The universe as it is..The actions of men are not good nor bad&hellip; they just are&hellip; The deaths of men, women, and children starved by occupying armies are just the inevitable casualities of reality&hellip; I am afraid of this line of thinking.  I am deathly afraid of this line of thinking.</p>
<h2 id="fundamental-right-to-life">Fundamental Right to Life</h2>
<p>I want simply to accept a principle that each and every person possesses a fundamantel right to life.  This is definitely a construct. This is definitely another form of idealism and abstraction&hellip; but I cannot accept the world devoid of meaning. I am afraid by this line of thinking as well.. If dedicated to justice.. heinous acts can be rationalized in the name of a god given right to make right.  Thou shall not kill can be rationalized away when another man harms one&rsquo;s wife.. or children&hellip; but to do nothing is to invite the wolves into your home. We are again submitting ourselves to the good will of other men&hellip;. possibly wolves covered in fleece.</p>
<h2 id="condemnation">Condemnation</h2>
<p>Thus I am condemned to live.. Disease, loss, pain&hellip; there is no escape from suffering.  There is no escape for conflict. There is no escape from humanity.</p>
<h2 id="silone">Silone</h2>
<p>Back to the novel. I think Silone might think similiarly.. but he does not permit himself to resign to nihilism.  He believes in holding true to justice till death. He believes in the life of the martyred saint.  He believes in a life of extreme pain and suffering for the salvation of mankind. He and others can live such a life. I on the other hand accept my position in life&hellip; a peasant seeking a bit of shelter from the elements between bouts with disease and violence beyond my control.</p>
]]></content>
			<postid> 3bb0d1f892e140b53aeec8e331d6f017</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Mastodon Bot Script</title>
			<link>//localhost:1313/en/posts/mastodon-client/</link>
			<pubDate>Thu, 18 Jul 2024 14:36:34 -0500</pubDate>
			<guid>//localhost:1313/en/posts/mastodon-client/</guid>
			<description><![CDATA[Automate Posting to Mastodon]]></description>
			<content type="html"><![CDATA[<h1 id="mastodon-bot-script">Mastodon Bot Script</h1>
<p>This script manages the Mastodon bot, including retrieving secrets from Google Cloud Secret Manager, logging in to Mastodon, and posting toots.</p>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>Python 3.6 or higher</li>
<li>Google Cloud SDK installed and authenticated</li>
<li>Necessary Python packages installed (<code>google-cloud-secret-manager</code>, <code>python-dotenv</code>, <code>mastodon.py</code>, <code>requests</code>)</li>
<li>Google Cloud Project with Secret Manager API enabled</li>
<li>Secrets stored in Google Cloud Secret Manager</li>
</ul>
<h2 id="installation">Installation</h2>
<ol>
<li>
<p><strong>Clone the repository</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone https://your-repo-url.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> your-repo-directory
</span></span></code></pre></div></li>
<li>
<p><strong>Create a virtual environment and activate it</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python -m venv venv
</span></span><span class="line"><span class="cl"><span class="nb">source</span> venv/bin/activate  <span class="c1"># On Windows, use `venv\\Scripts\\activate`</span>
</span></span></code></pre></div></li>
<li>
<p><strong>Install the required packages</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">pip install google-cloud-secret-manager python-dotenv mastodon.py requests
</span></span></code></pre></div></li>
</ol>
<h2 id="setup">Setup</h2>
<ol>
<li>
<p><strong>Create a <code>.env</code> file</strong> in the root directory with the following structure (if needed):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-env" data-lang="env"><span class="line"><span class="cl"><span class="nv">PROJECT_NAME</span><span class="o">=</span>your_project_name
</span></span></code></pre></div></li>
<li>
<p><strong>Store the following secrets in Google Cloud Secret Manager</strong>:</p>
<ul>
<li><code>MASTODON_PASSWORD</code></li>
<li><code>MASTODON_USERNAME</code></li>
<li><code>MASTODON_CLIENT_ID</code></li>
<li><code>MASTODON_SECRET</code></li>
<li><code>MASTODON_BASE_URL</code></li>
<li><code>MASTODON_USER_AGENT</code></li>
</ul>
</li>
</ol>
<h2 id="usage">Usage</h2>
<p>The script provides several command-line arguments to control its behavior.</p>
<h3 id="arguments">Arguments</h3>
<ul>
<li><code>--url</code>: Base URL for the API endpoint (default: <code>http://localhost:8080</code>)</li>
<li><code>--local</code>: Flag to use local credentials for Google Cloud Logging</li>
</ul>
<h3 id="running-the-script">Running the Script</h3>
<ol>
<li>
<p><strong>Run the script</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python your_script.py --url http://localhost:8080
</span></span></code></pre></div></li>
<li>
<p><strong>Run the script with local credentials for Google Cloud Logging</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python your_script.py --url http://localhost:8080 --local
</span></span></code></pre></div></li>
</ol>
<h2 id="code-overview">Code Overview</h2>
<h3 id="imports-and-logging-setup">Imports and Logging Setup</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mastodon</span> <span class="kn">import</span> <span class="n">Mastodon</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">argparse</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">google.cloud</span> <span class="kn">import</span> <span class="n">secretmanager</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gcputils.GoogleCloudLogging</span> <span class="kn">import</span> <span class="n">GoogleCloudLogging</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gcputils.GoogleSecretManager</span> <span class="kn">import</span> <span class="n">GoogleSecretManager</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Set up logging</span>
</span></span><span class="line"><span class="cl"><span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="s1">&#39;</span><span class="si">%(asctime)s</span><span class="s1"> - </span><span class="si">%(levelname)s</span><span class="s1"> - </span><span class="si">%(message)s</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="creating-the-mastodon-app">Creating the Mastodon App</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_app</span><span class="p">(</span><span class="n">app_name</span><span class="o">=</span><span class="s2">&#34;cobra-bot2&#34;</span><span class="p">,</span> <span class="n">api_base_url</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">to_file</span><span class="o">=</span><span class="s2">&#34;masto-secret.secret&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    Create a new app with given app_name and scopes on the instance given by api_base_url.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s1">    app_name (str): Name of the app to be created.
</span></span></span><span class="line"><span class="cl"><span class="s1">    api_base_url (str): Base URL of the Mastodon instance.
</span></span></span><span class="line"><span class="cl"><span class="s1">    to_file (str): File to save the app credentials.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s1">    None
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Mastodon</span><span class="o">.</span><span class="n">create_app</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">client_name</span><span class="o">=</span><span class="n">app_name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">scopes</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;read&#39;</span><span class="p">,</span> <span class="s1">&#39;write&#39;</span><span class="p">,</span> <span class="s1">&#39;follow&#39;</span><span class="p">,</span> <span class="s1">&#39;push&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="n">api_base_url</span><span class="o">=</span><span class="n">api_base_url</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">to_file</span><span class="o">=</span><span class="n">to_file</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">website</span><span class="o">=</span><span class="s2">&#34;https://jnapolitano.com&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;App &#39;</span><span class="si">{</span><span class="n">app_name</span><span class="si">}</span><span class="s2">&#39; registered and credentials saved to &#39;</span><span class="si">{</span><span class="n">to_file</span><span class="si">}</span><span class="s2">&#39;&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="formatting-datetime">Formatting Datetime</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">format_datetime_for_api</span><span class="p">(</span><span class="n">dt</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    Format datetime for API.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s1">    dt (datetime): Datetime object to format.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s1">    str: Formatted datetime string.
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">dt</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">formatted_date</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&#34;%Y-%m-</span><span class="si">%d</span><span class="s2">T%H:%M:%S&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Formatted datetime: </span><span class="si">{</span><span class="n">formatted_date</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">formatted_date</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">None</span>
</span></span></code></pre></div><h3 id="updating-a-toot">Updating a Toot</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">update_toot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">base_url</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    Update toot in the database by sending a POST request to the API endpoint.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s1">    data (dict): Toot data dictionary.
</span></span></span><span class="line"><span class="cl"><span class="s1">    base_url (str): Base URL of the API endpoint.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s1">    None
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">base_url</span><span class="si">}</span><span class="s2">/update/toots&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">:</span> <span class="s1">&#39;application/json&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">toot_data</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;id&#34;</span><span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;created_at&#34;</span><span class="p">:</span> <span class="n">format_datetime_for_api</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;created_at&#39;</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;in_reply_to_id&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;in_reply_to_id&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;in_reply_to_account_id&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;in_reply_to_account_id&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;sensitive&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;sensitive&#39;</span><span class="p">,</span> <span class="kc">False</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;spoiler_text&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;spoiler_text&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;visibility&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;visibility&#39;</span><span class="p">,</span> <span class="s1">&#39;public&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;language&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;language&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;uri&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;uri&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;url&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;site_url&#34;</span><span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;account&#39;</span><span class="p">][</span><span class="s1">&#39;url&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="s1">&#39;account&#39;</span> <span class="ow">in</span> <span class="n">data</span> <span class="ow">and</span> <span class="s1">&#39;url&#39;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;account&#39;</span><span class="p">]</span> <span class="k">else</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;replies_count&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;replies_count&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;reblogs_count&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;reblogs_count&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;favourites_count&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;favourites_count&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;favourited&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;favourited&#39;</span><span class="p">,</span> <span class="kc">False</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;reblogged&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;reblogged&#39;</span><span class="p">,</span> <span class="kc">False</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;muted&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;muted&#39;</span><span class="p">,</span> <span class="kc">False</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;bookmarked&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;bookmarked&#39;</span><span class="p">,</span> <span class="kc">False</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;pinned&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;pinned&#39;</span><span class="p">,</span> <span class="kc">False</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;content&#34;</span><span class="p">:</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;filtered&#34;</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;filtered&#39;</span><span class="p">,</span> <span class="p">[])),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;reblog&#34;</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;reblog&#39;</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;application&#34;</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;application&#39;</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;account&#34;</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;account&#39;</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;media_attachments&#34;</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;media_attachments&#39;</span><span class="p">,</span> <span class="p">[])),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;mentions&#34;</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;mentions&#39;</span><span class="p">,</span> <span class="p">[])),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;tags&#34;</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;tags&#39;</span><span class="p">,</span> <span class="p">[])),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;emojis&#34;</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;emojis&#39;</span><span class="p">,</span> <span class="p">[])),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;card&#34;</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;card&#39;</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;poll&#34;</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;poll&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Toot data: </span><span class="si">{</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">toot_data</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">toot_data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">201</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Successfully added toot: </span><span class="si">{</span><span class="n">toot_data</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Toot updated or no update needed for: </span><span class="si">{</span><span class="n">toot_data</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Failed to update toot: </span><span class="si">{</span><span class="n">toot_data</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">, Status Code: </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2">, Message: </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;An error occurred while updating the toot: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="retrieving-a-new-post">Retrieving a new Post</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_new_post</span><span class="p">(</span><span class="n">base_url</span><span class="p">,</span> <span class="n">table_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    Retrieve a new post from the specified table by sending a GET request to the API endpoint.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s1">    base_url (str): Base URL of the API endpoint.
</span></span></span><span class="line"><span class="cl"><span class="s1">    table_name (str): Name of the table to retrieve the post from.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s1">    dict: Retrieved post data.
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">url</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">base_url</span><span class="si">}</span><span class="s2">/get/post&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;table&#39;</span><span class="p">:</span> <span class="n">table_name</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="n">params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">post</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;New post retrieved&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">post</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">404</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;No new posts available&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Failed to retrieve post: </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">status_code</span><span class="si">}</span><span class="s2"> - </span><span class="si">{</span><span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;An error occurred while fetching the post: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="formatting-a-toot-message">Formatting a Toot Message</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">format_a_toot</span><span class="p">(</span><span class="n">post</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    Format a toot message from the post data.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s1">    post (dict): Post data dictionary.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s1">    str: Formatted toot message.
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">toot</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;New post : </span><span class="si">{</span><span class="n">post</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2"> at </span><span class="si">{</span><span class="n">post</span><span class="p">[</span><span class="s1">&#39;guid&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span>  
</span></span><span class="line"><span class="cl">    <span class="n">logging</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Formatted toot: </span><span class="si">{</span><span class="n">toot</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">toot</span>
</span></span></code></pre></div><h3 id="formatting-a-data-string">Formatting a Data String</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">format_datetime</span><span class="p">(</span><span class="n">date_str</span><span class="p">,</span> <span class="n">date_format</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">%a</span><span class="s2">, </span><span class="si">%d</span><span class="s2"> %b %Y %H:%M:%S %z&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    Format a date string to a specified format.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s1">    date_str (str): Date string to format.
</span></span></span><span class="line"><span class="cl"><span class="s1">    date_format (str): Format of the date string.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s1">    str: Formatted date string.
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">date_str</span><span class="p">,</span> <span class="n">date_format</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">formatted_date</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&#34;%Y-%m-</span><span class="si">%d</span><span class="s2">T%H:%M:%S&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Formatted datetime: </span><span class="si">{</span><span class="n">formatted_date</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">formatted_date</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;An error occurred while formatting date: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">None</span>
</span></span></code></pre></div><h3 id="pretty-print-json">Pretty Print json</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">pretty_print_json</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    Pretty print a JSON object.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s1">    data (dict): JSON data to print.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s1">    None
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">))</span>
</span></span></code></pre></div><h3 id="main">Main</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># load_dotenv()  # Load environment variables from .env file</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s1">&#39;Retrieve a new post from the feed table.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--url&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s2">&#34;http://localhost:8080&#34;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s1">&#39;Base URL for the API endpoint&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--local&#39;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s1">&#39;store_true&#39;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s1">&#39;Use local credentials for Google Cloud Logging&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">toot_table</span> <span class="o">=</span> <span class="s2">&#34;toots&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">base_url</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">url</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Setup Google Cloud Logging</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># project_id = os.environ.get(&#34;PROJECT_NAME&#34;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># credentials_path = os.environ.get(&#34;GOOGLE_APPLICATION_CREDENTIALS&#34;) if args.local else None</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># gcl = GoogleCloudLogging(project_id, credentials_path)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># gcl.setup_logging()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># cred_file = &#34;/app/masto-secret.secret&#34;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># logging.info(cred_file)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># logging.info(os.getcwd())</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># print_directory_contents(os.getcwd())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#Mastodon CLIENT ID FROM SECRET MANSGER</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># project_id = os.getenv(&#34;PROJECT_NAME&#34;)</span>
</span></span><span class="line"><span class="cl">    <span class="n">project_id</span> <span class="o">=</span> <span class="s2">&#34;smart-axis-421517&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">gsm</span> <span class="o">=</span> <span class="n">GoogleSecretManager</span><span class="p">(</span><span class="n">project_id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># client.project = project_id</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">mastodon_password</span> <span class="o">=</span> <span class="n">gsm</span><span class="o">.</span><span class="n">access_secret</span><span class="p">(</span><span class="s2">&#34;MASTODON_PASSWORD&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">mastodon_username</span> <span class="o">=</span> <span class="n">gsm</span><span class="o">.</span><span class="n">access_secret</span><span class="p">(</span><span class="s2">&#34;MASTODON_USERNAME&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">mastodon_client_id</span> <span class="o">=</span> <span class="n">gsm</span><span class="o">.</span><span class="n">access_secret</span><span class="p">(</span><span class="s2">&#34;MASTODON_CLIENT_ID&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">mastodon_secret</span> <span class="o">=</span> <span class="n">gsm</span><span class="o">.</span><span class="n">access_secret</span><span class="p">(</span><span class="s2">&#34;MASTODON_SECRET&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">mastodon_base_url</span> <span class="o">=</span> <span class="n">gsm</span><span class="o">.</span><span class="n">access_secret</span><span class="p">(</span><span class="s2">&#34;MASTODON_BASE_URL&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">mastodon_user_agent</span> <span class="o">=</span> <span class="n">gsm</span><span class="o">.</span><span class="n">access_secret</span><span class="p">(</span><span class="s2">&#34;MASTODON_USER_AGENT&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;Secrets accessed successfully&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error accessing secrets: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># api_base_url = &#34;https://mastodon.social&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># user_cred_file = &#39;/app/cobra-usercred.secret&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># if not os.path.exists(cred_file):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#     logging.info(&#34;Credentials file not found. Registering app...&#34;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#     create_app(api_base_url=api_base_url, to_file=cred_file)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># else:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#     logging.info(f&#34;Credentials file &#39;{cred_file}&#39; already exists. Skipping app registration.&#34;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Instantiate the App</span>
</span></span><span class="line"><span class="cl">    <span class="n">mastodon</span> <span class="o">=</span> <span class="n">Mastodon</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">client_id</span><span class="o">=</span><span class="n">mastodon_client_id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">client_secret</span><span class="o">=</span><span class="n">mastodon_secret</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">api_base_url</span><span class="o">=</span><span class="n">mastodon_base_url</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">user_agent</span><span class="o">=</span><span class="n">mastodon_user_agent</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;Mastodon app instance created&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Login with secrets</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">user_access_token</span> <span class="o">=</span> <span class="n">mastodon</span><span class="o">.</span><span class="n">log_in</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">mastodon_username</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">mastodon_password</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># to_file=user_cred_file</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;Logged in and user credentials saved&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error during login: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Run a session</span>
</span></span><span class="line"><span class="cl">    <span class="n">mastodon</span> <span class="o">=</span> <span class="n">Mastodon</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">client_id</span><span class="o">=</span><span class="n">mastodon_client_id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">client_secret</span><span class="o">=</span><span class="n">mastodon_secret</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">access_token</span><span class="o">=</span><span class="n">user_access_token</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">api_base_url</span><span class="o">=</span><span class="n">mastodon_base_url</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;Mastodon session started&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Test a toot</span>
</span></span><span class="line"><span class="cl">    <span class="n">post</span> <span class="o">=</span> <span class="n">get_new_post</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">base_url</span><span class="p">,</span> <span class="n">table_name</span><span class="o">=</span><span class="n">toot_table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">post</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">toot</span> <span class="o">=</span> <span class="n">format_a_toot</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">toot_result</span> <span class="o">=</span> <span class="n">mastodon</span><span class="o">.</span><span class="n">toot</span><span class="p">(</span><span class="n">toot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Add empty application and account fields</span>
</span></span><span class="line"><span class="cl">        <span class="n">toot_result</span><span class="p">[</span><span class="s2">&#34;application&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="n">toot_result</span><span class="p">[</span><span class="s2">&#34;account&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">update_toot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">toot_result</span><span class="p">,</span> <span class="n">base_url</span><span class="o">=</span><span class="n">base_url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;No new post to toot&#34;</span><span class="p">)</span>
</span></span></code></pre></div>]]></content>
			<postid> f58973c1804ac9cee0a233928500ca25</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>GCP Secret Manager Script</title>
			<link>//localhost:1313/en/posts/gcp-secret-creation/</link>
			<pubDate>Thu, 18 Jul 2024 12:25:11 -0500</pubDate>
			<guid>//localhost:1313/en/posts/gcp-secret-creation/</guid>
			<description><![CDATA[GCP Secret Manager secret automation]]></description>
			<content type="html"><![CDATA[<h1 id="gcp-secret-manager-script">GCP Secret Manager Script</h1>
<p>This script manages secrets in Google Cloud Platform&rsquo;s Secret Manager. It can create, overwrite, and delete secrets based on the provided YAML configuration file and environment variables.</p>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>Python 3.6 or higher</li>
<li>Google Cloud SDK installed and authenticated</li>
<li>Necessary Python packages installed (<code>google-cloud-secret-manager</code>, <code>python-dotenv</code>, <code>pyyaml</code>)</li>
</ul>
<h2 id="installation">Installation</h2>
<ol>
<li>
<p><strong>Clone the repository</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone https://github.com/justin-napolitano/gcp-secret-creation.py.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> your-repo-directory
</span></span></code></pre></div></li>
<li>
<p><strong>Create a virtual environment and activate it</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python -m venv venv
</span></span><span class="line"><span class="cl"><span class="nb">source</span> venv/bin/activate  <span class="c1"># On Windows, use `venv\\Scripts\\activate`</span>
</span></span></code></pre></div></li>
<li>
<p><strong>Install the required packages</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">pip install google-cloud-secret-manager python-dotenv pyyaml
</span></span></code></pre></div></li>
</ol>
<h2 id="setup">Setup</h2>
<ol>
<li>
<p><strong>Create a <code>.env</code> file</strong> in the root directory with the following structure:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-env" data-lang="env"><span class="line"><span class="cl"><span class="nv">PROJECT_NAME</span><span class="o">=</span>your_project_name
</span></span><span class="line"><span class="cl"><span class="nv">FAKE_MASTODON_USERNAME</span><span class="o">=</span>fake_username
</span></span><span class="line"><span class="cl"><span class="nv">FAKE_MASTODON_PASSWORD</span><span class="o">=</span>fake_password
</span></span></code></pre></div></li>
<li>
<p><strong>Create a <code>secrets.yaml</code> file</strong> in the root directory with the following structure:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">secrets</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;FAKE_MASTODON_USERNAME&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">env_var</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;FAKE_MASTODON_USERNAME&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;FAKE_MASTODON_PASSWORD&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">env_var</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;FAKE_MASTODON_PASSWORD&#34;</span><span class="w">
</span></span></span></code></pre></div></li>
</ol>
<h2 id="usage">Usage</h2>
<p>The script provides several command-line arguments to control its behavior.</p>
<h3 id="arguments">Arguments</h3>
<ul>
<li><code>--url</code>: Base URL for the API endpoint (default: <code>http://localhost:8080</code>)</li>
<li><code>--test</code>: Flag to delete secrets after testing</li>
<li><code>--overwrite</code>: Flag to overwrite existing secrets</li>
<li><code>--delete</code>: Flag to delete secrets specified in the YAML file</li>
<li><code>--secrets-file</code>: Path to the YAML file with secrets configuration (default: <code>secrets.yaml</code>)</li>
</ul>
<h3 id="running-the-script">Running the Script</h3>
<ol>
<li>
<p><strong>Run the script without deleting or overwriting secrets</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python your_script.py --secrets-file secrets.yaml
</span></span></code></pre></div></li>
<li>
<p><strong>Run the script and delete secrets after testing</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python your_script.py --secrets-file secrets.yaml --test
</span></span></code></pre></div></li>
<li>
<p><strong>Run the script with the <code>--overwrite</code> flag to overwrite existing secrets</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python your_script.py --secrets-file secrets.yaml --overwrite
</span></span></code></pre></div></li>
<li>
<p><strong>Run the script to delete secrets specified in the YAML file</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python your_script.py --secrets-file secrets.yaml --delete
</span></span></code></pre></div></li>
</ol>
<h2 id="example">Example</h2>
<p>Here is an example of running the script to manage secrets:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python your_script.py --secrets-file secrets.yaml --overwrite --test
</span></span></code></pre></div>]]></content>
			<postid> 007e87c320aadf1b146e16010fe6e4ed</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Schedule a GCP Cloud Run Chron Job</title>
			<link>//localhost:1313/en/posts/schedule-gcp-chron-jobs/</link>
			<pubDate>Tue, 16 Jul 2024 17:23:06 -0500</pubDate>
			<guid>//localhost:1313/en/posts/schedule-gcp-chron-jobs/</guid>
			<description><![CDATA[Scheduling jobs to run every hour]]></description>
			<content type="html"><![CDATA[<h1 id="how-to-schedule-a-cloud-run-job-using-google-cloud-scheduler">How to Schedule a Cloud Run Job Using Google Cloud Scheduler</h1>
<p>In this tutorial, we&rsquo;ll walk through the process of scheduling a job in Google Cloud Run using Google Cloud Scheduler. This is particularly useful for tasks that need to run at regular intervals, such as data processing, periodic updates, or maintenance tasks.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>Before we start, ensure you have the following:</p>
<ul>
<li>A Google Cloud project.</li>
<li><code>gcloud</code> command-line tool installed and authenticated.</li>
<li>Necessary permissions to create Cloud Run jobs and Cloud Scheduler jobs.</li>
<li>A Dockerfile to build your container image.</li>
</ul>
<h2 id="step-1-create-a-cloud-run-job">Step 1: Create a Cloud Run Job</h2>
<p>First, you need to create a Cloud Run job. This involves creating a container image and deploying it as a job in Cloud Run.</p>
<h3 id="1-create-a-dockerfile">1. Create a Dockerfile</h3>
<p>Here is a simple example of a Dockerfile that runs a Python script:</p>
<p>```dockerfile
FROM python:3.8-slim</p>
<p>COPY script.py /script.py</p>
<p>CMD [&ldquo;python&rdquo;, &ldquo;/script.py&rdquo;]
```</p>
<h3 id="2-build-and-push-the-docker-image">2. Build and Push the Docker Image</h3>
<p>Use the following <code>gcloud</code> commands to build and push your Docker image to Google Container Registry:</p>
<p>```bash</p>
<h1 id="set-variables">Set variables</h1>
<p>PROJECT_NAME=&ldquo;your-project-name&rdquo;
IMAGE_NAME=&ldquo;your-image-name&rdquo;
TAG=&ldquo;latest&rdquo;
REGION=&ldquo;us-west2&rdquo;</p>
<h1 id="build-the-docker-image">Build the Docker image</h1>
<p>gcloud builds submit &ndash;tag gcr.io/$PROJECT_NAME/$IMAGE_NAME:$TAG</p>
<h1 id="deploy-the-cloud-run-job">Deploy the Cloud Run job</h1>
<p>gcloud run jobs create $IMAGE_NAME-job <br>
&ndash;image gcr.io/$PROJECT_NAME/$IMAGE_NAME:$TAG <br>
&ndash;region $REGION
```</p>
<h2 id="step-2-schedule-the-job-feel-free-to-using-google-cloud-scheduler">Step 2: Schedule the Job Feel free to Using Google Cloud Scheduler</h2>
<p>Now, we’ll create a Cloud Scheduler job to trigger the Cloud Run job at regular intervals. In this example, we will schedule the job to run every hour.</p>
<h3 id="1-create-the-scheduler-job">1. Create the Scheduler Job</h3>
<p>Run the following <code>gcloud</code> command to create a Cloud Scheduler job:</p>
<p>```bash
gcloud scheduler jobs create http python-rss-reader-scheduler <br>
&ndash;schedule=&ldquo;0 * * * *&rdquo; <br>
&ndash;uri=&ldquo;https://$REGION-run.googleapis.com/apis/run.googleapis.com/v1/namespaces/$PROJECT_NAME/jobs/$IMAGE_NAME-job:run&rdquo; <br>
&ndash;http-method=&ldquo;POST&rdquo; <br>
&ndash;time-zone=&ldquo;UTC&rdquo; <br>
&ndash;oidc-service-account-email=&ldquo;general-purpose-account@$PROJECT_NAME.iam.gserviceaccount.com&rdquo; <br>
&ndash;location=&quot;$REGION&quot;
```</p>
<h3 id="explanation">Explanation</h3>
<ul>
<li><code>--schedule=&quot;0 * * * *&quot;</code>: This cron expression schedules the job to run every hour.</li>
<li><code>--uri</code>: The endpoint to trigger the Cloud Run job.</li>
<li><code>--http-method=&quot;POST&quot;</code>: The HTTP method to use when making the request.</li>
<li><code>--time-zone=&quot;UTC&quot;</code>: The time zone for the scheduler.</li>
<li><code>--oidc-service-account-email</code>: The service account email to use for authentication.</li>
<li><code>--location</code>: The location of the scheduler job.</li>
</ul>
<h2 id="step-3-verify-the-scheduler-job">Step 3: Verify the Scheduler Job</h2>
<p>To ensure the scheduler job is set up correctly, you can list your Cloud Scheduler jobs:</p>
<p>```bash
gcloud scheduler jobs list &ndash;location $REGION
```</p>
<p>You should see your <code>python-rss-reader-scheduler</code> job listed.</p>
<h2 id="summary">Summary</h2>
<p>In this tutorial, we covered how to schedule a Cloud Run job using Google Cloud Scheduler. By following these steps, you can automate tasks to run at regular intervals, improving the efficiency and reliability of your applications.</p>
<p>Modify the cron expression and other parameters to suit your specific needs.</p>
]]></content>
			<postid> 508c441ef6b5a5927e334810dab01bc7</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Create and Deploy Cloud Run Job Script</title>
			<link>//localhost:1313/en/posts/create_deploy_cloud_run_job/</link>
			<pubDate>Sun, 14 Jul 2024 22:36:34 -0500</pubDate>
			<guid>//localhost:1313/en/posts/create_deploy_cloud_run_job/</guid>
			<description><![CDATA[A script to create and deploy a gcp cloud run job from the cli]]></description>
			<content type="html"><![CDATA[<h1 id="cloud-run-job-deployment-script">Cloud Run Job Deployment Script</h1>
<p>This repository contains a script to build and deploy a Python application as a Cloud Run Job using Google Cloud Build. The script dynamically generates a <code>cloudbuild.yaml</code> file and submits it to Google Cloud Build.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>Before using the deployment script, ensure you have the following:</p>
<ul>
<li><strong>Google Cloud SDK</strong>: Installed and configured.</li>
<li><strong>Docker</strong>: Installed.</li>
<li><strong>Google Cloud Project</strong>: Created and configured.</li>
<li><strong>Service Account Key</strong>: A service account key JSON file with appropriate permissions stored at <code>keys/service-account-key.json</code>.</li>
</ul>
<h2 id="files">Files</h2>
<ul>
<li><code>deploy_cloud_run_job.sh</code>: The main script to build, deploy, and run the Cloud Run Job.</li>
<li><code>Dockerfile</code>: The Dockerfile to build the Docker image for your Python application.</li>
<li><code>requirements.txt</code>: List of dependencies for your Python application (if any).</li>
<li><code>cloudbuild.yaml</code>: Dynamically generated by the script; defines the build steps for Cloud Build.</li>
</ul>
<h2 id="usage">Usage</h2>
<h3 id="1-clone-the-repository">1. Clone the Repository</h3>
<p>Clone this repository to your local machine:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone &lt;repository-url&gt;
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> &lt;repository-directory&gt;
</span></span></code></pre></div><h3 id="2-prepare-your-environment">2. Prepare Your Environment</h3>
<p>Ensure your Python application and Dockerfile are prepared in the current directory. Also, ensure your service account key JSON file is located at <code>keys/service-account-key.json</code>.</p>
<h3 id="3-make-the-script-executable">3. Make the Script Executable</h3>
<p>Make the deployment script executable:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chmod +x deploy_cloud_run_job.sh
</span></span></code></pre></div><h3 id="4-run-the-script">4. Run the Script</h3>
<p>Run the script with the required arguments:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./deploy_cloud_run_job.sh &lt;PROJECT_NAME&gt; &lt;IMAGE_NAME&gt; &lt;JOB_NAME&gt;
</span></span></code></pre></div><p>Replace `&lt;PROJECT_NAME&gt;`, `&lt;IMAGE_NAME&gt;`, and `&lt;JOB_NAME&gt;` with your actual Google Cloud project name, desired Docker image name, and Cloud Run Job name.</p>
<h3 id="example">Example</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./deploy_cloud_run_job.sh smart-axis-421517 my-python-job my-cloud-run-job
</span></span></code></pre></div><h2 id="how-it-works">How It Works</h2>
<ol>
<li><strong>Docker Image Build</strong>: The script builds a Docker image using the provided <code>Dockerfile</code>.</li>
<li><strong>Push to Container Registry</strong>: The Docker image is pushed to Google Container Registry.</li>
<li><strong>Deploy as Cloud Run Job</strong>: The script deploys the Docker image as a Cloud Run Job using the dynamically generated <code>cloudbuild.yaml</code> file.</li>
<li><strong>Execute the Job</strong>: Finally, the script executes the Cloud Run Job.</li>
</ol>
<h2 id="notes">Notes</h2>
<ul>
<li>Ensure you have the necessary permissions to deploy and execute jobs in your Google Cloud Project.</li>
<li>The region for the Cloud Run Job deployment is set to <code>us-central1</code> by default. You can change it in the script if needed.</li>
</ul>
<h2 id="troubleshooting">Troubleshooting</h2>
<ul>
<li>If the script fails, check the error messages for details.</li>
<li>Ensure all prerequisites are met and paths are correctly set.</li>
<li>Verify that the service account key has the necessary permissions.</li>
</ul>
<h2 id="license">License</h2>
<p>This project is licensed under the MIT License. See the <a href="LICENSE">LICENSE</a> file for details.</p>
]]></content>
			<postid> 2239b8cfb19235d2fbfd9cc91558b438</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Pull.. Commit.. And Push Bash Script</title>
			<link>//localhost:1313/en/posts/push-commits/</link>
			<pubDate>Sat, 13 Jul 2024 22:36:34 -0500</pubDate>
			<guid>//localhost:1313/en/posts/push-commits/</guid>
			<description><![CDATA[Utility script to update all repos within a directory.]]></description>
			<content type="html"><![CDATA[<h1 id="push-committed-and-uncommitted-changes-script">Push Committed and Uncommitted Changes Script</h1>
<p>This script traverses a specified directory of git repositories, pulls updates for all branches, checks for committed and uncommitted changes across all branches, and pushes those changes to the remote repository. For uncommitted changes, it creates a new branch called <code>uncommitted</code>, commits the changes with a message detailing the original branch, and then pushes the new branch to the remote. For the <code>main</code> branch, if there are committed changes, it moves those changes to a new branch called <code>bad-practice</code> and then pushes that branch to the remote repository.</p>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>Bash shell</li>
<li>Git installed</li>
<li>Proper permissions to access and modify the repositories</li>
</ul>
<h2 id="installation">Installation</h2>
<h3 id="2-create-the-script">2. <strong>Create the script</strong>:</h3>
<p>Save the following script to a file named <code>push_committed_changes.sh</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Define the default root directory where your repos are located</span>
</span></span><span class="line"><span class="cl"><span class="nv">DEFAULT_ROOT_DIR</span><span class="o">=</span><span class="s2">&#34;/home/cobra/Repos&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Define the default blacklist file location</span>
</span></span><span class="line"><span class="cl"><span class="nv">BLACKLIST_FILE</span><span class="o">=</span><span class="s2">&#34;/etc/commit_push_blacklist.conf&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Define the GitHub username to check against</span>
</span></span><span class="line"><span class="cl"><span class="nv">GITHUB_USERNAME</span><span class="o">=</span><span class="s2">&#34;your_github_username&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Parse arguments</span>
</span></span><span class="line"><span class="cl"><span class="nv">LOCAL_MODE</span><span class="o">=</span><span class="nb">false</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="o">[[</span> <span class="nv">$#</span> -gt <span class="m">0</span> <span class="o">]]</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="nv">$1</span> in
</span></span><span class="line"><span class="cl">        --local<span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="nv">LOCAL_MODE</span><span class="o">=</span><span class="nb">true</span>
</span></span><span class="line"><span class="cl">            <span class="nb">shift</span>
</span></span><span class="line"><span class="cl">            <span class="p">;;</span>
</span></span><span class="line"><span class="cl">        *<span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="nv">ROOT_DIR</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl">            <span class="nb">shift</span>
</span></span><span class="line"><span class="cl">            <span class="p">;;</span>
</span></span><span class="line"><span class="cl">    <span class="k">esac</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Set ROOT_DIR to default if not set</span>
</span></span><span class="line"><span class="cl"><span class="nv">ROOT_DIR</span><span class="o">=</span><span class="si">${</span><span class="nv">ROOT_DIR</span><span class="k">:-</span><span class="nv">$DEFAULT_ROOT_DIR</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Export the BLACKLIST_FILE and GITHUB_USERNAME variables so they are available in subshells</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> BLACKLIST_FILE
</span></span><span class="line"><span class="cl"><span class="nb">export</span> GITHUB_USERNAME
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Function to check if a repository is blacklisted</span>
</span></span><span class="line"><span class="cl">is_blacklisted<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">local</span> <span class="nv">repo_dir</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;    Checking for Blacklisted </span><span class="nv">$repo_dir</span><span class="s2"> in </span><span class="nv">$BLACKLIST_FILE</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[</span> -z <span class="s2">&#34;</span><span class="nv">$BLACKLIST_FILE</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;    BLACKLIST_FILE is not set&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[</span> ! -f <span class="s2">&#34;</span><span class="nv">$BLACKLIST_FILE</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;    Blacklist file does not exist: </span><span class="nv">$BLACKLIST_FILE</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl">    grep -qxF <span class="s2">&#34;</span><span class="nv">$repo_dir</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$BLACKLIST_FILE</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">local</span> <span class="nv">result</span><span class="o">=</span><span class="nv">$?</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[</span> <span class="nv">$result</span> -eq <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;    </span><span class="nv">$repo_dir</span><span class="s2"> is blacklisted&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;    </span><span class="nv">$repo_dir</span><span class="s2"> is not blacklisted&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nv">$result</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Function to check if a repository belongs to the specified user</span>
</span></span><span class="line"><span class="cl">belongs_to_user<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">local</span> <span class="nv">repo_dir</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">local</span> <span class="nv">remote_url</span><span class="o">=</span><span class="k">$(</span>git -C <span class="s2">&#34;</span><span class="nv">$repo_dir</span><span class="s2">&#34;</span> remote get-url origin 2&gt;/dev/null<span class="k">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[[</span> <span class="s2">&#34;</span><span class="nv">$remote_url</span><span class="s2">&#34;</span> <span class="o">==</span> *<span class="s2">&#34;</span><span class="nv">$GITHUB_USERNAME</span><span class="s2">&#34;</span>* <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Function to check if a remote branch exists</span>
</span></span><span class="line"><span class="cl">remote_branch_exists<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">local</span> <span class="nv">branch</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">local</span> <span class="nv">repo_dir</span><span class="o">=</span><span class="nv">$2</span>
</span></span><span class="line"><span class="cl">    git -C <span class="s2">&#34;</span><span class="nv">$repo_dir</span><span class="s2">&#34;</span> ls-remote --exit-code --heads origin <span class="s2">&#34;</span><span class="nv">$branch</span><span class="s2">&#34;</span> &gt;/dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nv">$?</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Function to pull all branches</span>
</span></span><span class="line"><span class="cl">pull_all_branches<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">local</span> <span class="nv">repo_dir</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;Pulling updates in </span><span class="nv">$repo_dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">cd</span> <span class="s2">&#34;</span><span class="nv">$repo_dir</span><span class="s2">&#34;</span> <span class="o">||</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Fetch all branches</span>
</span></span><span class="line"><span class="cl">    git fetch --all
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Get a list of all branches</span>
</span></span><span class="line"><span class="cl">    <span class="nv">branches</span><span class="o">=</span><span class="k">$(</span>git branch -r <span class="p">|</span> grep -v <span class="s1">&#39;\-&gt;&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Checkout and pull each branch</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> branch in <span class="nv">$branches</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">        <span class="nv">local_branch</span><span class="o">=</span><span class="si">${</span><span class="nv">branch</span><span class="p">#origin/</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">        git checkout <span class="s2">&#34;</span><span class="nv">$local_branch</span><span class="s2">&#34;</span> <span class="o">||</span> git checkout -b <span class="s2">&#34;</span><span class="nv">$local_branch</span><span class="s2">&#34;</span> <span class="s2">&#34;origin/</span><span class="nv">$local_branch</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        git pull origin <span class="s2">&#34;</span><span class="nv">$local_branch</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">done</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nb">cd</span> - <span class="o">||</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Function to push only committed changes across all branches</span>
</span></span><span class="line"><span class="cl">push_committed_changes<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">local</span> <span class="nv">repo_dir</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;Processing repository in </span><span class="nv">$repo_dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">cd</span> <span class="s2">&#34;</span><span class="nv">$repo_dir</span><span class="s2">&#34;</span> <span class="o">||</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> is_blacklisted <span class="s2">&#34;</span><span class="nv">$repo_dir</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;    Repository is blacklisted, skipping </span><span class="nv">$repo_dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">cd</span> - <span class="o">||</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> ! belongs_to_user <span class="s2">&#34;</span><span class="nv">$repo_dir</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;    Repository does not belong to user </span><span class="nv">$GITHUB_USERNAME</span><span class="s2">, skipping </span><span class="nv">$repo_dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">cd</span> - <span class="o">||</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Pull all branches first</span>
</span></span><span class="line"><span class="cl">    pull_all_branches <span class="s2">&#34;</span><span class="nv">$repo_dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Get all branches</span>
</span></span><span class="line"><span class="cl">    <span class="nv">branches</span><span class="o">=</span><span class="k">$(</span>git <span class="k">for</span>-each-ref --format<span class="o">=</span><span class="s1">&#39;%(refname:short)&#39;</span> refs/heads/<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> branch in <span class="nv">$branches</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">        git checkout <span class="s2">&#34;</span><span class="nv">$branch</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Handle uncommitted changes</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&#34;</span><span class="k">$(</span>git status --porcelain<span class="k">)</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">            <span class="nb">echo</span> <span class="s2">&#34;    Uncommitted changes found on branch </span><span class="nv">$branch</span><span class="s2"> in </span><span class="nv">$repo_dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">            git checkout -b uncommitted
</span></span><span class="line"><span class="cl">            git add .
</span></span><span class="line"><span class="cl">            git commit -m <span class="s2">&#34;Uncommitted changes from branch </span><span class="nv">$branch</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">            git push --set-upstream origin uncommitted
</span></span><span class="line"><span class="cl">            <span class="nb">echo</span> <span class="s2">&#34;    Uncommitted changes have been committed and pushed to uncommitted branch in </span><span class="nv">$repo_dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$branch</span><span class="s2">&#34;</span> <span class="o">==</span> <span class="s2">&#34;main&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Check if there are committed changes on the main branch</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> git log origin/main..HEAD <span class="p">|</span> grep -q <span class="s2">&#34;.&#34;</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">                <span class="nb">echo</span> <span class="s2">&#34;    Committed changes found on main branch in </span><span class="nv">$repo_dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c1"># Create and switch to the bad-practice branch</span>
</span></span><span class="line"><span class="cl">                git checkout -b bad-practice
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c1"># Check if remote branch bad-practice exists, create if it doesn&#39;t</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> ! remote_branch_exists <span class="s2">&#34;bad-practice&#34;</span> <span class="s2">&#34;</span><span class="nv">$repo_dir</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">                    git push --set-upstream origin bad-practice
</span></span><span class="line"><span class="cl">                <span class="k">else</span>
</span></span><span class="line"><span class="cl">                    git push origin bad-practice
</span></span><span class="line"><span class="cl">                <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="nb">echo</span> <span class="s2">&#34;    Changes have been moved to and pushed on the bad-practice branch in </span><span class="nv">$repo_dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="nb">echo</span> <span class="s2">&#34;    No committed changes to push on the main branch in </span><span class="nv">$repo_dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="k">fi</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Check if there are committed changes to push on the current branch</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> remote_branch_exists <span class="s2">&#34;</span><span class="nv">$branch</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$repo_dir</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> git log origin/<span class="s2">&#34;</span><span class="nv">$branch</span><span class="s2">&#34;</span>..HEAD <span class="p">|</span> grep -q <span class="s2">&#34;.&#34;</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">                    <span class="nb">echo</span> <span class="s2">&#34;    Committed changes found on branch </span><span class="nv">$branch</span><span class="s2"> in </span><span class="nv">$repo_dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                    git push origin <span class="s2">&#34;</span><span class="nv">$branch</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="nb">echo</span> <span class="s2">&#34;    Changes have been pushed to remote branch </span><span class="nv">$branch</span><span class="s2"> in </span><span class="nv">$repo_dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span>
</span></span><span class="line"><span class="cl">                    <span class="nb">echo</span> <span class="s2">&#34;    No committed changes to push on branch </span><span class="nv">$branch</span><span class="s2"> in </span><span class="nv">$repo_dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="k">fi</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="nb">echo</span> <span class="s2">&#34;    Remote branch </span><span class="nv">$branch</span><span class="s2"> does not exist, pushing for the first time&#34;</span>
</span></span><span class="line"><span class="cl">                git push --set-upstream origin <span class="s2">&#34;</span><span class="nv">$branch</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="k">fi</span>
</span></span><span class="line"><span class="cl">        <span class="k">fi</span>
</span></span><span class="line"><span class="cl">    <span class="k">done</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">cd</span> - <span class="o">||</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Export the functions so they can be used by find -exec</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> -f push_committed_changes
</span></span><span class="line"><span class="cl"><span class="nb">export</span> -f pull_all_branches
</span></span><span class="line"><span class="cl"><span class="nb">export</span> -f is_blacklisted
</span></span><span class="line"><span class="cl"><span class="nb">export</span> -f belongs_to_user
</span></span><span class="line"><span class="cl"><span class="nb">export</span> -f remote_branch_exists
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nv">$LOCAL_MODE</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;Running in local mode. Processing the current working directory.&#34;</span>
</span></span><span class="line"><span class="cl">    push_committed_changes <span class="s2">&#34;</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;Starting push process for repositories in </span><span class="nv">$ROOT_DIR</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Ensure the blacklist file exists</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[</span> ! -f <span class="s2">&#34;</span><span class="nv">$BLACKLIST_FILE</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;Blacklist file not found: </span><span class="nv">$BLACKLIST_FILE</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Find all .git directories and push committed changes across all branches</span>
</span></span><span class="line"><span class="cl">    find <span class="s2">&#34;</span><span class="nv">$ROOT_DIR</span><span class="s2">&#34;</span> -name <span class="s2">&#34;.git&#34;</span> -type d -exec bash -c <span class="s1">&#39;push_committed_changes &#34;$(dirname &#34;{}&#34;)&#34;&#39;</span> <span class="se">\;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;All repositories processed.&#34;</span>
</span></span></code></pre></div><h3 id="2-make-the-script-executable">2. <strong>Make the Script Executable</strong>:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod +x your-script-name
</span></span></code></pre></div><h3 id="3-create-the-blacklist-file">3. <strong>Create the Blacklist File</strong>:</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo touch /etc/commit_push_blacklist.conf
</span></span></code></pre></div><h3 id="4-set-your-git-username-in-the-script">4. <strong>Set Your Git Username in the Script</strong></h3>
<ol start="5">
<li><strong>Run The Script</strong></li>
</ol>
<ul>
<li>In every repo</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./push_committed_changes.sh <span class="o">[</span>path_to_repos<span class="o">]</span>
</span></span></code></pre></div><ul>
<li>Locally</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./push_committed_changes.sh --local
</span></span></code></pre></div>]]></content>
			<postid> 0b90fb0a4e0977d54f283501fb939fca</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Windy Peak Via Mountain Lion Loop</title>
			<link>//localhost:1313/en/posts/windy-peak-mountain-lion-loop/</link>
			<pubDate>Sat, 13 Jul 2024 16:29:26 -0500</pubDate>
			<guid>//localhost:1313/en/posts/windy-peak-mountain-lion-loop/</guid>
			<description><![CDATA[A nice day hike]]></description>
			<content type="html"><![CDATA[<h1 id="windy-peak-via-mountain-lion-loop">Windy Peak via Mountain Lion Loop</h1>
<p>I do not know much about this little day hike.. It seems to be fairly doable despite an all trails hard rating. I&rsquo;ll find out in the am</p>
<h2 id="details">Details</h2>
<ul>
<li>
<p><a href="https://www.alltrails.com/trail/us/colorado/mountain-lion-windy-peak-summit?sh=wzox3b">All Trails Link</a></p>
</li>
<li>
<p>Driving Directions: Coal Creek Canyon, Colorado 80403</p>
</li>
<li>
<p>Trail Head : <a href="https://maps.app.goo.gl/H8DFYxX4ib7D3sM86">Nott Creek Trailhead</a></p>
</li>
<li>
<p>Park Info: <a href="https://cpw.state.co.us/placestogo/parks/goldengatecanyon">site</a></p>
</li>
</ul>
<h2 id="plan">Plan</h2>
<h3 id="driving">Driving</h3>
<ul>
<li>Leave Littleon in the AM around 5 am.</li>
<li>Arrive around 6 am</li>
</ul>
<h3 id="food">Food</h3>
<p>I&rsquo;ll bring about 1000 calories.</p>
<ul>
<li>Dates</li>
<li>Figs</li>
<li>Almonds</li>
<li>A cliff bar</li>
</ul>
<h3 id="gear">Gear</h3>
<h4 id="back-pack">Back Pack</h4>
<p>I&rsquo;ll carry an 18 liter bag with</p>
<ul>
<li>Possibles Sack</li>
<li>3l water in the pack</li>
<li>A wind hoodie</li>
<li>A lightweight fleece just in case</li>
</ul>
<h4 id="sling-bag">Sling Bag</h4>
<ul>
<li>Food</li>
<li>Headlight</li>
<li>Backpack</li>
<li>Sunnies</li>
</ul>
<h4 id="clothing">Clothing</h4>
<ul>
<li>Modified Base Layer</li>
<li>Sun Hoodie</li>
<li>Carpenter Pants or old jeans</li>
<li>Face Covering</li>
<li>Wool Socks</li>
</ul>
<h4 id="shoes">Shoes</h4>
<ul>
<li>Trail Runners</li>
</ul>
<h4 id="accesories">Accesories</h4>
<ul>
<li>Hat</li>
<li>Sun Gloves</li>
</ul>
<h3 id="car">Car</h3>
<ul>
<li>Extra Water</li>
<li>Wool Blanket</li>
<li>Change of clothing
<ul>
<li>Base</li>
<li>T shirt</li>
<li>Jeans</li>
<li>Button down</li>
</ul>
</li>
</ul>
<h2 id="the-hike">The Hike</h2>
<h3 id="outline">Outline</h3>
<ul>
<li>Time 3.5 hours</li>
<li>Water consumption : 3 Liters</li>
<li>Views : 3/5</li>
<li>Fun : 3/5</li>
<li>Difficulty 2/5</li>
</ul>
<h3 id="gear-review">Gear Review</h3>
<p>I overdressed&hellip; Again.   I was overheating early in the hike so I removed my base layer. I felt more comfortable in a sun hoody.</p>
<p>I did not remove the base layers on my legs.. I was still kinda overheating.. I ned to find a solution for summer baselayers</p>
<h3 id="cotton-pants">Cotton Pants</h3>
<p>I will not wear cotton pants again. I sweat through the seat. I think a wool poly pant will be perfect.  I need to find a good set from the surplus store.</p>
<h2 id="photos">Photos</h2>
<p>(I will write a script to embed these later.Meta requires a business accoun tot do this.. I tried to hack it.. but they want an access token&hellip; I hate link clicking.)</p>
<p><a href="https://www.instagram.com/p/C9adc2otXE6/">InstaLink</a></p>
]]></content>
			<postid> bfd6c03d428d47562d7ee2a58f0624d4</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Current Time Script</title>
			<link>//localhost:1313/en/posts/current-time-script/</link>
			<pubDate>Sat, 13 Jul 2024 16:25:59 -0500</pubDate>
			<guid>//localhost:1313/en/posts/current-time-script/</guid>
			<description><![CDATA[An easy way to expor the current time]]></description>
			<content type="html"><![CDATA[<h1 id="current-time-script">Current Time Script</h1>
<p>This script returns the current date and time in the format <code>date = &quot;2024-07-13T14:27:45-06:00&quot;</code>.</p>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>Bash shell</li>
<li><code>date</code> command (available on most Unix-like systems)</li>
</ul>
<h2 id="usage">Usage</h2>
<ol>
<li>
<p><strong>Save the Script:</strong></p>
<p>Save the following script to a file, e.g., <code>current_time.sh</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Get the current date and time in the desired format</span>
</span></span><span class="line"><span class="cl"><span class="nv">current_time</span><span class="o">=</span><span class="k">$(</span>date +<span class="s2">&#34;%Y-%m-%dT%H:%M:%S%z&#34;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Format the time zone offset with a colon</span>
</span></span><span class="line"><span class="cl"><span class="nv">formatted_time</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">current_time</span><span class="p">:</span><span class="nv">0</span><span class="p">:</span><span class="nv">22</span><span class="si">}</span><span class="s2">:</span><span class="si">${</span><span class="nv">current_time</span><span class="p">:</span><span class="nv">22</span><span class="p">:</span><span class="nv">2</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Print the result</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;date = \&#34;</span><span class="nv">$formatted_time</span><span class="s2">\&#34;&#34;</span>
</span></span></code></pre></div></li>
<li>
<p><strong>Make the Script Executable:</strong></p>
<p>Run the following command to make the script executable:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chmod +x current_time.sh
</span></span></code></pre></div></li>
<li>
<p><strong>Run the Script:</strong></p>
<p>Execute the script using the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./current_time.sh
</span></span></code></pre></div><p>The output will be the current date and time in the specified format, e.g.:</p>
<pre tabindex="0"><code>date = &#34;2024-07-13T14:27:45-06:00&#34;
</code></pre></li>
</ol>
<h2 id="license">License</h2>
<p>This script is provided as-is without any warranty. Feel free to modify and use it as needed.</p>
]]></content>
			<postid> 9a0b6af894c8d130bbdbf14b2454c5b2</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Update All Repos Bash Script</title>
			<link>//localhost:1313/en/posts/pull-all-repos/</link>
			<pubDate>Sat, 13 Jul 2024 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/pull-all-repos/</guid>
			<description><![CDATA[Utility script to update all repos wihtin a directory.]]></description>
			<content type="html"><![CDATA[<h1 id="update-repositories-script">Update Repositories Script</h1>
<p>This script recursively finds all git repositories in a specified directory and pulls the latest changes for each one.</p>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>Bash shell</li>
<li>Git installed</li>
<li>Proper permissions to access and modify the repositories</li>
</ul>
<h2 id="installation">Installation</h2>
<ol>
<li>
<p><strong>Create the script</strong>:
Save the following script to a file named <code>update_repos.sh</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Define the default root directory where your repos are located</span>
</span></span><span class="line"><span class="cl"><span class="nv">DEFAULT_ROOT_DIR</span><span class="o">=</span><span class="s2">&#34;/home/cobra/Repos&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Use the provided argument as the root directory, or the default if none is provided</span>
</span></span><span class="line"><span class="cl"><span class="nv">ROOT_DIR</span><span class="o">=</span><span class="si">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">$DEFAULT_ROOT_DIR</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Starting update process for repositories in </span><span class="nv">$ROOT_DIR</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Function to pull changes in a git repository</span>
</span></span><span class="line"><span class="cl">pull_repo<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">local</span> <span class="nv">repo_dir</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;Pulling updates in </span><span class="nv">$repo_dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">cd</span> <span class="s2">&#34;</span><span class="nv">$repo_dir</span><span class="s2">&#34;</span> <span class="o">||</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl">    git pull
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;Completed update in </span><span class="nv">$repo_dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">cd</span> - <span class="o">||</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Export the function so it can be used by find -exec</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> -f pull_repo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Find all .git directories and pull changes in their parent directories</span>
</span></span><span class="line"><span class="cl">find <span class="s2">&#34;</span><span class="nv">$ROOT_DIR</span><span class="s2">&#34;</span> -name <span class="s2">&#34;.git&#34;</span> -type d -exec bash -c <span class="s1">&#39;pull_repo &#34;$(dirname &#34;{}&#34;)&#34;&#39;</span> <span class="se">\;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;All repositories updated.&#34;</span>
</span></span></code></pre></div></li>
<li>
<p><strong>Make the script executable</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chmod +x update_repos.sh
</span></span></code></pre></div></li>
<li>
<p><strong>Move the script to <code>/usr/local/bin</code></strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo mv update_repos.sh /usr/local/bin/update_repos
</span></span></code></pre></div></li>
<li>
<p><strong>Verify the script is accessible</strong>:
You can now run the script from anywhere by simply typing <code>update_repos</code> in the terminal.</p>
</li>
</ol>
<h2 id="usage">Usage</h2>
<ol>
<li>
<p>Open a terminal.</p>
</li>
<li>
<p>Run the script by typing:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">update_repos <span class="o">[</span>path_to_repos<span class="o">]</span>
</span></span></code></pre></div><ul>
<li>If no path is provided, it defaults to <code>/home/cobra/Repos</code>.</li>
</ul>
</li>
</ol>
<p>The script will find all <code>.git</code> directories in the specified root directory and pull the latest changes for each repository. It will provide status updates during the process.</p>
<h2 id="license">License</h2>
<p>This project is licensed under the MIT License.</p>
]]></content>
			<postid> e2a4d37bbcf2a68787c98790e11e5bfa</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Automate Posting Hugo Blog to Social Sites (with a db) Part 3</title>
			<link>//localhost:1313/en/posts/setup-mysql-gcp/</link>
			<pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/setup-mysql-gcp/</guid>
			<description><![CDATA[Creating a CMS DB.. Because why not]]></description>
			<content type="html"><![CDATA[<h1 id="automate-blog-with-gcp-mysql-server">Automate Blog with GCP MYSQL Server</h1>
<p>So I am just going to create my own CMS.  I know there are other solutions.. but I am nearly there.. I also want to manage content like i manage a linux system.. So I am going to do this with a db.. bashscripts.. and linux servers.</p>
<h2 id="create-the-mysql-instance">Create the MYSQL Instance</h2>
<p>I could just use a db wihtin a container.. but i want to scale this out..I have a few ideas.. So I will be initializing the server on gcp</p>
<h3 id="write-an-initialization-script">Write an initialization script</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Source the .env file to load environment variables</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -o allexport
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .env
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -o allexport
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Set other variables</span>
</span></span><span class="line"><span class="cl"><span class="nv">PROJECT_ID</span><span class="o">=</span><span class="s2">&#34;smart-axis-421517&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">INSTANCE_NAME</span><span class="o">=</span><span class="s2">&#34;jnapolitano-db&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">REGION</span><span class="o">=</span><span class="s2">&#34;us-west2&#34;</span> <span class="c1"># e.g., us-central1</span>
</span></span><span class="line"><span class="cl"><span class="nv">DATABASE_NAME</span><span class="o">=</span><span class="s2">&#34;jnapolitano&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">BUILDS_SQL_FILE</span><span class="o">=</span><span class="s2">&#34;builds.sql&#34;</span> <span class="c1"># Name of your builds SQL file</span>
</span></span><span class="line"><span class="cl"><span class="nv">FEED_SQL_FILE</span><span class="o">=</span><span class="s2">&#34;feed.sql&#34;</span>   <span class="c1"># Name of your feeds SQL file</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Authenticate with GCP (make sure you have gcloud SDK installed and authenticated)</span>
</span></span><span class="line"><span class="cl">gcloud auth login
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Set the project</span>
</span></span><span class="line"><span class="cl">gcloud config <span class="nb">set</span> project <span class="nv">$PROJECT_ID</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Enable the Cloud SQL Admin API</span>
</span></span><span class="line"><span class="cl">gcloud services <span class="nb">enable</span> sqladmin.googleapis.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create a Cloud SQL instance</span>
</span></span><span class="line"><span class="cl">gcloud sql instances create <span class="nv">$INSTANCE_NAME</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --database-version<span class="o">=</span>MYSQL_8_0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --cpu<span class="o">=</span><span class="m">2</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --memory<span class="o">=</span>7680MB <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --region<span class="o">=</span><span class="nv">$REGION</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Set the root password using environment variable</span>
</span></span><span class="line"><span class="cl">gcloud sql users set-password root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --host<span class="o">=</span>% <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --instance<span class="o">=</span><span class="nv">$INSTANCE_NAME</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --password<span class="o">=</span><span class="nv">$ROOT_PASSWORD</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create a user called &#39;cobra&#39; using environment variable</span>
</span></span><span class="line"><span class="cl">gcloud sql users create cobra <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --host<span class="o">=</span>% <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --instance<span class="o">=</span><span class="nv">$INSTANCE_NAME</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --password<span class="o">=</span><span class="nv">$COBRA_PASSWORD</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Grant superuser privileges to &#39;cobra&#39;</span>
</span></span><span class="line"><span class="cl">gcloud sql connect <span class="nv">$INSTANCE_NAME</span> --user<span class="o">=</span>root --quiet <span class="s">&lt;&lt; EOF
</span></span></span><span class="line"><span class="cl"><span class="s">ALTER USER &#39;cobra&#39;@&#39;%&#39; WITH GRANT OPTION;
</span></span></span><span class="line"><span class="cl"><span class="s">GRANT ALL PRIVILEGES ON *.* TO &#39;cobra&#39;@&#39;%&#39; WITH GRANT OPTION;
</span></span></span><span class="line"><span class="cl"><span class="s">FLUSH PRIVILEGES;
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Optional: Create a database (uncomment if needed)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># DATABASE_NAME=&#34;your-database-name&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># gcloud sql databases create $DATABASE_NAME --instance=$INSTANCE_NAME</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create a database</span>
</span></span><span class="line"><span class="cl">gcloud sql databases create <span class="nv">$DATABASE_NAME</span> --instance<span class="o">=</span><span class="nv">$INSTANCE_NAME</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Execute the SQL files to create the &#39;builds&#39; and &#39;feeds&#39; tables</span>
</span></span><span class="line"><span class="cl">gcloud sql connect <span class="nv">$INSTANCE_NAME</span> --user<span class="o">=</span>cobra --database<span class="o">=</span><span class="nv">$DATABASE_NAME</span> --quiet &lt; <span class="nv">$BUILDS_SQL_FILE</span>
</span></span><span class="line"><span class="cl">gcloud sql connect <span class="nv">$INSTANCE_NAME</span> --user<span class="o">=</span>cobra --database<span class="o">=</span><span class="nv">$DATABASE_NAME</span> --quiet &lt; <span class="nv">$FEED_SQL_FILE</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;MySQL instance </span><span class="nv">$INSTANCE_NAME</span><span class="s2"> created successfully in project </span><span class="nv">$PROJECT_ID</span><span class="s2"> with superuser &#39;cobra&#39; and executed SQL files &#39;</span><span class="nv">$BUILDS_SQL_FILE</span><span class="s2">&#39; and &#39;</span><span class="nv">$FEEDS_SQL_FILE</span><span class="s2">&#39;.&#34;</span>
</span></span></code></pre></div><h3 id="create-a-env-file-to-save-your-passwords">Create a .env file to save your passwords</h3>
<p>There are a number of ways to keep passwords out of github. In this case I am just going to add the passes to a .env file and source it</p>
<p>the file looks like</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># .env</span>
</span></span><span class="line"><span class="cl"><span class="nv">ROOT_PASSWORD</span><span class="o">=</span><span class="s2">&#34;your-pass&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">COBRA_PASSWORD</span><span class="o">=</span><span class="s2">&#34;your-pass&#34;</span>
</span></span></code></pre></div><h3 id="run">Run</h3>
<h3 id="chmod">Chmod</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod +x your-script
</span></span></code></pre></div><h3 id="write-the-sql-files-used-to-create-the-feed-and-builds-tables">Write the sql files used to create the feed and builds tables</h3>
<p>I added a submodule that contains my scripts <a href="https://github.com/justin-napolitano/mysql-config">gh link</a></p>
<h4 id="builds">Builds</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">builds</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">title</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">link</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">description</span><span class="w"> </span><span class="nb">TEXT</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">generator</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">language</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">copyright</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">lastBuildDate</span><span class="w"> </span><span class="k">TIMESTAMP</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">atom_link_href</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">atom_link_rel</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">50</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">atom_link_type</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><h4 id="feed">Feed</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">feed</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">title</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">link</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">pubDate</span><span class="w"> </span><span class="k">TIMESTAMP</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">guid</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">description</span><span class="w"> </span><span class="nb">TEXT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><h3 id="run-the-script">Run the script</h3>
<p><code>./yourscript</code></p>
<p>The script should work and create your basic files.. I have some more work to do to create an api to update the tables.</p>
]]></content>
			<postid> fc0b85f31e653d91ada4e0921b181ee8</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Automate Posting Hugo Blog to Social Sites (with a db) Part 4</title>
			<link>//localhost:1313/en/posts/flask-api-updater/</link>
			<pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/flask-api-updater/</guid>
			<description><![CDATA[Creating a CMS DB.. Because why not]]></description>
			<content type="html"><![CDATA[<h1 id="gcp-flask-app">GCP Flask App</h1>
<p>I created a db.. now I need update a few tables. Since the db is in gcp. I amgoing to create a quick flask app that will update the tables..</p>
<p>I am using the quick start to get this one going.</p>
<p>Source: <code>https://github.com/justin-napolitano/python-docs-samples/tree/main/cloud-sql/mysql/sqlalchemy</code></p>
<h2 id="create-a-new-local-service-account">Create a New Local Service Account</h2>
<p>Create a new local service account to be able to test the app locally.</p>
<h2 id="create-a-new-role-for-the-cloud-run-service-account">Create a new role for the cloud run service account</h2>
<p>Reference : <a href="https://cloud.google.com/sql/docs/mysql/connect-instance-cloud-run#deploy_sample_app_to">Reference Material</a></p>
<p>Add the cloud run clien to the service account.. Follow directions above.</p>
<h2 id="to-run-locally-we-need-some-environmental-variables">To run locally we need some environmental variables</h2>
<p>There is a secrent manager available from google.. i will update all code to use that in the future.</p>
<p><a href="https://cloud.google.com/secret-manager/docs/overview">secret manager documentation</a></p>
<p>I created a .env with the following</p>
<p>GOOGLE_APPLICATION_CREDENTIALS=&lsquo;secret.json&rsquo;
INSTANCE_CONNECTION_NAME=&lsquo;smart-axis-421517:us-west2:jnapolitano-site&rsquo;
DB_USER=&lsquo;cobra&rsquo;
DB_PASS=&lsquo;your pass&rsquo;
DB_NAME=&lsquo;jnapolitano&rsquo;</p>
<h2 id="install-reqs">Install Reqs</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">virtualenv --python python3 env
</span></span><span class="line"><span class="cl"><span class="nb">source</span> env/bin/activate
</span></span><span class="line"><span class="cl">pip install -r requirements.txt
</span></span></code></pre></div><h3 id="test-the-application">Test the Application</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python app.py
</span></span></code></pre></div><p>Navigate towards http://127.0.0.1:8080 to verify your application is running correctly.</p>
<h2 id="modify-the-app-for-our-needs">Modify the app for our needs</h2>
<p>So the base app is a simple app that creates a table called votes and records the information.. I want to add two routes that will update two seperate tables in my database.</p>
<h3 id="feed-route">Feed Route</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/update/feed&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;POST&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">update_feed</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">json</span>
</span></span><span class="line"><span class="cl">    <span class="n">title</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">link</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;link&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pubDate</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;pubDate&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">guid</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;guid&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">description</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;description&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">stmt</span> <span class="o">=</span> <span class="n">sqlalchemy</span><span class="o">.</span><span class="n">text</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;INSERT INTO feed (title, link, pubDate, guid, description) VALUES (:title, :link, :pubDate, :guid, :description)&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">db</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;title&#34;</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;link&#34;</span><span class="p">:</span> <span class="n">link</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;pubDate&#34;</span><span class="p">:</span> <span class="n">pubDate</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;guid&#34;</span><span class="p">:</span> <span class="n">guid</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="n">description</span>
</span></span><span class="line"><span class="cl">            <span class="p">})</span>
</span></span><span class="line"><span class="cl">            <span class="n">conn</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logger</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s1">&#39;message&#39;</span><span class="p">:</span> <span class="s1">&#39;Error updating feed table&#39;</span><span class="p">}),</span> <span class="mi">500</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s1">&#39;message&#39;</span><span class="p">:</span> <span class="s1">&#39;Feed record added successfully&#39;</span><span class="p">}),</span> <span class="mi">201</span>
</span></span></code></pre></div><h3 id="update-build-route">Update Build Route</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/update/builds&#39;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;POST&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">update_builds</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">json</span>
</span></span><span class="line"><span class="cl">    <span class="n">title</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">link</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;link&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">description</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;description&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">generator</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;generator&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">language</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;language&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">copyright</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;copyright&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">last_build_date</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;lastBuildDate&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">atom_link_href</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;atom_link_href&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">atom_link_rel</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;atom_link_rel&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">atom_link_type</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;atom_link_type&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">stmt</span> <span class="o">=</span> <span class="n">sqlalchemy</span><span class="o">.</span><span class="n">text</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;INSERT INTO builds (title, link, description, generator, language, copyright, lastBuildDate, atom_link_href, atom_link_rel, atom_link_type) &#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;VALUES (:title, :link, :description, :generator, :language, :copyright, :lastBuildDate, :atom_link_href, :atom_link_rel, :atom_link_type)&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">db</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;title&#34;</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;link&#34;</span><span class="p">:</span> <span class="n">link</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;description&#34;</span><span class="p">:</span> <span class="n">description</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;generator&#34;</span><span class="p">:</span> <span class="n">generator</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;language&#34;</span><span class="p">:</span> <span class="n">language</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;copyright&#34;</span><span class="p">:</span> <span class="n">copyright</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;lastBuildDate&#34;</span><span class="p">:</span> <span class="n">last_build_date</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;atom_link_href&#34;</span><span class="p">:</span> <span class="n">atom_link_href</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;atom_link_rel&#34;</span><span class="p">:</span> <span class="n">atom_link_rel</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;atom_link_type&#34;</span><span class="p">:</span> <span class="n">atom_link_type</span>
</span></span><span class="line"><span class="cl">            <span class="p">})</span>
</span></span><span class="line"><span class="cl">            <span class="n">conn</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logger</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s1">&#39;message&#39;</span><span class="p">:</span> <span class="s1">&#39;Error updating builds table&#39;</span><span class="p">}),</span> <span class="mi">500</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s1">&#39;message&#39;</span><span class="p">:</span> <span class="s1">&#39;Build record added successfully&#39;</span><span class="p">}),</span> <span class="mi">201</span>
</span></span></code></pre></div><h2 id="test-it-out">Test it out</h2>
<h3 id="update-feed">Update-feed</h3>
<p>create a bash called test-update-feed.sh&hellip; chmod +x it and then run.. You should get a response that says updated successfully.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/bash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">curl -X POST <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  http://127.0.0.1:8080/update/feed <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -H <span class="s1">&#39;Content-Type: application/json&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -d <span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;title&#34;: &#34;Create and Deploy Cloud Run Job Script&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;link&#34;: &#34;http://jnapolitano.com/posts/create_deploy_cloud_run_job/&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;pubDate&#34;: &#34;2024-07-11T16:26:32&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;guid&#34;: &#34;http://jnapolitano.com/posts/create_deploy_cloud_run_job/&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;description&#34;: &#34;Cloud Run Job Deployment Script This repository contains a script to build and deploy a Python application as a Cloud Run Job using Google Cloud Build. The script dynamically generates a cloudbuild.yaml file and submits it to Google Cloud Build. Prerequisites Before using the deployment script, ensure you have the following: Google Cloud SDK: Installed and configured. Docker: Installed. Google Cloud Project: Created and configured. Service Account Key: A service account key JSON file with appropriate permissions stored at keys/service-account-key.&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span>
</span></span></code></pre></div><h3 id="update-build">Update build</h3>
<p>Same as above but with this code</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/bash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">curl -X POST <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  http://127.0.0.1:8080/update/builds <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -H <span class="s1">&#39;Content-Type: application/json&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -d <span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;title&#34;: &#34;New Build Example&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;link&#34;: &#34;http://example.com/build&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;description&#34;: &#34;This is a description of the build process.&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;generator&#34;: &#34;Build Generator 1.0&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;language&#34;: &#34;Python&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;copyright&#34;: &#34;2024 Example Corp&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;lastBuildDate&#34;: &#34;2024-07-11T16:26:32&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;atom_link_href&#34;: &#34;http://example.com/index.xml&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;atom_link_rel&#34;: &#34;self&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;atom_link_type&#34;: &#34;application/rss+xml&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span>
</span></span></code></pre></div><h2 id="testing-the-container-locally">Testing the Container Locally</h2>
<p>Once the app is confirmed to work we should test that the container builds as expected.</p>
<h3 id="prerequisites">Prerequisites</h3>
<ul>
<li>Docker installed on your local machine</li>
<li>Flask application with a Dockerfile</li>
<li><code>.env</code> file with environment variables</li>
<li><code>secret.json</code> file for Google Application Credentials</li>
</ul>
<h3 id="step-1-prepare-the-env-file">Step 1: Prepare the <code>.env</code> File</h3>
<p>Create a <code>.env</code> file in your project directory with the following content:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-env" data-lang="env"><span class="line"><span class="cl"><span class="nv">GOOGLE_APPLICATION_CREDENTIALS</span><span class="o">=</span>secret-path
</span></span><span class="line"><span class="cl"><span class="nv">INSTANCE_CONNECTION_NAME</span><span class="o">=</span>your-instance
</span></span><span class="line"><span class="cl"><span class="nv">DB_USER</span><span class="o">=</span><span class="nv">your</span><span class="o">=</span>user
</span></span><span class="line"><span class="cl"><span class="nv">DB_PASS</span><span class="o">=</span>yuour-pass
</span></span><span class="line"><span class="cl"><span class="nv">DB_NAME</span><span class="o">={</span>your-db<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="nv">PORT</span><span class="o">=</span><span class="m">8080</span>
</span></span></code></pre></div><h3 id="step-2-ensure-secretjson-is-included-in-the-docker-image">Step 2: Ensure <code>secret.json</code> is Included in the Docker Image</h3>
<p>Your Dockerfile should include a line to copy the <code>secret.json</code> file into the <code>/app</code> directory in the Docker image. Here is an example Dockerfile:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="line"><span class="cl"><span class="c"># Use an official Python runtime as a parent image</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> python:3.9-slim</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Set the working directory</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /app</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Copy the current directory contents into the container at /app</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> . /app<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Ensure the secret.json file is copied into the container</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> secret.json /app/secret.json<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Install any needed packages specified in requirements.txt</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> pip install --no-cache-dir -r requirements.txt<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Make port 8080 available to the world outside this container</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">EXPOSE</span><span class="s"> 8080</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Run gunicorn when the container launches</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="nb">exec</span> gunicorn --bind :<span class="nv">$PORT</span> --workers <span class="m">1</span> --threads <span class="m">8</span> app:app<span class="err">
</span></span></span></code></pre></div><h2 id="step-3-build-the-docker-image">Step 3: Build the Docker Image</h2>
<p>If you have made changes to the Dockerfile or added the <code>secret.json</code> file, build the Docker image:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker build -t flask-app .
</span></span></code></pre></div><h3 id="step-4-run-the-docker-container-with-the-env-file">Step 4: Run the Docker Container with the <code>.env</code> File</h3>
<p>Use the <code>--env-file</code> option to pass the environment variables from your <code>.env</code> file to the Docker container:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --env-file .env -p 8080:8080 flask-app
</span></span></code></pre></div><h3 id="step-5-verify-environment-variables-inside-the-container">Step 5: Verify Environment Variables Inside the Container</h3>
<p>To verify that the environment variables are set correctly, start the container in interactive mode:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -it --env-file .env flask-app /bin/sh
</span></span></code></pre></div><p>Once inside the container, check the environment variables:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$GOOGLE_APPLICATION_CREDENTIALS</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$INSTANCE_CONNECTION_NAME</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$DB_USER</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$DB_PASS</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$DB_NAME</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$PORT</span>
</span></span></code></pre></div><h3 id="step-6-test-the-endpoints-locally">Step 6: Test the Endpoints Locally</h3>
<p>Create test scripts to test the endpoints.</p>
<h4 id="create-test_update_builds_localsh">Create <code>test_update_builds_local.sh</code></h4>
<p>Create a file named <code>test_update_builds_local.sh</code> with the following content:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">curl -X POST <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  http://127.0.0.1:8080/update/builds <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -H <span class="s1">&#39;Content-Type: application/json&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -d <span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;title&#34;: &#34;New Build Example&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;link&#34;: &#34;http://example.com/build&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;description&#34;: &#34;This is a description of the build process.&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;generator&#34;: &#34;Build Generator 1.0&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;language&#34;: &#34;Python&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;copyright&#34;: &#34;2024 Example Corp&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;lastBuildDate&#34;: &#34;2024-07-11T16:26:32&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;atom_link_href&#34;: &#34;http://example.com/index.xml&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;atom_link_rel&#34;: &#34;self&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;atom_link_type&#34;: &#34;application/rss+xml&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span>
</span></span></code></pre></div><h4 id="create-test_update_feeds_localsh">Create <code>test_update_feeds_local.sh</code></h4>
<p>Create a file named <code>test_update_feeds_local.sh</code> with the following content:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">curl -X POST <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  http://127.0.0.1:8080/update/feeds <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -H <span class="s1">&#39;Content-Type: application/json&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -d <span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;title&#34;: &#34;Create and Deploy Cloud Run Job Script&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;link&#34;: &#34;http://jnapolitano.com/posts/create_deploy_cloud_run_job/&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;pubDate&#34;: &#34;2024-07-11T16:26:32&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;guid&#34;: &#34;http://jnapolitano.com/posts/create_deploy_cloud_run_job/&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#34;description&#34;: &#34;Cloud Run Job Deployment Script This repository contains a script to build and deploy a Python application as a Cloud Run Job using Google Cloud Build. The script dynamically generates a cloudbuild.yaml file and submits it to Google Cloud Build. Prerequisites Before using the deployment script, ensure you have the following: Google Cloud SDK: Installed and configured. Docker: Installed. Google Cloud Project: Created and configured. Service Account Key: A service account key JSON file with appropriate permissions stored at keys/service-account-key.&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span>
</span></span></code></pre></div><h4 id="make-the-scripts-executable">Make the Scripts Executable</h4>
<p>Make the scripts executable:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chmod +x test_update_builds_local.sh
</span></span><span class="line"><span class="cl">chmod +x test_update_feeds_local.sh
</span></span></code></pre></div><h4 id="run-the-scripts-to-test-the-endpoints-locally">Run the Scripts to Test the Endpoints Locally</h4>
<p>Run the scripts:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./test_update_builds_local.sh
</span></span><span class="line"><span class="cl">./test_update_feeds_local.sh
</span></span></code></pre></div><h3 id="expected-response">Expected Response</h3>
<p>You should receive a JSON response indicating the success or failure of the request. If successful, it will look like this:</p>
<h4 id="expected-response-for-test_update_builds_localsh">Expected Response for <code>test_update_builds_local.sh</code></h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;Build record added successfully&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="expected-response-for-test_update_feeds_localsh">Expected Response for <code>test_update_feeds_local.sh</code></h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;Feed record added successfully&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="troubleshooting">Troubleshooting</h3>
<p>If you encounter any issues:</p>
<ul>
<li>
<p><strong>Check Docker Logs</strong>: To view logs from the running container, use:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker logs &lt;container_id&gt;
</span></span></code></pre></div></li>
<li>
<p><strong>Database Connectivity</strong>: Ensure that your local environment can connect to the database. If you&rsquo;re using a local database, make sure the credentials and host are correct.</p>
</li>
</ul>
<h2 id="building-and-deploying-the-container-to-gcp">Building and Deploying the container to gcp</h2>
<h3 id="step-1-create-and-configure-environment-variables">Step 1: Create and Configure Environment Variables</h3>
<ol>
<li><strong>Create a <code>.env</code> File</strong></li>
</ol>
<p>Create a <code>.env</code> file in your project directory with the following content:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-env" data-lang="env"><span class="line"><span class="cl"><span class="nv">PROJECT_NAME</span><span class="o">=</span>your-project-name
</span></span><span class="line"><span class="cl"><span class="nv">PROJECT_NUMBER</span><span class="o">=</span><span class="m">67904901121</span>
</span></span><span class="line"><span class="cl"><span class="nv">REGION</span><span class="o">=</span>us-west2
</span></span><span class="line"><span class="cl"><span class="nv">SERVICE_ACCOUNT</span><span class="o">=</span>your-service-account
</span></span><span class="line"><span class="cl"><span class="nv">INSTANCE_CONNECTION_NAME</span><span class="o">=</span>your-instance-connection-name
</span></span><span class="line"><span class="cl"><span class="nv">DB_USER</span><span class="o">=</span>your-db-user
</span></span><span class="line"><span class="cl"><span class="nv">DB_PASS</span><span class="o">=</span>your-db-password
</span></span><span class="line"><span class="cl"><span class="nv">DB_NAME</span><span class="o">=</span>your-db-name
</span></span></code></pre></div><p>Replace the placeholder values (your-project-name, your-service-account, your-instance-connection-name, your-db-user, your-db-password, and your-db-name) with your actual values.</p>
<h3 id="step-2-manage-secrets">Step 2: Manage Secrets</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Set your variables in a local .env and source</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .env
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Enable the Secret Manager API</span>
</span></span><span class="line"><span class="cl">gcloud services <span class="nb">enable</span> secretmanager.googleapis.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create secrets in Secret Manager</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="nv">$INSTANCE_CONNECTION_NAME</span> <span class="p">|</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    gcloud secrets create INSTANCE_CONNECTION_NAME --data-file<span class="o">=</span>-
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="nv">$DB_USER</span> <span class="p">|</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    gcloud secrets create DB_USER --data-file<span class="o">=</span>-
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="nv">$DB_PASS</span> <span class="p">|</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    gcloud secrets create DB_PASS --data-file<span class="o">=</span>-
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="nv">$DB_NAME</span> <span class="p">|</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    gcloud secrets create DB_NAME --data-file<span class="o">=</span>-
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Grant access to the Cloud Run service account</span>
</span></span><span class="line"><span class="cl">gcloud secrets add-iam-policy-binding INSTANCE_CONNECTION_NAME <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --member<span class="o">=</span>serviceAccount:<span class="nv">$SERVICE_ACCOUNT</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --role<span class="o">=</span>roles/secretmanager.secretAccessor
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">gcloud secrets add-iam-policy-binding DB_USER <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --member<span class="o">=</span>serviceAccount:<span class="nv">$SERVICE_ACCOUNT</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --role<span class="o">=</span>roles/secretmanager.secretAccessor
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">gcloud secrets add-iam-policy-binding DB_PASS <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --member<span class="o">=</span>serviceAccount:<span class="nv">$SERVICE_ACCOUNT</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --role<span class="o">=</span>roles/secretmanager.secretAccessor
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">gcloud secrets add-iam-policy-binding DB_NAME <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --member<span class="o">=</span>serviceAccount:<span class="nv">$SERVICE_ACCOUNT</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --role<span class="o">=</span>roles/secretmanager.secretAccessor
</span></span></code></pre></div><h3 id="create-the-artifact-repository">Create the Artifact Repository</h3>
<p>Create</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Set your variables in a local .env and source</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .env
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create the Artifact Registry repository</span>
</span></span><span class="line"><span class="cl">gcloud artifacts repositories create rss-updated <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --repository-format<span class="o">=</span>docker <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --location<span class="o">=</span><span class="nv">$REGION</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --description<span class="o">=</span><span class="s2">&#34;Docker repository for RSS Updater&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Verify the repository creation</span>
</span></span><span class="line"><span class="cl">gcloud artifacts repositories list --location<span class="o">=</span><span class="nv">$REGION</span>
</span></span></code></pre></div><p>Make sure to chmod +x the script</p>
<h3 id="build-the-docker-image-with-cloud-build">Build the Docker Image with Cloud Build</h3>
<h4 id="create-cloudbuildyaml">Create cloudbuild.yaml</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;gcr.io/cloud-builders/docker&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;build&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;-t&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;us-west2-docker.pkg.dev/${_PROJECT_NAME}/rss-updated/rss-updated-image:latest&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s1">&#39;.&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">images</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="s1">&#39;us-west2-docker.pkg.dev/${_PROJECT_NAME}/rss-updated/rss-updated-image:latest&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">_PROJECT_NAME</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;your-project-name&#34;</span><span class="w">
</span></span></span></code></pre></div><h4 id="trigger-the-build">Trigger the Build</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/bash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Set your variables in a local .env and source</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .env
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Trigger the Cloud Build with custom substitution</span>
</span></span><span class="line"><span class="cl">gcloud builds submit --config<span class="o">=</span>cloudbuild.yaml --substitutions<span class="o">=</span><span class="nv">_PROJECT_NAME</span><span class="o">=</span><span class="nv">$PROJECT_NAME</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chmod +x trigger_cloud_build.sh
</span></span><span class="line"><span class="cl">./trigger_cloud_build.sh
</span></span></code></pre></div><h4 id="deploy-to-cloud-run">Deploy to Cloud Run</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/bash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Set your variables in a local .env and source</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .env
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Deploy to Cloud Run</span>
</span></span><span class="line"><span class="cl">gcloud run deploy rss-updated <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --image us-west2-docker.pkg.dev/<span class="nv">$PROJECT_NAME</span>/rss-updated/rss-updated-image:latest <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --platform managed <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --region <span class="nv">$REGION</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --allow-unauthenticated <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --update-secrets <span class="nv">INSTANCE_CONNECTION_NAME</span><span class="o">=</span>INSTANCE_CONNECTION_NAME:latest <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --update-secrets <span class="nv">DB_USER</span><span class="o">=</span>DB_USER:latest <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --update-secrets <span class="nv">DB_PASS</span><span class="o">=</span>DB_PASS:latest <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --update-secrets <span class="nv">DB_NAME</span><span class="o">=</span>DB_NAME:latest
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod +x deploy_to_cloud_run.sh
</span></span><span class="line"><span class="cl">./deploy_to_cloud_run.sh
</span></span></code></pre></div>]]></content>
			<postid> 9f0e9fdb4b48abcd71822913f3fedc0a</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>GCP Cloud Run: LOC Flattener</title>
			<link>//localhost:1313/en/posts/loc_normalizer/</link>
			<pubDate>Thu, 11 Jul 2024 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/loc_normalizer/</guid>
			<description><![CDATA[Flattening and injesting JSON into data lake.. Autonomously. ]]></description>
			<content type="html"><![CDATA[<h1 id="library-of-congress-normalizer-job">Library of Congress Normalizer Job</h1>
<p>This <a href="https://github.com/justin-napolitano/loc_normalizer">repo</a> normalizes the existing library of congress schema into a db that wil then be used to construct a knowledge graph of supreme court law.</p>
<h2 id="plan">Plan</h2>
<ol>
<li>Setup a venv to run locally</li>
<li>Install requirements</li>
<li>Write out the script to interface with gcp</li>
<li>Set up a docker container and test locally</li>
<li>build the image</li>
<li>upload to gcp</li>
<li>create the job</li>
</ol>
<h2 id="setup-the-venv">Setup the venv</h2>
<h3 id="install">Install</h3>
<p>I installed virtualenv locally on ubuntu</p>
<h3 id="create">Create</h3>
<p>I then run <code>virtualenv {path to venvs}</code></p>
<h3 id="activate">Activate</h3>
<p>Then source the venv bin to activate</p>
<p><code>source {path to venv}/bin/activate</code></p>
<h3 id="install-requirements">Install requirements</h3>
<p><code> pip install -r requirements.txt</code></p>
<h2 id="write-out-the-script">Write out the Script</h2>
<h3 id="steps">Steps</h3>
<ol>
<li>Access the loc_scraper Bucket</li>
<li>Grab a json blob</li>
<li>Process the blob</li>
<li>Move the blob to a processed bucket</li>
</ol>
<h3 id="data-organization">Data Organization</h3>
<p>I want to create workflow class with the following methods</p>
<ol>
<li>get_creds</li>
<li>grab_blob</li>
<li>process_blob</li>
<li>move_blob</li>
</ol>
<p>The process_blob method will be a lot of work.  I might just flatten the json and dump into a table. I will then write a normalization workflow</p>
<h3 id="get-creds">Get Creds</h3>
<p>If running locally I will need some creds in the enviornment. I will take create a key from the console and download it for local run .</p>
<h2 id="setup-the-docker-container">Setup the Docker Container</h2>
<h3 id="the-dockerfile">The Dockerfile</h3>
<p>Also available on <a href="https://github.com/justin-napolitano/loc_normalizer/blob/main/Dockerfile">github</a></p>
<pre tabindex="0"><code># # Use the Alpine Linux base image
# FROM alpine:latest

# # Set the working directory inside the container
# WORKDIR /app

# # Copy a simple script that prints &#34;Hello, World!&#34; into the container
# COPY /src/hello.sh .

# # Make the script executable
# RUN chmod +x hello.sh

# # Define the command to run when the container starts
# CMD [&#34;./hello.sh&#34;]


# Use the official Python image from Docker Hub
FROM python:3.10-slim

# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY ./src /app
COPY requirements.txt /app

# Install any needed dependencies specified in requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Run the Python script when the container launches
CMD [&#34;python&#34;, &#34;loc_scraper.py&#34;]
</code></pre><h2 id="quickstart">Quickstart</h2>
<h3 id="gcloud-cli">Gcloud cli</h3>
<p>After this you will have to install gcloud cli and configure you&rsquo;re local environment. I will write up some scripts in a subsequent post to automate this process&hellip; but for the time being check out this <a href="https://cloud.google.com/sdk/docs/install">&ldquo;link&rdquo;</a></p>
<h3 id="create-the-image">Create the image</h3>
<p>In the repo there is a a bash script called <code>build.sh</code> that will need to be updated to according to your gcp project.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gcloud builds submit --region<span class="o">=</span>us-west2 --config cloudbuild.yaml
</span></span></code></pre></div><p>It calls <code>cloudbuild.yaml</code> which might need to be updated for you, but the following the should work.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;gcr.io/cloud-builders/docker&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">script</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    docker build -t us-west2-docker.pkg.dev/$PROJECT_ID/supreme-court-scraper/supreme-court-scraper-image:dev .</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">automapSubstitutions</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">images</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="s1">&#39;us-west2-docker.pkg.dev/$PROJECT_ID/supreme-court-scraper/supreme-court-scraper-image:dev&#39;</span><span class="w">
</span></span></span></code></pre></div><h3 id="following-creation-of-the-imge">Following creation of the imge</h3>
<p>Next you can create a job on gcp by runnning the <code>job_create.sh</code> script&hellip; or by copying the code below and chaging yourproject to the correct project-name</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gcloud run <span class="nb">jobs</span> create supreme-court-scraper --image us-west2-docker.pkg.dev/yourproject/supreme-court-scraper/supreme-court-scraper-image:dev <span class="se">\
</span></span></span></code></pre></div><h3 id="executing-the-job">Executing the job</h3>
<p>Once complete you can execute the job by running the <code>execute_job.sh</code> script or by running</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gcloud run <span class="nb">jobs</span> execute supreme-court-scraper
</span></span></code></pre></div><h3 id="putting-it-all-together">Putting it all together</h3>
<p>In a perfect world the following should work. Note that src/.env should be set with your environmental variables such as <code>$GCPPROJECTID</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> src/.env <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="o">&amp;&amp;</span> ./build.sh <span class="se">\ </span>
</span></span><span class="line"><span class="cl"><span class="o">&amp;&amp;</span> ./job_create.sh <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="o">&amp;&amp;</span> ./execute_job.sh
</span></span></code></pre></div><h2 id="running-locally">Running locally</h2>
<p>The python script in the <code>/src</code> can be run locally, however it should be modified if you choose not to use gcp.  There are a number of functions within that can easily be modified to permit writing to the local directory.</p>
<h2 id="documentation-sources">Documentation Sources</h2>
<ol>
<li><a href="https://cloud.google.com/run/docs/create-jobs">&ldquo;Google Cloud Run Jobs Automation&rdquo;</a></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">r</span> <span class="o">../</span><span class="n">requirements</span><span class="o">.</span><span class="n">txt</span>
</span></span></code></pre></div><pre><code>Requirement already satisfied: beautifulsoup4==4.12.3 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 1)) (4.12.3)
Requirement already satisfied: bs4==0.0.2 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 2)) (0.0.2)
Requirement already satisfied: cachetools==5.3.3 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 3)) (5.3.3)
Requirement already satisfied: certifi==2024.2.2 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 4)) (2024.2.2)
Requirement already satisfied: charset-normalizer==3.3.2 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 5)) (3.3.2)
Requirement already satisfied: flatten-json==0.1.14 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 6)) (0.1.14)
Requirement already satisfied: google-api-core==2.18.0 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 7)) (2.18.0)
Requirement already satisfied: google-auth==2.29.0 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 8)) (2.29.0)
Requirement already satisfied: google-cloud-appengine-logging==1.4.3 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 9)) (1.4.3)
Requirement already satisfied: google-cloud-audit-log==0.2.5 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 10)) (0.2.5)
Requirement already satisfied: google-cloud-core==2.4.1 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 11)) (2.4.1)
Requirement already satisfied: google-cloud-logging==3.10.0 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 12)) (3.10.0)
Requirement already satisfied: google-cloud-storage==2.16.0 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 13)) (2.16.0)
Requirement already satisfied: google-crc32c==1.5.0 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 14)) (1.5.0)
Requirement already satisfied: google-resumable-media==2.7.0 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 15)) (2.7.0)
Requirement already satisfied: googleapis-common-protos==1.63.0 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 16)) (1.63.0)
Requirement already satisfied: grpc-google-iam-v1==0.13.0 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 17)) (0.13.0)
Requirement already satisfied: grpcio==1.62.2 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 18)) (1.62.2)
Requirement already satisfied: grpcio-status==1.62.2 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 19)) (1.62.2)
Requirement already satisfied: idna==3.7 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 20)) (3.7)
Requirement already satisfied: proto-plus==1.23.0 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 21)) (1.23.0)
Requirement already satisfied: protobuf==4.25.3 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 22)) (4.25.3)
Requirement already satisfied: pyasn1==0.6.0 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 23)) (0.6.0)
Requirement already satisfied: pyasn1_modules==0.4.0 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 24)) (0.4.0)
Requirement already satisfied: requests==2.31.0 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 25)) (2.31.0)
Requirement already satisfied: rsa==4.9 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 26)) (4.9)
Requirement already satisfied: six==1.16.0 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 27)) (1.16.0)
Requirement already satisfied: soupsieve==2.5 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 28)) (2.5)
Requirement already satisfied: urllib3==2.2.1 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 29)) (2.2.1)
Requirement already satisfied: google-cloud-bigquery==3.25.0 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 40)) (3.25.0)
Collecting numpy==2.0.0 (from -r ../requirements.txt (line 51))
  Downloading numpy-2.0.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)
[2K     [38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m60.9/60.9 kB[0m [31m1.1 MB/s[0m eta [36m0:00:00[0m[31m1.1 MB/s[0m eta [36m0:00:01[0m
[?25hCollecting packaging==24.1 (from -r ../requirements.txt (line 52))
  Downloading packaging-24.1-py3-none-any.whl.metadata (3.2 kB)
Requirement already satisfied: pandas==2.2.2 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 53)) (2.2.2)
Requirement already satisfied: pyarrow==16.1.0 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 56)) (16.1.0)
Collecting python-dateutil==2.9.0.post0 (from -r ../requirements.txt (line 59))
  Downloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl.metadata (8.4 kB)
Requirement already satisfied: pytz==2024.1 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 60)) (2024.1)
Requirement already satisfied: tzdata==2024.1 in /home/cobra/.config/jupyterlab-desktop/jlab_server/lib/python3.12/site-packages (from -r ../requirements.txt (line 65)) (2024.1)
Downloading numpy-2.0.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (19.0 MB)
[2K   [38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m19.0/19.0 MB[0m [31m2.2 MB/s[0m eta [36m0:00:00[0mm eta [36m0:00:01[0m[36m0:00:01[0m
[?25hDownloading packaging-24.1-py3-none-any.whl (53 kB)
[2K   [38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m54.0/54.0 kB[0m [31m1.7 MB/s[0m eta [36m0:00:00[0m
[?25hDownloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl (229 kB)
[2K   [38;2;114;156;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━[0m [32m229.9/229.9 kB[0m [31m2.3 MB/s[0m eta [36m0:00:00[0m MB/s[0m eta [36m0:00:01[0m
[?25hInstalling collected packages: python-dateutil, packaging, numpy
  Attempting uninstall: python-dateutil
    Found existing installation: python-dateutil 2.9.0
    Uninstalling python-dateutil-2.9.0:
      Successfully uninstalled python-dateutil-2.9.0
  Attempting uninstall: packaging
    Found existing installation: packaging 24.0
    Uninstalling packaging-24.0:
      Successfully uninstalled packaging-24.0
  Attempting uninstall: numpy
    Found existing installation: numpy 1.26.4
    Uninstalling numpy-1.26.4:
      Successfully uninstalled numpy-1.26.4
Successfully installed numpy-2.0.0 packaging-24.1 python-dateutil-2.9.0.post0
Note: you may need to restart the kernel to use updated packages.
</code></pre>
<h2 id="write-out-the-script-1">Write out the Script</h2>
<h3 id="steps-1">Steps</h3>
<ol>
<li>Initialize the Google Logging Service</li>
<li>Initialize The Google Cloud Storage Service</li>
<li>Initialize the Bigquery Client</li>
<li>Grab a json blob</li>
<li>Process the blob</li>
<li>Move the blob to a processed bucket</li>
</ol>
<h4 id="initialize-the-google-cloud-storage-service">Initialize The Google Cloud Storage Service</h4>
<p>I created a Gloud Service Client Class available at : <a href="https://github.com/justin-napolitano/gcputils/blob/bc421debf4c828522580ec79ab634b2e2bf402a4/GoogleCloudLogging.py">https://github.com/justin-napolitano/gcputils/blob/bc421debf4c828522580ec79ab634b2e2bf402a4/GoogleCloudLogging.py</a></p>
<p>It is imported below and tested below.  Note that cli specific arguments are commented out for testing in ipynb.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># loc_flattener.py</span>
</span></span><span class="line"><span class="cl"><span class="c1"># library_of_congress_scraper.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">print_function</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gcputils.gcpclient</span> <span class="kn">import</span> <span class="n">GCSClient</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gcputils.GoogleCloudLogging</span> <span class="kn">import</span> <span class="n">GoogleCloudLogging</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gcputils.BigQueryClient</span> <span class="kn">import</span> <span class="n">BigQueryClient</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">html</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flatten_json</span> <span class="kn">import</span> <span class="n">flatten</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">google.cloud.logging</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">argparse</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">google.cloud</span> <span class="kn">import</span> <span class="n">bigquery</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GoogleCloudLogging</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser = argparse.ArgumentParser(description=&#39;Run the script locally or in the cloud.&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser.add_argument(&#39;--local&#39;, action=&#39;store_true&#39;, help=&#39;Run the script locally with credentials path&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># args = parser.parse_args()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">project_id</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_PROJECT_ID&#39;</span><span class="p">,</span> <span class="s1">&#39;smart-axis-421517&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bucket_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;BUCKET_NAME&#39;</span><span class="p">,</span> <span class="s1">&#39;loc-scraper&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># if args.local:</span>
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_CREDENTIALS_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;secret.json&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Initialize logging</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span> <span class="o">=</span> <span class="n">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span><span class="o">.</span><span class="n">setup_logging</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><h4 id="initialize-the-google-cloud-storage-client">Initialize the Google Cloud Storage Client</h4>
<p>The Google Cloud Storage Client is available at <a href="https://github.com/justin-napolitano/gcputils/blob/bc421debf4c828522580ec79ab634b2e2bf402a4/gcpclient.py">https://github.com/justin-napolitano/gcputils/blob/bc421debf4c828522580ec79ab634b2e2bf402a4/gcpclient.py</a></p>
<p>Calling the client and listing the buckets to test below</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GoogleCloudLogging</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GCSClient</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">list_gcs_buckets</span><span class="p">(</span><span class="n">client</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">buckets</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">list_buckets</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Buckets:&#34;</span><span class="p">,</span> <span class="n">buckets</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Buckets: </span><span class="si">{</span><span class="n">buckets</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error listing buckets: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser = argparse.ArgumentParser(description=&#39;Run the script locally or in the cloud.&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser.add_argument(&#39;--local&#39;, action=&#39;store_true&#39;, help=&#39;Run the script locally with credentials path&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># args = parser.parse_args()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">project_id</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_PROJECT_ID&#39;</span><span class="p">,</span> <span class="s1">&#39;smart-axis-421517&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bucket_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;BUCKET_NAME&#39;</span><span class="p">,</span> <span class="s1">&#39;loc-scraper&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># if args.local:</span>
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_CREDENTIALS_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;secret.json&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Initialize logging</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span> <span class="o">=</span> <span class="n">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span><span class="o">.</span><span class="n">setup_logging</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">gcs_client</span> <span class="o">=</span> <span class="n">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">list_gcs_buckets</span><span class="p">(</span><span class="n">gcs_client</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>trying creds file
Buckets: ['loc-scraper', 'loc_flattener_processed', 'processed_results', 'smart-axis-421517_cloudbuild']
</code></pre>
<h4 id="access-the-blobs-within-the-bucket">Access the Blobs within the bucket</h4>
<p>Now I need to grab a blob from the bucket. IN this case I just want to grab one from the top of the heap without pulling a lot of data into context.</p>
<h5 id="addition-to-the-storage-class">Addition to the storage class</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Python" data-lang="Python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">list_blobs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Lists all blobs in the specified bucket in Google Cloud Storage.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">            bucket_name (str): Name of the bucket.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">            list: A list of blob names.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Get the bucket</span>
</span></span><span class="line"><span class="cl">        <span class="n">bucket</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">bucket</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># List all blobs in the bucket</span>
</span></span><span class="line"><span class="cl">        <span class="n">blobs</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">bucket</span><span class="o">.</span><span class="n">list_blobs</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">blob_names</span> <span class="o">=</span> <span class="p">[</span><span class="n">blob</span><span class="o">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">blob</span> <span class="ow">in</span> <span class="n">blobs</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">blob_names</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">pop_blob</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Selects and removes the first blob from the specified bucket in Google Cloud Storage.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">            bucket_name (str): Name of the bucket.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">            google.cloud.storage.blob.Blob: The first blob from the bucket.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Get the bucket</span>
</span></span><span class="line"><span class="cl">        <span class="n">bucket</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">bucket</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># List all blobs in the bucket</span>
</span></span><span class="line"><span class="cl">        <span class="n">blobs</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">bucket</span><span class="o">.</span><span class="n">list_blobs</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">blobs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;No blobs found in bucket &#39;</span><span class="si">{</span><span class="n">bucket_name</span><span class="si">}</span><span class="s2">&#39;.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Get the first blob</span>
</span></span><span class="line"><span class="cl">        <span class="n">first_blob</span> <span class="o">=</span> <span class="n">blobs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;First blob selected: </span><span class="si">{</span><span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">first_blob</span>
</span></span></code></pre></div><h5 id="test-run">Test Run</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GoogleCloudLogging</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GCSClient</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">list_gcs_buckets</span><span class="p">(</span><span class="n">client</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">buckets</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">list_buckets</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Buckets:&#34;</span><span class="p">,</span> <span class="n">buckets</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Buckets: </span><span class="si">{</span><span class="n">buckets</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error listing buckets: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser = argparse.ArgumentParser(description=&#39;Run the script locally or in the cloud.&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser.add_argument(&#39;--local&#39;, action=&#39;store_true&#39;, help=&#39;Run the script locally with credentials path&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># args = parser.parse_args()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">project_id</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_PROJECT_ID&#39;</span><span class="p">,</span> <span class="s1">&#39;smart-axis-421517&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bucket_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;BUCKET_NAME&#39;</span><span class="p">,</span> <span class="s1">&#39;loc-scraper&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># if args.local:</span>
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_CREDENTIALS_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;secret.json&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Initialize logging</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span> <span class="o">=</span> <span class="n">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span><span class="o">.</span><span class="n">setup_logging</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># List Buckets for testing</span>
</span></span><span class="line"><span class="cl">    <span class="n">gcs_client</span> <span class="o">=</span> <span class="n">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">list_gcs_buckets</span><span class="p">(</span><span class="n">gcs_client</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Grab A blob from the heap</span>
</span></span><span class="line"><span class="cl">    <span class="n">first_blob</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">pop_blob</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">first_blob</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;First blob name: </span><span class="si">{</span><span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>trying creds file
Buckets: ['loc-scraper', 'loc_flattener_processed', 'processed_results', 'smart-axis-421517_cloudbuild']
First valid blob selected: last_page.txt
First blob name: last_page.txt
</code></pre>
<h4 id="some-additions-to-avoid-last_pagetxt">Some additions to avoid last_page.txt</h4>
<p>So there is a last page.txt that is used by the scraper program. I want to pass some regex patterns to exclude in the pop_blob method</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">pop_blob</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">,</span> <span class="n">patterns_file</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Selects and removes the first blob from the specified bucket in Google Cloud Storage,
</span></span></span><span class="line"><span class="cl"><span class="s2">        excluding any blobs that match patterns from the provided file.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">            bucket_name (str): Name of the bucket.
</span></span></span><span class="line"><span class="cl"><span class="s2">            patterns_file (str, optional): Path to the file containing regex patterns to exclude.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">            google.cloud.storage.blob.Blob: The first blob from the bucket that doesn&#39;t match any pattern.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Load regex patterns from file</span>
</span></span><span class="line"><span class="cl">        <span class="n">patterns</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">patterns_file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">patterns_file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">patterns</span> <span class="o">=</span> <span class="p">[</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">file</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Get the bucket</span>
</span></span><span class="line"><span class="cl">        <span class="n">bucket</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">bucket</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># List all blobs in the bucket</span>
</span></span><span class="line"><span class="cl">        <span class="n">blobs</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">bucket</span><span class="o">.</span><span class="n">list_blobs</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">blobs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;No blobs found in bucket &#39;</span><span class="si">{</span><span class="n">bucket_name</span><span class="si">}</span><span class="s2">&#39;.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Filter blobs based on regex patterns</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">blob</span> <span class="ow">in</span> <span class="n">blobs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">blob</span><span class="o">.</span><span class="n">name</span><span class="p">)</span> <span class="k">for</span> <span class="n">pattern</span> <span class="ow">in</span> <span class="n">patterns</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;First valid blob selected: </span><span class="si">{</span><span class="n">blob</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">blob</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;No valid blobs found after applying regex patterns.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">None</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GoogleCloudLogging</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GCSClient</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">list_gcs_buckets</span><span class="p">(</span><span class="n">client</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">buckets</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">list_buckets</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Buckets:&#34;</span><span class="p">,</span> <span class="n">buckets</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Buckets: </span><span class="si">{</span><span class="n">buckets</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error listing buckets: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser = argparse.ArgumentParser(description=&#39;Run the script locally or in the cloud.&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser.add_argument(&#39;--local&#39;, action=&#39;store_true&#39;, help=&#39;Run the script locally with credentials path&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># args = parser.parse_args()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">patterns_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;PATTERNS_FILE&#39;</span><span class="p">,</span> <span class="s1">&#39;exclude.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">project_id</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_PROJECT_ID&#39;</span><span class="p">,</span> <span class="s1">&#39;smart-axis-421517&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bucket_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;BUCKET_NAME&#39;</span><span class="p">,</span> <span class="s1">&#39;loc-scraper&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># if args.local:</span>
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_CREDENTIALS_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;secret.json&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Initialize logging</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span> <span class="o">=</span> <span class="n">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span><span class="o">.</span><span class="n">setup_logging</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># List Buckets for testing</span>
</span></span><span class="line"><span class="cl">    <span class="n">gcs_client</span> <span class="o">=</span> <span class="n">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">list_gcs_buckets</span><span class="p">(</span><span class="n">gcs_client</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Grab A blob from the heap</span>
</span></span><span class="line"><span class="cl">    <span class="n">first_blob</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">pop_blob</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span><span class="n">patterns_file</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">first_blob</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;First blob name: </span><span class="si">{</span><span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>trying creds file
Buckets: ['loc-scraper', 'loc_flattener_processed', 'processed_results', 'smart-axis-421517_cloudbuild']
First valid blob selected: result-10.json
First blob name: result-10.json
</code></pre>
<h3 id="download-the-data">Download the data</h3>
<p>Now I need to process the information. First off i need to grab the data from the blob</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">download_blob_to_memory</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">,</span> <span class="n">blob_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Downloads a blob from the specified bucket to memory.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">            bucket_name (str): Name of the bucket.
</span></span></span><span class="line"><span class="cl"><span class="s2">            blob_name (str): Name of the blob to download.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">            string: The string content of the blob.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Get the bucket</span>
</span></span><span class="line"><span class="cl">        <span class="n">bucket</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">bucket</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># Get the blob</span>
</span></span><span class="line"><span class="cl">        <span class="n">blob</span> <span class="o">=</span> <span class="n">bucket</span><span class="o">.</span><span class="n">blob</span><span class="p">(</span><span class="n">blob_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Download the blob to a string</span>
</span></span><span class="line"><span class="cl">        <span class="n">blob_data</span> <span class="o">=</span> <span class="n">blob</span><span class="o">.</span><span class="n">download_as_string</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># Parse the JSON content</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># json_content = json.loads(blob_data)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Blob &#39;</span><span class="si">{</span><span class="n">blob_name</span><span class="si">}</span><span class="s2">&#39; downloaded to memory.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">blob_data</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GoogleCloudLogging</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GCSClient</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">list_gcs_buckets</span><span class="p">(</span><span class="n">client</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">buckets</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">list_buckets</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Buckets:&#34;</span><span class="p">,</span> <span class="n">buckets</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Buckets: </span><span class="si">{</span><span class="n">buckets</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error listing buckets: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser = argparse.ArgumentParser(description=&#39;Run the script locally or in the cloud.&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser.add_argument(&#39;--local&#39;, action=&#39;store_true&#39;, help=&#39;Run the script locally with credentials path&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># args = parser.parse_args()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">patterns_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;PATTERNS_FILE&#39;</span><span class="p">,</span> <span class="s1">&#39;exclude.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">project_id</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_PROJECT_ID&#39;</span><span class="p">,</span> <span class="s1">&#39;smart-axis-421517&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bucket_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;BUCKET_NAME&#39;</span><span class="p">,</span> <span class="s1">&#39;loc-scraper&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># if args.local:</span>
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_CREDENTIALS_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;secret.json&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Initialize logging</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span> <span class="o">=</span> <span class="n">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span><span class="o">.</span><span class="n">setup_logging</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># List Buckets for testing</span>
</span></span><span class="line"><span class="cl">    <span class="n">gcs_client</span> <span class="o">=</span> <span class="n">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">list_gcs_buckets</span><span class="p">(</span><span class="n">gcs_client</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Grab A blob from the heap</span>
</span></span><span class="line"><span class="cl">    <span class="n">first_blob</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">pop_blob</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span><span class="n">patterns_file</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">first_blob</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;First blob name: </span><span class="si">{</span><span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#download to memory</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">blob_data</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">download_blob_to_memory</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">json_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">blob_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">blob_data</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">100</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># create_gcs_bucket(gcs_client, bucket_name)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>trying creds file
Buckets: ['loc-scraper', 'loc_flattener_processed', 'processed_results', 'smart-axis-421517_cloudbuild']
First valid blob selected: result-10.json
First blob name: result-10.json
Blob 'result-10.json' downloaded to memory.
b'{&quot;breadcrumbs&quot;: [{&quot;Library of Congress&quot;: &quot;https://www.loc.gov&quot;}, {&quot;Digital Collections&quot;: &quot;https://ww'
</code></pre>
<h4 id="flatten-and-process-the-json">Flatten and process the JSON</h4>
<p>There is a ton of information in the json. I need to explore it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GoogleCloudLogging</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GCSClient</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">list_gcs_buckets</span><span class="p">(</span><span class="n">client</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">buckets</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">list_buckets</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Buckets:&#34;</span><span class="p">,</span> <span class="n">buckets</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Buckets: </span><span class="si">{</span><span class="n">buckets</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error listing buckets: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># parser = argparse.ArgumentParser(description=&#39;Run the script locally or in the cloud.&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser.add_argument(&#39;--local&#39;, action=&#39;store_true&#39;, help=&#39;Run the script locally with credentials path&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># args = parser.parse_args()</span>
</span></span><span class="line"><span class="cl"><span class="n">patterns_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;PATTERNS_FILE&#39;</span><span class="p">,</span> <span class="s1">&#39;exclude.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">project_id</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_PROJECT_ID&#39;</span><span class="p">,</span> <span class="s1">&#39;smart-axis-421517&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">bucket_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;BUCKET_NAME&#39;</span><span class="p">,</span> <span class="s1">&#39;loc-scraper&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">credentials_path</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl"><span class="c1"># if args.local:</span>
</span></span><span class="line"><span class="cl"><span class="n">credentials_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_CREDENTIALS_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;secret.json&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Initialize logging</span>
</span></span><span class="line"><span class="cl"><span class="n">logging_client</span> <span class="o">=</span> <span class="n">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">logging_client</span><span class="o">.</span><span class="n">setup_logging</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># List Buckets for testing</span>
</span></span><span class="line"><span class="cl"><span class="n">gcs_client</span> <span class="o">=</span> <span class="n">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">list_gcs_buckets</span><span class="p">(</span><span class="n">gcs_client</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Grab A blob from the heap</span>
</span></span><span class="line"><span class="cl"><span class="n">first_blob</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">pop_blob</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span><span class="n">patterns_file</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">first_blob</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;First blob name: </span><span class="si">{</span><span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#download to memory</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">blob_data</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">download_blob_to_memory</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">json_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">blob_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">blob_data</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">100</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># create_gcs_bucket(gcs_client, bucket_name)</span>
</span></span></code></pre></div><pre><code>trying creds file
Buckets: ['loc-scraper', 'loc_flattener_processed', 'processed_results', 'smart-axis-421517_cloudbuild']
First valid blob selected: result-10.json
First blob name: result-10.json
Blob 'result-10.json' downloaded to memory.
b'{&quot;breadcrumbs&quot;: [{&quot;Library of Congress&quot;: &quot;https://www.loc.gov&quot;}, {&quot;Digital Collections&quot;: &quot;https://ww'
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">json_data</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>dict_keys(['breadcrumbs', 'browse', 'categories', 'content', 'content_is_post', 'expert_resources', 'facet_trail', 'facet_views', 'facets', 'form_facets', 'next', 'next_sibling', 'options', 'original_formats', 'pages', 'pagination', 'partof', 'previous', 'previous_sibling', 'research-centers', 'results', 'search', 'shards', 'site_type', 'subjects', 'timestamp', 'title', 'topics', 'views'])
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">json_data</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span></span></code></pre></div><pre><code>{'access_restricted': False,
 'aka': ['http://www.loc.gov/item/usrep308213/',
  'http://www.loc.gov/resource/usrep.usrep308213/',
  'http://www.loc.gov/item/usrep.usrep308213/'],
 'campaigns': [],
 'contributor': ['stone, harlan fiske', 'supreme court of the united states'],
 'date': '1939',
 'dates': ['1939'],
 'digitized': True,
 'extract_timestamp': '2023-12-04T18:41:50.547Z',
 'group': ['usrep103', 'us-report'],
 'hassegments': False,
 'id': 'http://www.loc.gov/item/usrep308213/',
 'image_url': ['https://tile.loc.gov/storage-services/service/ll/usrep/usrep308/usrep308213/usrep308213.gif#h=150&amp;w=100'],
 'index': 631,
 'item': {'call_number': ['Call Number: KF101',
   'Series: Administrative Law',
   'Series: Volume 308'],
  'contributors': ['Stone, Harlan Fiske (Judge)',
   'Supreme Court of the United States (Author)'],
  'created_published': ['1939'],
  'date': '19390000',
  'format': 'periodical',
  'genre': ['Periodical'],
  'language': ['eng'],
  'notes': ['Description: U.S. Reports Volume 308; October Term, 1939; Union Stock Yard &amp; Transit Co. v. United States et al.'],
  'rights': 'no known restrictions on use or reproduction',
  'source_collection': 'U.S. Reports',
  'subjects': ['Livestock',
   'Law',
   'Railroads',
   'Law Library',
   'Supreme Court',
   'United States',
   'Government Documents',
   'Judicial review and appeals',
   'Agency',
   'Tariffs',
   'Interstate commerce',
   'Administrative law and regulatory procedure',
   'U.S. Reports',
   'Common law',
   'Court opinions',
   'Judicial decisions',
   'Court cases',
   'Court decisions',
   'Interstate Commerce Commission (I.C.C.)',
   'Agency jurisdiction',
   'Periodical'],
  'title': 'U.S. Reports: Union Stock Yard Co. v. U.S., 308 U.S. 213 (1939).'},
 'language': ['english'],
 'mime_type': ['image/gif', 'application/pdf'],
 'online_format': ['image', 'pdf'],
 'original_format': ['periodical'],
 'other_title': [],
 'partof': ['u.s. reports: volume 308',
  'u.s. reports: administrative law',
  'law library of congress',
  'united states reports (official opinions of the u.s. supreme court)'],
 'resources': [{'files': 1,
   'image': 'https://tile.loc.gov/storage-services/service/ll/usrep/usrep308/usrep308213/usrep308213.gif',
   'pdf': 'https://tile.loc.gov/storage-services/service/ll/usrep/usrep308/usrep308213/usrep308213.pdf',
   'url': 'https://www.loc.gov/resource/usrep.usrep308213/'}],
 'shelf_id': 'Call Number: KF101 Series: Administrative Law Series: Volume 308',
 'subject': ['administrative law',
  'livestock',
  'railroads',
  'supreme court',
  'united states',
  'court opinions',
  'periodical',
  'agency',
  'interstate commerce',
  'court cases',
  'judicial decisions',
  'law library',
  'interstate commerce commission (i.c.c.)',
  'judicial review and appeals',
  'government documents',
  'administrative law and regulatory procedure',
  'law',
  'common law',
  'court decisions',
  'u.s. reports',
  'tariffs',
  'agency jurisdiction'],
 'subject_major_case_topic': ['administrative law'],
 'timestamp': '2023-12-04T19:05:12.397Z',
 'title': 'U.S. Reports: Union Stock Yard Co. v. U.S., 308 U.S. 213 (1939).',
 'type': ['periodical'],
 'url': 'https://www.loc.gov/item/usrep308213/'}
</code></pre>
<h4 id="use-pandas-to-normalize-the-data">Use Pandas to normalize the data</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">       <span class="c1"># Flatten the JSON content</span>
</span></span><span class="line"><span class="cl"><span class="n">df_main</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">json_data</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># Normalize nested structures</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">item_data</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">resources_data</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;resources&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl"><span class="n">df_item</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">item_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_item</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_resources</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">resources_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_resources</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">        
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_item</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_resources</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_main</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># df_call_number = pd.DataFrame(df_item[&#34;call_number&#34;], columns=[&#39;call_number&#39;])</span>
</span></span><span class="line"><span class="cl"><span class="c1"># df_call_number[&#39;id&#39;] = json_data[&#34;results&#34;][0][&#39;id&#39;]  # Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">call_numbers</span> <span class="o">=</span> <span class="n">item_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;call_number&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="n">df_call_number</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">call_numbers</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;call_number&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">df_call_number</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">        
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_call_number</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">subjects</span> <span class="o">=</span> <span class="n">item_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;subjects&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="n">df_subjects</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">subjects</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;subjects&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">df_subjects</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">        
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df_subjects</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">notes</span> <span class="o">=</span> <span class="n">item_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;notes&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="n">df_notes</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">notes</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;notes&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">df_notes</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl"><span class="n">df_notes</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h5 id="putting-it-together">Putting it together</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_main</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_main</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_item</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_item</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">item_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_item</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_item</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_resources</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">resources_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;resources&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_resources</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">resources_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_resources</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_resources</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_call_numbers</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">call_numbers</span> <span class="o">=</span> <span class="n">item_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;call_number&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_call_number</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">call_numbers</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;call_number&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_call_number</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_call_number</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_contributors</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">contributors</span> <span class="o">=</span> <span class="n">item_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;contributors&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_contributors</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">contributors</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;contributors&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_contributors</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_contributors</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_subjects</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">subjects</span> <span class="o">=</span> <span class="n">item_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;subjects&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_subjects</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">subjects</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;subjects&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_subjects</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_subjects</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_notes</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">notes</span> <span class="o">=</span> <span class="n">item_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;notes&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_notes</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">notes</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;notes&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_notes</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_notes</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GoogleCloudLogging</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GCSClient</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_bq_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">BigQueryClient</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span> <span class="o">=</span> <span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">list_gcs_buckets</span><span class="p">(</span><span class="n">client</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">buckets</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">list_buckets</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Buckets:&#34;</span><span class="p">,</span> <span class="n">buckets</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Buckets: </span><span class="si">{</span><span class="n">buckets</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error listing buckets: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser = argparse.ArgumentParser(description=&#39;Run the script locally or in the cloud.&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser.add_argument(&#39;--local&#39;, action=&#39;store_true&#39;, help=&#39;Run the script locally with credentials path&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># args = parser.parse_args()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">patterns_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;PATTERNS_FILE&#39;</span><span class="p">,</span> <span class="s1">&#39;exclude.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">project_id</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_PROJECT_ID&#39;</span><span class="p">,</span> <span class="s1">&#39;smart-axis-421517&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bucket_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;BUCKET_NAME&#39;</span><span class="p">,</span> <span class="s1">&#39;loc-scraper&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># if args.local:</span>
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_CREDENTIALS_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;secret.json&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Initialize logging</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span> <span class="o">=</span> <span class="n">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span><span class="o">.</span><span class="n">setup_logging</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># List Buckets for testing</span>
</span></span><span class="line"><span class="cl">    <span class="n">gcs_client</span> <span class="o">=</span> <span class="n">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">list_gcs_buckets</span><span class="p">(</span><span class="n">gcs_client</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># initialize bq</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span> <span class="o">=</span> <span class="n">initialize_bq_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Grab A blob from the heap</span>
</span></span><span class="line"><span class="cl">    <span class="n">first_blob</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">pop_blob</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span><span class="n">patterns_file</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">first_blob</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;First blob name: </span><span class="si">{</span><span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#download to memory</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">blob_data</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">download_blob_to_memory</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">json_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">blob_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">blob_data</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">100</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># create_gcs_bucket(gcs_client, bucket_name)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">results</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Initialize lists to hold DataFramesdf_notes</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_main_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_item_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_resources_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_call_number_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_contributors_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_subjects_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_notes_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">results</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_main_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_main</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_item_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_item</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_resources_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_resources</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_call_number_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_call_numbers</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_contributors_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_contributors</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_subjects_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_subjects</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_notes_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_notes</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Concatenate all DataFrames</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_main</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_main_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_item</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_item_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_resources</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_resources_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_call_number</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_call_number_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_contributors</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_contributors_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_subjects</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_subjects_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_notes</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_notes_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>trying creds file
Buckets: ['loc-scraper', 'loc_flattener_processed', 'processed_results', 'smart-axis-421517_cloudbuild']
First valid blob selected: result-10.json
First blob name: result-10.json
Blob 'result-10.json' downloaded to memory.
b'{&quot;breadcrumbs&quot;: [{&quot;Library of Congress&quot;: &quot;https://www.loc.gov&quot;}, {&quot;Digital Collections&quot;: &quot;https://ww'
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># parser = argparse.ArgumentParser(description=&#39;Run the script locally or in the cloud.&#39;)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># parser.add_argument(&#39;--local&#39;, action=&#39;store_true&#39;, help=&#39;Run the script locally with credentials path&#39;)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># args = parser.parse_args()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GoogleCloudLogging</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GCSClient</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_bq_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">BigQueryClient</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span> <span class="o">=</span> <span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">list_gcs_buckets</span><span class="p">(</span><span class="n">client</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">buckets</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">list_buckets</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Buckets:&#34;</span><span class="p">,</span> <span class="n">buckets</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Buckets: </span><span class="si">{</span><span class="n">buckets</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error listing buckets: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser = argparse.ArgumentParser(description=&#39;Run the script locally or in the cloud.&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser.add_argument(&#39;--local&#39;, action=&#39;store_true&#39;, help=&#39;Run the script locally with credentials path&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># args = parser.parse_args()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">main_table_id</span> <span class="o">=</span> <span class="s2">&#34;results_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_table_id</span> <span class="o">=</span> <span class="s2">&#34;items_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">resources_table_id</span> <span class="o">=</span> <span class="s2">&#34;resources_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">call_number_table_id</span> <span class="o">=</span> <span class="s2">&#34;call_numbers_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">contributors_table_id</span> <span class="o">=</span> <span class="s2">&#34;contributors_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">subjects_table_id</span> <span class="o">=</span> <span class="s2">&#34;subjects_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">notes_table_id</span> <span class="o">=</span> <span class="s2">&#34;notes_staging&#34;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">dataset_id</span> <span class="o">=</span> <span class="s2">&#34;supreme_court&#34;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">patterns_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;PATTERNS_FILE&#39;</span><span class="p">,</span> <span class="s1">&#39;exclude.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">project_id</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_PROJECT_ID&#39;</span><span class="p">,</span> <span class="s1">&#39;smart-axis-421517&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bucket_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;BUCKET_NAME&#39;</span><span class="p">,</span> <span class="s1">&#39;loc-scraper&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># if args.local:</span>
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_CREDENTIALS_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;secret.json&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Initialize logging</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span> <span class="o">=</span> <span class="n">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span><span class="o">.</span><span class="n">setup_logging</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># List Buckets for testing</span>
</span></span><span class="line"><span class="cl">    <span class="n">gcs_client</span> <span class="o">=</span> <span class="n">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">list_gcs_buckets</span><span class="p">(</span><span class="n">gcs_client</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span> <span class="o">=</span> <span class="n">initialize_bq_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Create the dataset if not exists</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_dataset</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Grab A blob from the heap</span>
</span></span><span class="line"><span class="cl">    <span class="n">first_blob</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">pop_blob</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span><span class="n">patterns_file</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">first_blob</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;First blob name: </span><span class="si">{</span><span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">#download to memory</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">blob_data</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">download_blob_to_memory</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">json_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">blob_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># print(blob_data[0:100])</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># create_gcs_bucket(gcs_client, bucket_name)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">results</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Initialize lists to hold DataFrames</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_main_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_item_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_resources_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_call_number_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_contributors_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_subjects_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_notes_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">results</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_main_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_main</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_item_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_item</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_resources_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_resources</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_call_number_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_call_numbers</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_contributors_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_contributors</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_subjects_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_subjects</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_notes_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_notes</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Concatenate all DataFrames</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_main</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_main_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_item</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_item_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_resources</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_resources_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_call_number</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_call_number_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_contributors</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_contributors_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_subjects</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_subjects_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_notes</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_notes_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Define the BigQuery table schema</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># main_schema = [bigquery.SchemaField(name, bigquery.enums.SqlTypeNames.STRING) for name in df_main.columns]</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_item</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">resources_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_resources</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">call_number_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_call_number</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">contributors_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_contributors</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">subjects_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_subjects</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">notes_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_notes</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Create BigQuery tables</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># bq_client.create_table(dataset_id, main_table_id, main_schema)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">item_table_id</span><span class="p">,</span> <span class="n">item_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">resources_table_id</span><span class="p">,</span> <span class="n">resources_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">call_number_table_id</span><span class="p">,</span> <span class="n">call_number_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">contributors_table_id</span><span class="p">,</span> <span class="n">contributors_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">subjects_table_id</span><span class="p">,</span> <span class="n">subjects_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">notes_table_id</span><span class="p">,</span> <span class="n">notes_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Load DataFrames into BigQuery tables</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># bq_client.load_dataframe_to_table(dataset_id, main_table_id, df_main)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">item_table_id</span><span class="p">,</span> <span class="n">df_item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">resources_table_id</span><span class="p">,</span> <span class="n">df_resources</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">call_number_table_id</span><span class="p">,</span> <span class="n">df_call_number</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">contributors_table_id</span><span class="p">,</span> <span class="n">df_contributors</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">subjects_table_id</span><span class="p">,</span> <span class="n">df_subjects</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">notes_table_id</span><span class="p">,</span> <span class="n">df_notes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>trying creds file
Buckets: ['loc-scraper', 'loc_flattener_processed', 'processed_results', 'smart-axis-421517_cloudbuild']
Dataset supreme_court created.
First valid blob selected: result-10.json
First blob name: result-10.json
Blob 'result-10.json' downloaded to memory.
Table items_staging created in dataset supreme_court.
Table resources_staging created in dataset supreme_court.
Table call_numbers_staging created in dataset supreme_court.
Table contributors_staging created in dataset supreme_court.
Table subjects_staging created in dataset supreme_court.
Table notes_staging created in dataset supreme_court.
Loaded 70 rows into supreme_court:items_staging.
Loaded 70 rows into supreme_court:resources_staging.
Loaded 210 rows into supreme_court:call_numbers_staging.
Loaded 138 rows into supreme_court:contributors_staging.
Loaded 1570 rows into supreme_court:subjects_staging.
Loaded 70 rows into supreme_court:notes_staging.
</code></pre>
<h4 id="moving-the-processed-blobs-to-a-processed-bucket">Moving the Processed blobs to a Processed Bucket</h4>
<h5 id="add-code-to-the-gcs-client-to-enable-deleting-and-copying">Add code to the GCS Client to enable deleting and copying</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">copy_blob</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source_bucket_name</span><span class="p">,</span> <span class="n">source_blob_name</span><span class="p">,</span> <span class="n">destination_bucket_name</span><span class="p">,</span> <span class="n">destination_blob_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Copies a blob from one bucket to another.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">            source_bucket_name (str): Name of the source bucket.
</span></span></span><span class="line"><span class="cl"><span class="s2">            source_blob_name (str): Name of the source blob.
</span></span></span><span class="line"><span class="cl"><span class="s2">            destination_bucket_name (str): Name of the destination bucket.
</span></span></span><span class="line"><span class="cl"><span class="s2">            destination_blob_name (str): Name of the destination blob.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">            google.cloud.storage.blob.Blob: The copied blob.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">source_bucket</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">bucket</span><span class="p">(</span><span class="n">source_bucket_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">source_blob</span> <span class="o">=</span> <span class="n">source_bucket</span><span class="o">.</span><span class="n">blob</span><span class="p">(</span><span class="n">source_blob_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">destination_bucket</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">bucket</span><span class="p">(</span><span class="n">destination_bucket_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">blob_copy</span> <span class="o">=</span> <span class="n">source_bucket</span><span class="o">.</span><span class="n">copy_blob</span><span class="p">(</span><span class="n">source_blob</span><span class="p">,</span> <span class="n">destination_bucket</span><span class="p">,</span> <span class="n">destination_blob_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">blob_copy</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">delete_blob</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">,</span> <span class="n">blob_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Deletes a blob from the specified bucket.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">            bucket_name (str): Name of the bucket.
</span></span></span><span class="line"><span class="cl"><span class="s2">            blob_name (str): Name of the blob to delete.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">bucket</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">bucket</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">blob</span> <span class="o">=</span> <span class="n">bucket</span><span class="o">.</span><span class="n">blob</span><span class="p">(</span><span class="n">blob_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">blob</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span></span></code></pre></div><h5 id="add-a-couple-lines-to-the-main-script-to-call-the-new-methods">Add a couple lines to the main script to call the new methods</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Python" data-lang="Python"><span class="line"><span class="cl"><span class="c1"># Move the blob to the processed_results bucket</span>
</span></span><span class="line"><span class="cl"><span class="n">gcs_client</span><span class="o">.</span><span class="n">copy_blob</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">processed_bucket_name</span><span class="p">,</span> <span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">gcs_client</span><span class="o">.</span><span class="n">delete_blob</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Blob </span><span class="si">{</span><span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> moved to </span><span class="si">{</span><span class="n">processed_bucket_name</span><span class="si">}</span><span class="s2"> and deleted from </span><span class="si">{</span><span class="n">bucket_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#### Testing</span>
</span></span><span class="line"><span class="cl"><span class="c1"># loc_flattener.py</span>
</span></span><span class="line"><span class="cl"><span class="c1"># library_of_congress_scraper.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># loc_flattener.py</span>
</span></span><span class="line"><span class="cl"><span class="c1"># library_of_congress_scraper.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">print_function</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gcputils.gcpclient</span> <span class="kn">import</span> <span class="n">GCSClient</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gcputils.GoogleCloudLogging</span> <span class="kn">import</span> <span class="n">GoogleCloudLogging</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gcputils.BigQueryClient</span> <span class="kn">import</span> <span class="n">BigQueryClient</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">html</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flatten_json</span> <span class="kn">import</span> <span class="n">flatten</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">google.cloud.logging</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">argparse</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">google.cloud</span> <span class="kn">import</span> <span class="n">bigquery</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GCSClient</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GoogleCloudLogging</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_bq_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">BigQueryClient</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span> <span class="o">=</span> <span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">list_gcs_buckets</span><span class="p">(</span><span class="n">client</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">buckets</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">list_buckets</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Buckets:&#34;</span><span class="p">,</span> <span class="n">buckets</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Buckets: </span><span class="si">{</span><span class="n">buckets</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error listing buckets: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_gcs_bucket</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">bucket</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">create_bucket</span><span class="p">(</span><span class="n">bucket_name</span><span class="o">=</span><span class="n">bucket_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">bucket</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">bucket</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error creating bucket: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_main</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_main</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_item</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_item</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">item_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_item</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_item</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_resources</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">resources_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;resources&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_resources</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">resources_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_resources</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_resources</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_call_numbers</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">call_numbers</span> <span class="o">=</span> <span class="n">item_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;call_number&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_call_number</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">call_numbers</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;call_number&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_call_number</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_call_number</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_contributors</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">contributors</span> <span class="o">=</span> <span class="n">item_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;contributors&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_contributors</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">contributors</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;contributors&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_contributors</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_contributors</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_subjects</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">subjects</span> <span class="o">=</span> <span class="n">item_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;subjects&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_subjects</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">subjects</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;subjects&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_subjects</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_subjects</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_notes</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">notes</span> <span class="o">=</span> <span class="n">item_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;notes&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_notes</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">notes</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;notes&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_notes</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_notes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser = argparse.ArgumentParser(description=&#39;Run the script locally or in the cloud.&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># parser.add_argument(&#39;--local&#39;, action=&#39;store_true&#39;, help=&#39;Run the script locally with credentials path&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># args = parser.parse_args()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">main_table_id</span> <span class="o">=</span> <span class="s2">&#34;results_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_table_id</span> <span class="o">=</span> <span class="s2">&#34;items_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">resources_table_id</span> <span class="o">=</span> <span class="s2">&#34;resources_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">call_number_table_id</span> <span class="o">=</span> <span class="s2">&#34;call_numbers_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">contributors_table_id</span> <span class="o">=</span> <span class="s2">&#34;contributors_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">subjects_table_id</span> <span class="o">=</span> <span class="s2">&#34;subjects_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">notes_table_id</span> <span class="o">=</span> <span class="s2">&#34;notes_staging&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">processed_bucket_name</span> <span class="o">=</span> <span class="s2">&#34;loc_flattener_processed&#34;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">dataset_id</span> <span class="o">=</span> <span class="s2">&#34;supreme_court&#34;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">patterns_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;PATTERNS_FILE&#39;</span><span class="p">,</span> <span class="s1">&#39;exclude.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">project_id</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_PROJECT_ID&#39;</span><span class="p">,</span> <span class="s1">&#39;smart-axis-421517&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bucket_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;BUCKET_NAME&#39;</span><span class="p">,</span> <span class="s1">&#39;loc-scraper&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># if args.local:</span>
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_CREDENTIALS_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;secret.json&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Initialize logging</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span> <span class="o">=</span> <span class="n">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span><span class="o">.</span><span class="n">setup_logging</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># List Buckets for testing</span>
</span></span><span class="line"><span class="cl">    <span class="n">gcs_client</span> <span class="o">=</span> <span class="n">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">list_gcs_buckets</span><span class="p">(</span><span class="n">gcs_client</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span> <span class="o">=</span> <span class="n">initialize_bq_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Create the dataset if not exists</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_dataset</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># create the processed_bucket if not exists</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># print(gcs_client.create_bucket(processed_bucket_name))</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Grab A blob from the heap</span>
</span></span><span class="line"><span class="cl">    <span class="n">first_blob</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">pop_blob</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span><span class="n">patterns_file</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">first_blob</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;First blob name: </span><span class="si">{</span><span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">#download to memory</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">blob_data</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">download_blob_to_memory</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">json_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">blob_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># print(blob_data[0:100])</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># create_gcs_bucket(gcs_client, bucket_name)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">results</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Initialize lists to hold DataFrames</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_main_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_item_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_resources_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_call_number_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_contributors_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_subjects_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_notes_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">results</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_main_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_main</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_item_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_item</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_resources_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_resources</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_call_number_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_call_numbers</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_contributors_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_contributors</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_subjects_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_subjects</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_notes_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_notes</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Concatenate all DataFrames</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_main</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_main_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_item</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_item_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_resources</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_resources_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_call_number</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_call_number_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_contributors</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_contributors_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_subjects</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_subjects_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_notes</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_notes_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Define the BigQuery table schema</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># main_schema = [bigquery.SchemaField(name, bigquery.enums.SqlTypeNames.STRING) for name in df_main.columns]</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_item</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">resources_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_resources</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">call_number_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_call_number</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">contributors_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_contributors</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">subjects_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_subjects</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">notes_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_notes</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Create BigQuery tables</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># bq_client.create_table(dataset_id, main_table_id, main_schema)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">item_table_id</span><span class="p">,</span> <span class="n">item_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">resources_table_id</span><span class="p">,</span> <span class="n">resources_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">call_number_table_id</span><span class="p">,</span> <span class="n">call_number_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">contributors_table_id</span><span class="p">,</span> <span class="n">contributors_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">subjects_table_id</span><span class="p">,</span> <span class="n">subjects_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">notes_table_id</span><span class="p">,</span> <span class="n">notes_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Load DataFrames into BigQuery tables</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># bq_client.load_dataframe_to_table(dataset_id, main_table_id, df_main)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">item_table_id</span><span class="p">,</span> <span class="n">df_item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">resources_table_id</span><span class="p">,</span> <span class="n">df_resources</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">call_number_table_id</span><span class="p">,</span> <span class="n">df_call_number</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">contributors_table_id</span><span class="p">,</span> <span class="n">df_contributors</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">subjects_table_id</span><span class="p">,</span> <span class="n">df_subjects</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">notes_table_id</span><span class="p">,</span> <span class="n">df_notes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Move the blob to the processed_results bucket</span>
</span></span><span class="line"><span class="cl">    <span class="n">gcs_client</span><span class="o">.</span><span class="n">copy_blob</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">processed_bucket_name</span><span class="p">,</span> <span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># gcs_client.delete_blob(bucket_name, first_blob.name)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Blob </span><span class="si">{</span><span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> moved to </span><span class="si">{</span><span class="n">processed_bucket_name</span><span class="si">}</span><span class="s2"> and deleted from </span><span class="si">{</span><span class="n">bucket_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>trying creds file
Buckets: ['loc-scraper', 'loc_flattener_processed', 'processed_results', 'smart-axis-421517_cloudbuild']
Dataset supreme_court created.
First valid blob selected: result-10.json
First blob name: result-10.json
Blob 'result-10.json' downloaded to memory.
Table items_staging created in dataset supreme_court.
Table resources_staging created in dataset supreme_court.
Table call_numbers_staging created in dataset supreme_court.
Table contributors_staging created in dataset supreme_court.
Table subjects_staging created in dataset supreme_court.
Table notes_staging created in dataset supreme_court.
Loaded 70 rows into supreme_court:items_staging.
Loaded 70 rows into supreme_court:resources_staging.
Loaded 210 rows into supreme_court:call_numbers_staging.
Loaded 138 rows into supreme_court:contributors_staging.
Loaded 1570 rows into supreme_court:subjects_staging.
Loaded 70 rows into supreme_court:notes_staging.
Blob result-10.json moved to loc_flattener_processed and deleted from loc-scraper
</code></pre>
<h4 id="add-while-true-logic-and-clean-up-the-script">Add while true logic and clean up the script</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Python" data-lang="Python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">argparse</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">google.cloud</span> <span class="kn">import</span> <span class="n">bigquery</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gcputils.gcpclient</span> <span class="kn">import</span> <span class="n">GCSClient</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gcputils.GoogleCloudLogging</span> <span class="kn">import</span> <span class="n">GoogleCloudLogging</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">gcputils.BigQueryClient</span> <span class="kn">import</span> <span class="n">BigQueryClient</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GCSClient</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">GoogleCloudLogging</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">initialize_bq_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">BigQueryClient</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="o">=</span><span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">list_gcs_buckets</span><span class="p">(</span><span class="n">client</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">buckets</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">list_buckets</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Buckets:&#34;</span><span class="p">,</span> <span class="n">buckets</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Buckets: </span><span class="si">{</span><span class="n">buckets</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error listing buckets: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_gcs_bucket</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">bucket</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">create_bucket</span><span class="p">(</span><span class="n">bucket_name</span><span class="o">=</span><span class="n">bucket_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">bucket</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">bucket</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error creating bucket: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_main</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_main</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_item</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_item</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">item_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_item</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_item</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_resources</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">resources_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;resources&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_resources</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">json_normalize</span><span class="p">(</span><span class="n">resources_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_resources</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_resources</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_call_numbers</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">call_numbers</span> <span class="o">=</span> <span class="n">item_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;call_number&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_call_number</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">call_numbers</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;call_number&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_call_number</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_call_number</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_contributors</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">contributors</span> <span class="o">=</span> <span class="n">item_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;contributors&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_contributors</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">contributors</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;contributors&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_contributors</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_contributors</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_subjects</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">subjects</span> <span class="o">=</span> <span class="n">item_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;subjects&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_subjects</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">subjects</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;subjects&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_subjects</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_subjects</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">normalize_notes</span><span class="p">(</span><span class="n">result</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_data</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;item&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">notes</span> <span class="o">=</span> <span class="n">item_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;notes&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_notes</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">notes</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;notes&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_notes</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>  <span class="c1"># Add &#39;id&#39; for joining</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df_notes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_tables_and_schemas</span><span class="p">(</span><span class="n">bq_client</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">,</span> <span class="n">patterns_file</span><span class="p">,</span> <span class="n">gcs_client</span><span class="p">,</span> <span class="n">dataset_id</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Define the BigQuery table schema</span>
</span></span><span class="line"><span class="cl">    <span class="n">main_table_id</span> <span class="o">=</span> <span class="s2">&#34;results_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_table_id</span> <span class="o">=</span> <span class="s2">&#34;items_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">resources_table_id</span> <span class="o">=</span> <span class="s2">&#34;resources_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">call_number_table_id</span> <span class="o">=</span> <span class="s2">&#34;call_numbers_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">contributors_table_id</span> <span class="o">=</span> <span class="s2">&#34;contributors_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">subjects_table_id</span> <span class="o">=</span> <span class="s2">&#34;subjects_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">notes_table_id</span> <span class="o">=</span> <span class="s2">&#34;notes_staging&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Assuming the first blob provides a sample structure</span>
</span></span><span class="line"><span class="cl">    <span class="n">sample_blob</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">pop_blob</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">patterns_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">blob_data</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">download_blob_to_memory</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">sample_blob</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">json_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">blob_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>  <span class="c1"># Use the first result as a sample</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df_main</span> <span class="o">=</span> <span class="n">normalize_main</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_item</span> <span class="o">=</span> <span class="n">normalize_item</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_resources</span> <span class="o">=</span> <span class="n">normalize_resources</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_call_number</span> <span class="o">=</span> <span class="n">normalize_call_numbers</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_contributors</span> <span class="o">=</span> <span class="n">normalize_contributors</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_subjects</span> <span class="o">=</span> <span class="n">normalize_subjects</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_notes</span> <span class="o">=</span> <span class="n">normalize_notes</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">main_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_main</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_item</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">resources_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_resources</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">call_number_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_call_number</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">contributors_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_contributors</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">subjects_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_subjects</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">notes_schema</span> <span class="o">=</span> <span class="p">[</span><span class="n">bigquery</span><span class="o">.</span><span class="n">SchemaField</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">bigquery</span><span class="o">.</span><span class="n">enums</span><span class="o">.</span><span class="n">SqlTypeNames</span><span class="o">.</span><span class="n">STRING</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">df_notes</span><span class="o">.</span><span class="n">columns</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Create BigQuery tables</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># bq_client.create_table(dataset_id, main_table_id, main_schema)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">item_table_id</span><span class="p">,</span> <span class="n">item_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">resources_table_id</span><span class="p">,</span> <span class="n">resources_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">call_number_table_id</span><span class="p">,</span> <span class="n">call_number_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">contributors_table_id</span><span class="p">,</span> <span class="n">contributors_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">subjects_table_id</span><span class="p">,</span> <span class="n">subjects_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">notes_table_id</span><span class="p">,</span> <span class="n">notes_schema</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">process_blob</span><span class="p">(</span><span class="n">gcs_client</span><span class="p">,</span> <span class="n">bq_client</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">,</span> <span class="n">processed_bucket_name</span><span class="p">,</span> <span class="n">patterns_file</span><span class="p">,</span> <span class="n">dataset_id</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">main_table_id</span> <span class="o">=</span> <span class="s2">&#34;results_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">item_table_id</span> <span class="o">=</span> <span class="s2">&#34;items_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">resources_table_id</span> <span class="o">=</span> <span class="s2">&#34;resources_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">call_number_table_id</span> <span class="o">=</span> <span class="s2">&#34;call_numbers_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">contributors_table_id</span> <span class="o">=</span> <span class="s2">&#34;contributors_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">subjects_table_id</span> <span class="o">=</span> <span class="s2">&#34;subjects_staging&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">notes_table_id</span> <span class="o">=</span> <span class="s2">&#34;notes_staging&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Grab a blob from the heap</span>
</span></span><span class="line"><span class="cl">    <span class="n">first_blob</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">pop_blob</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">patterns_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">first_blob</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Processing blob: </span><span class="si">{</span><span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Download to memory</span>
</span></span><span class="line"><span class="cl">    <span class="n">blob_data</span> <span class="o">=</span> <span class="n">gcs_client</span><span class="o">.</span><span class="n">download_blob_to_memory</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">json_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">blob_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">results</span> <span class="o">=</span> <span class="n">json_data</span><span class="p">[</span><span class="s2">&#34;results&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Initialize lists to hold DataFrames</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_main_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_item_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_resources_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_call_number_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_contributors_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_subjects_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_notes_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">results</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_main_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_main</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_item_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_item</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_resources_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_resources</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_call_number_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_call_numbers</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_contributors_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_contributors</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_subjects_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_subjects</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">df_notes_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">normalize_notes</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Concatenate all DataFrames</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_main</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_main_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_item</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_item_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_resources</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_resources_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_call_number</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_call_number_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_contributors</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_contributors_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_subjects</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_subjects_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_notes</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">df_notes_list</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Load DataFrames into BigQuery tables</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># bq_client.load_dataframe_to_table(dataset_id, main_table_id, df_main)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">item_table_id</span><span class="p">,</span> <span class="n">df_item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">resources_table_id</span><span class="p">,</span> <span class="n">df_resources</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">call_number_table_id</span><span class="p">,</span> <span class="n">df_call_number</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">contributors_table_id</span><span class="p">,</span> <span class="n">df_contributors</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">subjects_table_id</span><span class="p">,</span> <span class="n">df_subjects</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">load_dataframe_to_table</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">,</span> <span class="n">notes_table_id</span><span class="p">,</span> <span class="n">df_notes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Move the blob to the processed_results bucket</span>
</span></span><span class="line"><span class="cl">    <span class="n">gcs_client</span><span class="o">.</span><span class="n">copy_blob</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">processed_bucket_name</span><span class="p">,</span> <span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">gcs_client</span><span class="o">.</span><span class="n">delete_blob</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Blob </span><span class="si">{</span><span class="n">first_blob</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> moved to </span><span class="si">{</span><span class="n">processed_bucket_name</span><span class="si">}</span><span class="s2"> and deleted from </span><span class="si">{</span><span class="n">bucket_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s1">&#39;Run the script locally or in the cloud.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--local&#39;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s1">&#39;store_true&#39;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s1">&#39;Run the script locally with credentials path&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">dataset_id</span> <span class="o">=</span> <span class="s2">&#34;supreme_court&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">patterns_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;PATTERNS_FILE&#39;</span><span class="p">,</span> <span class="s1">&#39;exclude.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">project_id</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_PROJECT_ID&#39;</span><span class="p">,</span> <span class="s1">&#39;smart-axis-421517&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bucket_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;BUCKET_NAME&#39;</span><span class="p">,</span> <span class="s1">&#39;loc-scraper&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">processed_bucket_name</span> <span class="o">=</span> <span class="s2">&#34;processed_results&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">credentials_path</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">local</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">credentials_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;GCP_CREDENTIALS_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;secret.json&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Initialize logging</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span> <span class="o">=</span> <span class="n">initialize_google_cloud_logging_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logging_client</span><span class="o">.</span><span class="n">setup_logging</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># List Buckets for testing</span>
</span></span><span class="line"><span class="cl">    <span class="n">gcs_client</span> <span class="o">=</span> <span class="n">initialize_gcs_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">list_gcs_buckets</span><span class="p">(</span><span class="n">gcs_client</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Create the processed_results bucket if not exists</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># gcs_client.create_bucket(processed_bucket_name)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span> <span class="o">=</span> <span class="n">initialize_bq_client</span><span class="p">(</span><span class="n">project_id</span><span class="p">,</span> <span class="n">credentials_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Create the dataset if not exists</span>
</span></span><span class="line"><span class="cl">    <span class="n">bq_client</span><span class="o">.</span><span class="n">create_dataset</span><span class="p">(</span><span class="n">dataset_id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Create tables and schemas</span>
</span></span><span class="line"><span class="cl">    <span class="n">create_tables_and_schemas</span><span class="p">(</span><span class="n">bq_client</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">,</span> <span class="n">patterns_file</span><span class="p">,</span> <span class="n">gcs_client</span><span class="p">,</span> <span class="n">dataset_id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># def create_tables_and_schemas(bq_client, bucket_name, patterns_file, gcs_client, dataset_id):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Process blobs in a loop</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">process_blob</span><span class="p">(</span><span class="n">gcs_client</span><span class="p">,</span> <span class="n">bq_client</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">,</span> <span class="n">processed_bucket_name</span><span class="p">,</span> <span class="n">patterns_file</span><span class="p">,</span> <span class="n">dataset_id</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Processed a blob, checking for more...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><h3 id="gcp-cloud-run">GCP Cloud Run</h3>
<p>I want this to run autonomously for me on GCP</p>
<p>To do this I will need to</p>
<ol>
<li>Create a DockerFile</li>
<li>Build the image on gcp</li>
<li>create a job to run it</li>
</ol>
<h3 id="create-the-dockerfile">Create the DockerFile</h3>
<p>My Dockerfile looks something like this. Ignore the quickstart code thta i&rsquo;ve commente dout. I use that as a reference.</p>
<p><a href="https://raw.githubusercontent.com/justin-napolitano/loc_normalizer/main/Dockerfile">GH Link</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># # Use the Alpine Linux base image</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># FROM alpine:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># # Set the working directory inside the container</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># WORKDIR /app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># # Copy a simple script that prints &#34;Hello, World!&#34; into the container</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># COPY /src/hello.sh .</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># # Make the script executable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># RUN chmod +x hello.sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># # Define the command to run when the container starts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># CMD [&#34;./hello.sh&#34;]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Use the official Python image from Docker Hub</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">FROM python:3.10-slim</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Set the working directory in the container</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">WORKDIR /app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Copy the current directory contents into the container at /app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">COPY ./src /app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">COPY requirements.txt /app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Install any needed dependencies specified in requirements.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">RUN pip install --no-cache-dir -r requirements.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Run the Python script when the container launches</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">CMD [&#34;python&#34;, &#34;loc_scraper.py&#34;]</span><span class="w">
</span></span></span></code></pre></div><h4 id="using-cloudbuild">Using Cloudbuild</h4>
<p>I want to automate the entire build and deploy process by passing the steps to google&rsquo;s cloud build service.</p>
<p>My <a href="https://github.com/justin-napolitano/loc_normalizer/blob/main/src/cloudbuild.yaml">file</a> looks like this&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;gcr.io/cloud-builders/docker&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;build&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;-t&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;gcr.io/$PROJECT_ID/$IMAGE_NAME&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;.&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;gcr.io/cloud-builders/docker&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;push&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;gcr.io/$PROJECT_ID/$IMAGE_NAME&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;gcr.io/cloud-builders/gcloud&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;run&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;deploy&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;$SERVICE_NAME&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="s1">&#39;--image&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;gcr.io/$PROJECT_ID/$IMAGE_NAME&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="s1">&#39;--platform&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;managed&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="s1">&#39;--region&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;$REGION&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="s1">&#39;--allow-unauthenticated&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">_PROJECT_ID</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;smart-axis-421517&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">_IMAGE_NAME</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;loc-flattener-image&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">_SERVICE_NAME</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;loc-flattener&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">_REGION</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;us-west2&#39;</span><span class="w">  </span><span class="c"># e.g., us-central1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">timeout</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;1200s&#39;</span><span class="w">
</span></span></span></code></pre></div><h4 id="submit-the-build">Submit the build</h4>
<p>To sbumit the build run the following from the cli or save to as script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gcloud builds submit --config cloudbuild.yaml .
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"></code></pre></div>]]></content>
			<postid> 869c2078615947ddcb376d05cc90e1cd</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Signal Desktop Installation Script</title>
			<link>//localhost:1313/en/posts/signal-install-script/</link>
			<pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/signal-install-script/</guid>
			<description><![CDATA[Install Signal on Debian Devices]]></description>
			<content type="html"><![CDATA[<h1 id="signal-desktop-installation-script">Signal Desktop Installation Script</h1>
<p>This script automates the process of installing Signal Desktop on 64-bit Debian-based Linux distributions such as Ubuntu and Mint.</p>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>A 64-bit Debian-based Linux distribution (e.g., Ubuntu, Mint)</li>
<li>Administrative (sudo) privileges</li>
</ul>
<h2 id="script-overview">Script Overview</h2>
<p>The script performs the following steps:</p>
<ol>
<li>Installs the official Signal public software signing key.</li>
<li>Adds the Signal repository to the system&rsquo;s list of repositories.</li>
<li>Updates the package database and installs Signal Desktop.</li>
</ol>
<h2 id="usage-instructions">Usage Instructions</h2>
<h3 id="step-1-save-the-script">Step 1: Save the Script</h3>
<p>Save the following script to a file, e.g., <code>install_signal.sh</code>:</p>
<p>```bash
#!/bin/bash</p>
<h1 id="exit-immediately-if-a-command-exits-with-a-non-zero-status">Exit immediately if a command exits with a non-zero status</h1>
<p>set -e</p>
<h1 id="1-install-the-official-public-software-signing-key">1. Install the official public software signing key</h1>
<p>echo &ldquo;Installing the Signal public software signing key&hellip;&rdquo;
wget -O- <a href="https://updates.signal.org/desktop/apt/keys.asc">https://updates.signal.org/desktop/apt/keys.asc</a> | gpg &ndash;dearmor &gt; signal-desktop-keyring.gpg
cat signal-desktop-keyring.gpg | sudo tee /usr/share/keyrings/signal-desktop-keyring.gpg &gt; /dev/null</p>
<h1 id="2-add-the-signal-repository-to-the-list-of-repositories">2. Add the Signal repository to the list of repositories</h1>
<p>echo &ldquo;Adding the Signal repository to the list of repositories&hellip;&rdquo;
echo &lsquo;deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] <a href="https://updates.signal.org/desktop/apt">https://updates.signal.org/desktop/apt</a> xenial main&rsquo; |<br>
sudo tee /etc/apt/sources.list.d/signal-xenial.list</p>
<h1 id="3-update-the-package-database-and-install-signal">3. Update the package database and install Signal</h1>
<p>echo &ldquo;Updating the package database&hellip;&rdquo;
sudo apt update</p>
<p>echo &ldquo;Installing Signal Desktop&hellip;&rdquo;
sudo apt install -y signal-desktop</p>
<p>echo &ldquo;Signal Desktop installation completed successfully!&rdquo;
```</p>
<h3 id="step-2-make-the-script-executable">Step 2: Make the Script Executable</h3>
<p>Open a terminal and navigate to the directory where the script is saved. Run the following command to make the script executable:</p>
<p>```bash
chmod +x install_signal.sh
```</p>
<h3 id="step-3-execute-the-script">Step 3: Execute the Script</h3>
<p>Run the script with the following command:</p>
<p>```bash
./install_signal.sh
```</p>
<h2 id="troubleshooting">Troubleshooting</h2>
<ul>
<li>Ensure you have a stable internet connection.</li>
<li>Verify that you have administrative (sudo) privileges.</li>
<li>If you encounter any errors, read the error messages carefully and ensure that all steps are followed correctly.</li>
</ul>
<h2 id="additional-information">Additional Information</h2>
<p>For more information about Signal Desktop and its installation process, visit the <a href="https://signal.org/download/">official Signal website</a>.</p>
<hr>
<p><strong>Note:</strong> This script and documentation are intended for users with basic knowledge of using the terminal and running scripts on Linux systems. Always review and understand scripts before executing them on your system.</p>
]]></content>
			<postid> 9561986b864f8e6e2a33b2b1cd10d6df</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Gray&#39;s Peak</title>
			<link>//localhost:1313/en/posts/grays-peak/</link>
			<pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/grays-peak/</guid>
			<description><![CDATA[Treeking Gray's]]></description>
			<content type="html"><![CDATA[<h1 id="grays">Gray&rsquo;s</h1>
<p>Gray&rsquo;s is a rather easy 14&rsquo;er about an hour west of Denver.</p>
<ul>
<li><a href="https://www.14ers.com/php14ers/trailheadsview.php?thparm=fr04">14er Link</a></li>
</ul>
<h2 id="details">Details</h2>
<ul>
<li>Coordinates: 39.66087, -105.78462</li>
<li>Elevation: 11,280'</li>
<li>Trailhead Access: High Clearence Vehicle</li>
<li>Camping: Yeah</li>
<li>Restrooms: Yeah</li>
</ul>
<h2 id="the-approach">The Approach</h2>
<p>I borrowed an SUV. It was a doable drive.  I kept her in first gear and took it slow. There were a few sketchy parts along the way.. but it really wasn&rsquo;t too bad.. at least in the right vehicle. Watch out for the ruts.</p>
<p><img src="./images/rut.jpg" alt="approach"></p>
<h2 id="the-trail-head">The Trail Head</h2>
<p>The trail head is well marked. There is a beautiful bridge over a creek.</p>
<p><img src="./images/1000007000.jpg" alt="bridge"></p>
<h2 id="car-camping">Car Camping</h2>
<p>The parking lot was full by about 4 am.  I stayed in the car the night before.  It dropped down to about 40 F. I had used only a wool blanket to sleep in.. TBH it was chilly.  I had to put on more clothing to sleep well.</p>
<h2 id="gear-list">Gear List</h2>
<p>So I have been following a 7 ish level system for my clothing. It is pretty good.. but I need to start adapting it for my needs.  I carried too much up the mountain yesterday for the conditions.. I could have bivied at a low temp if necessary.. so I am not sure if I overpacked or not. It was just heavy</p>
<h3 id="level-1">Level 1</h3>
<p>Just a normal base layer. Poly top and bottom.  I actually want to change this up to a grid layer for the next approach. I want to modify this by using the grid and a sun hoody as the level 1 system. I am using the Outdoor Research Astro man.. i think&hellip; with a half zip.</p>
<p>I think this will enable me to stay dry and warm. The sun hoody protects me from the sun and most of the wind.</p>
<h3 id="level-2">Level 2</h3>
<p>I use a surplus grid fleece. It is basically a patagonia fleece licensed to the military.. It is good.. and durable. I like it. The one downside to this fleece is that it does not have a hood.</p>
<p>I might experiment with a senchi alpha fleece in the future.</p>
<h3 id="level-3">Level 3</h3>
<p>I did not have to use my level 3 fleece on this trip.  For level 3 I also have a surplus military fleece full zip to fit over the level 2. I seldom need this extra layer. As of yet I have not really had a need for it down to about 40 f.</p>
<h3 id="level-4">Level 4</h3>
<p>I have two level fours.</p>
<ol>
<li>The patagonia something or another nylon shell</li>
<li>The Kor(i think) Air shell.</li>
</ol>
<p>They are pretty much the same thing tbh. I like the patagonia one slightly more because it has a hood. It is great for climbing and for quickly throwing over a level 2 or level 3 when necessary. I carry this in my cross body bag</p>
<h3 id="level-5">Level 5</h3>
<p>My level 5 is an outdoor research smock that  I really like actually. It has a huge kangaroo pouch that can hold just about anything. For an active layer I like it a lot.</p>
<h3 id="level-6">Level 6</h3>
<p>My level 6 is really just a level 5.. For the summer i think it is fine&hellip;. For the winter I should move this down a level.  I use a marmot 1.5 laminate gore tex shell. It is very breathable but supposedly not completely waterproof. I think it is fine as a soft shell&hellip; And probably good enough as a hardshell in all but the most demanding environments.</p>
<h3 id="level-7">Level 7</h3>
<p>For the summer i am using a patagonia nano puff or micro puff synthetic down hoodie. It is pretty good and was nice and toasty during my summer ascent of gray&rsquo;s.</p>
<p>For a more difficult trek I would upgrade to a feathered friends down hoodie/suit. I am not really there yet so I will hold off until necessary.</p>
<h3 id="bivvy">Bivvy</h3>
<p>In addition to these things I carry kinda an emergency bivy system. I have an SOL breathable bivy just in case I need to shelter out. I also carry a pretty heavy duty poncho because it vents and because i can use it as an emergency tent if I have to bivvy for an evening.</p>
<h2 id="improvements-to-make-on-the-loadout">Improvements to make on the loadout</h2>
<p>I think this system was overkill for a summer ascent of Grays. I ended up distributing my shells and my puffy to some member of the crew that did not bring gear. That said.. if shtf I would have been able to survive a bivy situation down to about 15-20 degrees I would say.. maybe a bit lower.. TBH I kind of want to test this out&hellip;</p>
<p>I also need to buy some level 4/5 pants. As in a pair of rain pants or gore tex pants.</p>
<p>If I end up doing something more extreme I will also need to buy a pair of level 7 pants. As of now I am fine with my hiking pants with a level 2 and the down liner.</p>
<h2 id="what-did-i-actually-wear">What Did I Actually Wear</h2>
<p>I was okay in my level 1 and level 2 most of the time.. I added the level 4 at the peak and felt very cozy.</p>
<ul>
<li>
<p>a pair of sun gloves to protect my hands from the wind. This was an absolute must</p>
</li>
<li>
<p>a face gator that was just okay. There are better ones on the market that cover up more of the face and neck. I&rsquo;ll have to buy one of those for my next ascent.</p>
</li>
<li>
<p>Wool/poly Socks</p>
</li>
<li>
<p>Fjallraven surplus pants. So my pants are basically the fjallraven hiking pants wihtout the poly bits. They are some polish surplus I found online. They performed really well. I think a little more flex would have been great.. but i spent like 30 bucks on them. I should look around for actual fjallraven surplus&hellip; i bet they have some on the market</p>
</li>
<li>
<p>Altra lone peaks. They were good.  I want to ;get somethign a little less disposable&hellip; but i&rsquo;m not really sure what is avaialable on the market.  I imagine a barefoot boot made of nylon with a replaceable rubber sole. Something like the old jungle boot but more barefoot style. I want them light and durable.  A replaceable sould might be overkill tbh.. IDK i just want them to not be so disposable. I hate that.</p>
</li>
</ul>
<h2 id="water">Water</h2>
<p>I brough for liters up with me. It was enough. My hike took 8 hours&hellip; it should have taken about 3. That said.. i was plenty hydrated with 4 liters of water.</p>
<h2 id="food">Food</h2>
<p>I brough up about 3000 calories just to be safe. Of course it was overkill but I brought it up anyways.</p>
<ul>
<li>Dates</li>
<li>Peanut Butter and Honey Burritos</li>
<li>Almonds</li>
<li>Cliff bars</li>
</ul>
<h2 id="the-experience">The Experience</h2>
<h3 id="a-proposal">A Proposal</h3>
<p>I think this was a bit of a special one because my friend proposed to his now fiance on this trip.  We had to encourage her to the top, but she did well&hellip; and she said yes.</p>
<h3 id="the-actual-hike">The Actual Hike</h3>
<p>Gray&rsquo;s peak was a fairly easy approach I would say. I mean its a 14&rsquo;er and should be taken seriously.. but the terrain was not horribly difficult. There were no scrambles and the switchbacks offered plenty of spots to rest on level ground.</p>
<h3 id="the-wildlife">The wildlife</h3>
<p>Gray&rsquo;s is a very popoular peak. There are goats and marmots that interact with hikers.  I also encountered a brown capped rosy finch on the ascent&hellip; A rare bird.</p>
<h3 id="the-weather">The Weather</h3>
<p>Sun and wind exposure.. like anything alpine.. are the primary concerns. I cover up all my skin for this reason.I bring glasses as well. It rained slightly during the afternoon.. but there was no real concern.</p>
<h2 id="photos">Photos</h2>
<p><img src="./images/1000006962.jpg" alt="1"></p>
<p><img src="./images/1000006973.jpg" alt="2"></p>
<p><img src="./images/1000006996.jpg" alt="3"></p>
<p><img src="./images/PXL_20240707_212913208.MP.jpg" alt="4"></p>
]]></content>
			<postid> 1f61827433358405f28ec9cc6a7ed499</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Automate Posting Hugo Blog to Social Sites (with a db)</title>
			<link>//localhost:1313/en/posts/hugo-rss-mysql-update/</link>
			<pubDate>Sun, 30 Jun 2024 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/hugo-rss-mysql-update/</guid>
			<description><![CDATA[How To automate posting to social sites]]></description>
			<content type="html"><![CDATA[<h2 id="background">Background</h2>
<p>In the previous few posts I detailed my progress in automating a site.  I am going about this by using an rss scraper to post new posts to social.</p>
<p>I had initally thought about doing this really naively, but I want a database. It doesn&rsquo;t feel right without using one. I am somewhat upset with myself, because I am basically just recreating wordpress&hellip; but so it goes.</p>
<h3 id="previous-posts-in-this-series">Previous posts in this series</h3>
<ol>
<li><a href="https://jnapolitano.com/en/posts/hugo-social-publisher/">part 1</a></li>
<li><a href="https://jnapolitano.com/en/posts/python-rss-reader/">part 2</a></li>
<li><a href="https://jnapolitano.com/en/posts/mysql-install-buntu/">part 3</a></li>
<li><a href="https://jnapolitano.com/en/posts/mysql-config/">part 4</a></li>
<li><a href="https://jnapolitano.com/en/posts/hugo-rss-setup/">part 5</a></li>
</ol>
<h3 id="expand-a-previous-script">Expand a previous script</h3>
<p>In <a href="https://jnapolitano.com/en/posts/python-rss-reader/">a previous post</a> I wrote about how to scan an rss feed on my personal site. In this post I will expand upon that to update some tables in a mysql database that I generated in <a href="https://jnapolitano.com/en/posts/mysql-config/">this post</a></p>
<h2 id="add-support-for-mysql">Add support for mysql</h2>
<h3 id="mysql-python-connector-manual">MySQL python connector manual</h3>
<ul>
<li><a href="https://dev.mysql.com/doc/connector-python/en/connector-python-introduction.html">https://dev.mysql.com/doc/connector-python/en/connector-python-introduction.html</a></li>
</ul>
<h3 id="instal-connector-with-pip">Instal connector with pip</h3>
<p>I created a virtual enviornment prior to starting this exercise. Review the <a href="https://virtualenv.pypa.io/en/latest/">virtualenv documentation</a> for more information.  The source below is my path to thevirtualenviornment&rsquo;s bin.</p>
<p>I am install the connector and the xdev extensions. TBH I do not know what the extensions are but i&rsquo;m just going to go ahead and install them now before i write a script that ends up needing those extra libs.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">source</span> ~/venvs/feedparser/bin/activate <span class="o">&amp;&amp;</span> pip install mysql-connector-python <span class="o">&amp;&amp;</span> pip install mysqlx-connector-python
</span></span></code></pre></div><h3 id="install-python-dotenv-with-pip">Install python-dotenv with pip</h3>
<p>I plan to containerize this later. Using .env files formt he start will be a good way of making this portable later.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pip install python-dotenv
</span></span></code></pre></div><h3 id="create-a-env-file-with-your-environmental-variables">Create a .env file with your environmental variables</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">touch .env
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim .env
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">DB_USER</span><span class="p">=</span><span class="nx">cobra</span> 
</span></span><span class="line"><span class="cl"><span class="nx">DB_PASSWORD</span><span class="p">=</span><span class="nx">password</span>
</span></span><span class="line"><span class="cl"><span class="nx">DB_HOST</span><span class="p">=</span><span class="m">127</span>.<span class="m">0</span>.<span class="m">0</span>.<span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="nx">DB_NAME</span><span class="p">=</span><span class="nx">posts</span>
</span></span></code></pre></div><h3 id="create-a-utility-class-to-be-able-to-reuse-this-code">Create a utility class to be able to reuse this code</h3>
<h4 id="connector-method-reference">connector method reference</h4>
<p><code>https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlconnection.html</code></p>
<p>Something like below is a good way to get started.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">mysql.connector</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mysql.connector</span> <span class="kn">import</span> <span class="n">Error</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MySQLConnector</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;DB_USER&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;DB_PASSWORD&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">host</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;DB_HOST&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;DB_NAME&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">connection</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">connection</span> <span class="o">=</span> <span class="n">mysql</span><span class="o">.</span><span class="n">connector</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">user</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">user</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">password</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">password</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">host</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">host</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">database</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">database</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">is_connected</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Connected to MySQL database&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">Error</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error while connecting to MySQL: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">disconnect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">is_connected</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;MySQL connection is closed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Usage example</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">load_dotenv</span><span class="p">()</span>  <span class="c1"># Load environment variables from .env file</span>
</span></span><span class="line"><span class="cl">    <span class="n">db</span> <span class="o">=</span> <span class="n">MySQLConnector</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">db</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">db</span><span class="o">.</span><span class="n">disconnect</span><span class="p">()</span>
</span></span></code></pre></div><h3 id="verify-that-your-server-is-running">Verify that your server is running</h3>
<p>run..on most *nix-ish systems</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">systemctl status mysql
</span></span></code></pre></div><h3 id="run-your-test-program">Run your test program</h3>
<blockquote>
<blockquote>
<p>Note do not call your class mysql.py&hellip; it will overwride the library and fail to import.</p>
</blockquote>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">python db-connector.py
</span></span></code></pre></div><h4 id="output">Output</h4>
<p>The output should look somethign like this&hellip;</p>
<p><img src="./images/test-output.png" alt="successful-test"></p>
]]></content>
			<postid> 57263d501cf48daefc0c643dc4793a48</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Configure Hugo XML Output for RSS Feed</title>
			<link>//localhost:1313/en/posts/hugo-rss-setup/</link>
			<pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/hugo-rss-setup/</guid>
			<description><![CDATA[Hugo Custom RSS for my reader]]></description>
			<content type="html"><![CDATA[<h2 id="why">Why</h2>
<p>I have a mysql db that will be used to store values read from the rss feed of my hugo site. I need some add some keys to help with organization</p>
<h3 id="parts-of-this-series">Parts of this series</h3>
<ol>
<li><a href="https://jnapolitano.com/en/posts/hugo-social-publisher/">part 1</a></li>
<li><a href="https://jnapolitano.com/en/posts/python-rss-reader/">part 2</a></li>
<li><a href="https://jnapolitano.com/en/posts/mysql-install-buntu/">part 3</a></li>
<li><a href="https://jnapolitano.com/en/posts/mysql-config/">part 4</a></li>
</ol>
<h2 id="resources">Resources</h2>
<ul>
<li><a href="https://gohugo.io/content-management/page-resources/">Hugo Page Resources</a></li>
<li><a href="https://gohugo.io/methods/page/params/">Hugo Page Params</a></li>
<li><a href="https://gohugo.io/templates/rss/">Hugo RSS Templates</a></li>
</ul>
<h2 id="rss-config">RSS Config</h2>
<h3 id="copy-over-the-postsrssxml-file-from-your-theme">Copy over the posts/rss.xml file from your theme</h3>
<p>From hugo root you would do something like&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mkdir layouts <span class="o">&amp;&amp;</span> mkdir layouts/posts <span class="o">&amp;&amp;</span> cp themes/<span class="o">[</span>theme<span class="o">]</span>/layouts/posts/index.xml
</span></span></code></pre></div><h3 id="modify-the-rssxml-file">Modify the rss.xml file</h3>
<h4 id="add-post-id">Add post id</h4>
<p>Hugo supports a hash of the files path. It is not always unique&hellip; but for my purposes it will likely be good enough.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;postid&gt;</span> {{ .File.UniqueID }}<span class="nt">&lt;/postid&gt;</span>
</span></span></code></pre></div><h4 id="add-the-authors-name-when-defined">Add the author&rsquo;s name when defined</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl">{{ with .Site.Params.author.name }}<span class="nt">&lt;author_name&gt;</span>{{.}}<span class="nt">&lt;/author_name&gt;</span>{{end}}
</span></span></code></pre></div><h4 id="add-the-author-email-when-defined">Add the author email when defined</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      {{ with .Site.Params.author.email }}<span class="nt">&lt;author_email&gt;</span>{{.}}<span class="nt">&lt;/author_email&gt;</span>{{end}}
</span></span></code></pre></div><h4 id="add-a-hash-of-the-author-email-when-defined">Add a hash of the author email when defined</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl">{{ with .Site.Params.author.email }}<span class="nt">&lt;author_id&gt;</span>{{sha256 .}}<span class="nt">&lt;/author_id&gt;</span>{{end}}
</span></span></code></pre></div><h4 id="the-entire-file">The entire file</h4>
<p>The most up to date rss file is found at <a href="https://github.com/justin-napolitano/jnapolitano.com/blob/main/layouts/posts/rss.xml">this github link</a></p>
]]></content>
			<postid> 919e738a843baf19044479d6451528eb</postid>
			<author></author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Install MySQL Server on Ubuntu</title>
			<link>//localhost:1313/en/posts/mysql-install-buntu/</link>
			<pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/mysql-install-buntu/</guid>
			<description><![CDATA[MYSQL buntu]]></description>
			<content type="html"><![CDATA[<h2 id="why">Why</h2>
<ol>
<li>I am working on an autoposting tool for social sites.</li>
<li>in order to complete that i want a db to log the metadata of my posts</li>
</ol>
<h3 id="parts-of-this-series">Parts of this series</h3>
<ol>
<li><a href="https://jnapolitano.com/en/posts/hugo-social-publisher/">part 1</a></li>
<li><a href="https://jnapolitano.com/en/posts/python-rss-reader/">part 2</a></li>
</ol>
<h2 id="mysql-resources">MYSQL Resources</h2>
<ul>
<li><a href="https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/">APT install guide</a></li>
<li><a href="https://dev.mysql.com/doc/mysql-getting-started/en/#mysql-getting-started-installing">MYSQL config guide</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.4/en/postinstallation.html">Post Install configuration</a></li>
</ul>
<h2 id="install">Install</h2>
<h3 id="download-the-config-files">Download the config files</h3>
<p>go to this link and download the script.</p>
<p><code>https://dev.mysql.com/downloads/repo/apt/</code></p>
<h3 id="install-the-release-package-with-dpkg">Install the release package with dpkg</h3>
<blockquote>
<p>note that the w.x.y.z will change according to the release package</p>
</blockquote>
<p>run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo dpkg -i mysql-apt-config_w.x.y-z_all.deb
</span></span></code></pre></div><p>in my case i ran</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo dpkg -i mysql-apt-config_0.8.30-1_all.deb 
</span></span></code></pre></div><h3 id="update-apt-and-install">Update apt and install</h3>
<p>so the package above just added the mysql repository to the apt package manager. to actually install we will run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get update <span class="o">&amp;&amp;</span>  sudo apt-get install mysql-server
</span></span></code></pre></div><h3 id="start-mysql">Start mysql</h3>
<p>mysql will likely alrady be running post install. Check the status by running</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">systemctl status mysql
</span></span></code></pre></div>]]></content>
			<postid> 450ccef4af7ea020c1c1307e54be206d</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Using GitHub Template Repositories to Automate Script Deployment</title>
			<link>//localhost:1313/en/posts/create_a_github_template_repo/</link>
			<pubDate>Thu, 27 Jun 2024 12:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/create_a_github_template_repo/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<h1 id="using-github-template-repositories-to-automate-script-deployment">Using GitHub Template Repositories to Automate Script Deployment</h1>
<p>Managing multiple repositories can be a challenge, especially when you need to ensure that each one includes certain common scripts or configurations. GitHub&rsquo;s template repositories feature can help streamline this process. In this post, we&rsquo;ll walk through how to use a template repository to automatically include a <code>gh_submodule_sync.sh</code> script in every new repository you create.</p>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li><strong>GitHub CLI</strong>: Ensure you have the GitHub CLI installed. You can find installation instructions <a href="https://cli.github.com/">here</a>.</li>
<li><strong>Existing Repository</strong>: We&rsquo;ll use an existing repository <code>gh_submodule_sync</code> as the template.</li>
</ul>
<h2 id="step-1-clone-the-repository">Step 1: Clone the Repository</h2>
<p>First, clone your existing repository:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone https://github.com/justin-napolitano/gh_submodule_sync.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> gh_submodule_sync
</span></span></code></pre></div><h2 id="step-2-mark-the-repository-as-a-template">Step 2: Mark the Repository as a Template</h2>
<p>Next, mark your repository as a template using the GitHub CLI:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">gh api -X PATCH /repos/justin-napolitano/gh_submodule_sync -f <span class="nv">is_template</span><span class="o">=</span><span class="nb">true</span>
</span></span></code></pre></div><p>This command sets the <code>is_template</code> flag to <code>true</code>, designating your repository as a template.</p>
<h2 id="step-3-create-new-repositories-from-the-template">Step 3: Create New Repositories from the Template</h2>
<p>You can now create new repositories using your template. Here&rsquo;s how to do it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">gh repo create new-repo --template<span class="o">=</span>justin-napolitano/gh_submodule_sync --public --confirm
</span></span></code></pre></div><p>Replace <code>new-repo</code> with the name of your new repository. This command creates a new repository based on your template.</p>
<h2 id="step-4-clone-the-new-repository">Step 4: Clone the New Repository</h2>
<p>Finally, clone your new repository to your local machine:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone https://github.com/justin-napolitano/new-repo.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> new-repo
</span></span></code></pre></div><p>Your new repository will include all the contents of the template repository, including the <code>gh_submodule_sync.sh</code> script.</p>
]]></content>
			<postid> 963e3fd9d74000e9b1c2c33f3ed7ce56</postid>
			<author></author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Configure mysql server on ubuntu</title>
			<link>//localhost:1313/en/posts/mysql-config/</link>
			<pubDate>Thu, 27 Jun 2024 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/mysql-config/</guid>
			<description><![CDATA[MYSQL config buntu]]></description>
			<content type="html"><![CDATA[<h2 id="why">Why</h2>
<p>I installed mysql in the previous post. Now I need to setup users, create a db, and create a table.</p>
<h3 id="parts-of-this-series">Parts of this series</h3>
<ol>
<li><a href="https://jnapolitano.com/en/posts/hugo-social-publisher/">part 1</a></li>
<li><a href="https://jnapolitano.com/en/posts/python-rss-reader/">part 2</a></li>
<li><a href="https://jnapolitano.com/en/posts/mysql-install-buntu/">part 3</a></li>
</ol>
<h2 id="mysql-resources">MYSQL Resources</h2>
<ul>
<li><a href="https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/">APT install guide</a></li>
<li><a href="https://dev.mysql.com/doc/mysql-getting-started/en/#mysql-getting-started-installing">MYSQL config guide</a></li>
</ul>
<h2 id="create-a-new-user">Create a new user</h2>
<h3 id="login-as-root">Login as Root</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mysql -u root -p
</span></span></code></pre></div><h3 id="create-some-users">Create some users</h3>
<p>In my case I will create 4 users accounts.</p>
<ol>
<li>Cobra@localhost</li>
<li><a href="mailto:Cobra@jnapolitano.com">Cobra@jnapolitano.com</a></li>
<li>admin@localhost</li>
<li>dummy@localhost</li>
</ol>
<p><code>dummy is just used to test service connection and has not access grants or writes</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">USER</span><span class="w"> </span><span class="s1">&#39;cobra&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">IDENTIFIED</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="s1">&#39;password&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GRANT</span><span class="w"> </span><span class="k">ALL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">ON</span><span class="w"> </span><span class="o">*</span><span class="p">.</span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">TO</span><span class="w"> </span><span class="s1">&#39;cobra&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">WITH</span><span class="w"> </span><span class="k">GRANT</span><span class="w"> </span><span class="k">OPTION</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">USER</span><span class="w"> </span><span class="s1">&#39;admin&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">IDENTIFIED</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="s1">&#39;password&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GRANT</span><span class="w"> </span><span class="n">RELOAD</span><span class="p">,</span><span class="n">PROCESS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">ON</span><span class="w"> </span><span class="o">*</span><span class="p">.</span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">TO</span><span class="w"> </span><span class="s1">&#39;admin&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">USER</span><span class="w"> </span><span class="s1">&#39;dummy&#39;</span><span class="o">@</span><span class="s1">&#39;localhost&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>ACTUALLY enter a password above. Do not use password as the user password'</p>
</blockquote>
<h3 id="logout-of-root">Logout of root</h3>
<p>enter <code>EXIT</code> in terminal</p>
<h3 id="login-as-your-user">Login as your user</h3>
<p>In my case I pass <code>mysql -u cobra -p</code> back to the terminal.</p>
<h2 id="create-a-db">Create a DB</h2>
<p>I will create a db for my personal website. The first command to run is</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="n">jnapolitano</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="use-your-new-db">Use your new db</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">USE</span><span class="w"> </span><span class="n">jnapolitano</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="create-the-posts-table">Create the posts table</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">posts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">id</span><span class="w">                    </span><span class="nb">BINARY</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="p">(</span><span class="n">UUID_TO_BIN</span><span class="p">(</span><span class="n">UUID</span><span class="p">())),</span><span class="w">  </span><span class="o">#</span><span class="w"> </span><span class="k">Unique</span><span class="w"> </span><span class="n">ID</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">record</span><span class="p">.</span><span class="w"> </span><span class="n">This</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">smallish</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">very</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="n">performance</span><span class="w"> </span><span class="n">db</span><span class="w"> </span><span class="n">this</span><span class="w"> </span><span class="n">should</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">fine</span><span class="p">.</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">author</span><span class="w">                </span><span class="nb">BINARY</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span><span class="w">                                         </span><span class="o">#</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="n">author</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">publish_date</span><span class="w">          </span><span class="nb">DATE</span><span class="p">,</span><span class="w">                                               </span><span class="o">#</span><span class="w"> </span><span class="n">publish</span><span class="w"> </span><span class="nb">date</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">description</span><span class="w">           </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">150</span><span class="p">),</span><span class="w">                                       </span><span class="o">#</span><span class="w"> </span><span class="n">post</span><span class="w"> </span><span class="n">description</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">link</span><span class="w">                  </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">150</span><span class="p">),</span><span class="w">                                       </span><span class="o">#</span><span class="w"> </span><span class="n">Link</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="n">post</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">title</span><span class="w">                 </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">150</span><span class="p">),</span><span class="w">                                       </span><span class="o">#</span><span class="w"> </span><span class="n">title</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="n">hte</span><span class="w"> </span><span class="n">post</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w">           </span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="w">                                                </span><span class="o">#</span><span class="w"> </span><span class="n">Make</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><h3 id="create-the-authors-table">Create the authors table</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">authors</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">id</span><span class="w">                    </span><span class="nb">BINARY</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="p">(</span><span class="n">UUID_TO_BIN</span><span class="p">(</span><span class="n">UUID</span><span class="p">())),</span><span class="w">  </span><span class="o">#</span><span class="w"> </span><span class="k">Unique</span><span class="w"> </span><span class="n">ID</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">record</span><span class="p">.</span><span class="w"> </span><span class="n">This</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">smallish</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">very</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="n">performance</span><span class="w"> </span><span class="n">db</span><span class="w"> </span><span class="n">this</span><span class="w"> </span><span class="n">should</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">fine</span><span class="p">.</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">name</span><span class="w">                  </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">150</span><span class="p">),</span><span class="w">                                      </span><span class="o">#</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="n">author</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w">           </span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="w">                                                </span><span class="o">#</span><span class="w"> </span><span class="n">Make</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><h3 id="create-the-mastodon-post-table">Create the mastodon post table</h3>
<p>I will be adding support for other systems. I am starting with mastodon.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">mastodon_posts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">id</span><span class="w">                    </span><span class="nb">BINARY</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="p">(</span><span class="n">UUID_TO_BIN</span><span class="p">(</span><span class="n">UUID</span><span class="p">())),</span><span class="w">  </span><span class="o">#</span><span class="w"> </span><span class="k">Unique</span><span class="w"> </span><span class="n">ID</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">record</span><span class="p">.</span><span class="w"> </span><span class="n">This</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">smallish</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="n">very</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="n">performance</span><span class="w"> </span><span class="n">db</span><span class="w"> </span><span class="n">this</span><span class="w"> </span><span class="n">should</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">fine</span><span class="p">.</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">post_id</span><span class="w">               </span><span class="nb">BINARY</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span><span class="w">                                         </span><span class="o">#</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="n">author</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">mastodon_post</span><span class="w">         </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">150</span><span class="p">),</span><span class="w">                                       </span><span class="o">#</span><span class="w"> </span><span class="n">THE</span><span class="w"> </span><span class="n">POST</span><span class="w"> </span><span class="n">ID</span><span class="p">..</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="n">it</span><span class="w"> </span><span class="k">returns</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w">           </span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="w">                                                </span><span class="o">#</span><span class="w"> </span><span class="n">Make</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div>]]></content>
			<postid> 6d2e65c78de495ec2761ef43463243d6</postid>
			<author></author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Sync Gh Submodules Across a Super Project</title>
			<link>//localhost:1313/en/posts/gh_submodule_sync/</link>
			<pubDate>Thu, 27 Jun 2024 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/gh_submodule_sync/</guid>
			<description><![CDATA[Make documentation easier. Use modules for each script]]></description>
			<content type="html"><![CDATA[<!-- raw HTML omitted -->
<h2 id="overview">Overview</h2>
<p>This script is designed to initialize and update all submodules in a GitHub repository to the latest commits from their respective remote repositories. It ensures that all submodules, including nested submodules, are synchronized with their remote counterparts.</p>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>Ensure that you have Git installed on your system.</li>
<li>Ensure that you have cloned the repository containing the submodules.</li>
</ul>
<h2 id="usage">Usage</h2>
<ol>
<li>Save the script to a file, for example, <code>sync_submodules.sh</code>.</li>
<li>Make the script executable:
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">chmod +x sync_submodules.sh
</span></span></code></pre></div></li>
<li>Run the script:
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">./sync_submodules.sh
</span></span></code></pre></div></li>
</ol>
<h2 id="script-sync_submodulessh">Script: sync_submodules.sh</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Script to initialize and update all submodules to the latest commits from their remote repositories</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Check if the script is run from the root of the repository</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> ! -f .gitmodules <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;Error: .gitmodules file not found. Please run this script from the root of your repository.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Initialize submodules (if not already initialized)</span>
</span></span><span class="line"><span class="cl">git submodule init
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Update all submodules to the latest commits from their remote repositories</span>
</span></span><span class="line"><span class="cl">git submodule update --init --recursive --remote
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Check if the submodule update was successful</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;Submodules have been successfully updated.&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;Error: Failed to update submodules.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></div><h2 id="explanation">Explanation</h2>
<ul>
<li>
<p><strong>Initialization Check</strong>:</p>
<ul>
<li>The script first checks if it is being run from the root of the repository by verifying the existence of the <code>.gitmodules</code> file.</li>
<li>If the <code>.gitmodules</code> file is not found, the script exits with an error message.</li>
</ul>
</li>
<li>
<p><strong>Submodule Initialization</strong>:</p>
<ul>
<li>The <code>git submodule init</code> command initializes the submodules if they haven&rsquo;t been initialized yet.</li>
</ul>
</li>
<li>
<p><strong>Submodule Update</strong>:</p>
<ul>
<li>The <code>git submodule update --init --recursive --remote</code> command updates all submodules to the latest commits from their remote repositories.</li>
<li>The <code>--recursive</code> option ensures that any nested submodules are also updated.</li>
<li>The <code>--remote</code> option fetches the latest commits from the submodules&rsquo; remote repositories.</li>
</ul>
</li>
<li>
<p><strong>Success/Failure Check</strong>:</p>
<ul>
<li>The script checks the exit status of the <code>git submodule update</code> command to determine if the update was successful.</li>
<li>If successful, a success message is displayed.</li>
<li>If the update fails, an error message is displayed, and the script exits with an error code.</li>
</ul>
</li>
</ul>
<h2 id="notes">Notes</h2>
<ul>
<li>This script should be run from the root directory of your Git repository.</li>
<li>Ensure you have the necessary permissions and network access to fetch updates from the remote repositories.</li>
</ul>
]]></content>
			<postid> c8d81718277290492cd6844b83dabeb6</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Library of Congress Prod-ifier</title>
			<link>//localhost:1313/en/posts/loc-prodifier/</link>
			<pubDate>Thu, 20 Jun 2024 22:36:34 -0500</pubDate>
			<guid>//localhost:1313/en/posts/loc-prodifier/</guid>
			<description><![CDATA[Create a modular job to run in parallel to prod-ify a db ]]></description>
			<content type="html"><![CDATA[<h1 id="loc-prodifier">Loc Prodifier</h1>
<h2 id="overview">Overview</h2>
<p>Loc Prodifier is a Python script designed to merge data from staging tables into production tables in Google BigQuery without inserting duplicate records. It uses the Google Cloud BigQuery Python client and can be run both locally and in Google Cloud Run. The script is designed to be flexible and scalable, allowing for parallel execution across multiple tables using Google Cloud Workflows.</p>
<h2 id="features">Features</h2>
<ul>
<li>Merges data from staging tables into production tables without duplicates.</li>
<li>Supports parallel execution for multiple tables.</li>
<li>Can be run locally with custom credentials or deployed in Google Cloud Run.</li>
<li>Easily configurable through command-line arguments.</li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>Python 3.7 or higher</li>
<li>Google Cloud SDK</li>
<li>Docker</li>
<li>A Google Cloud project with BigQuery and Cloud Run enabled</li>
<li>Google Artifact Registry enabled in your Google Cloud project</li>
</ul>
<h2 id="installation">Installation</h2>
<ol>
<li>Clone the repository:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone https://github.com/justin-napolitano/loc_prodifier.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> loc_prodifier
</span></span></code></pre></div><ol start="2">
<li>Install the required Python packages:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">pip install -r requirements.txt
</span></span></code></pre></div><h2 id="usage">Usage</h2>
<h3 id="running-locally">Running Locally</h3>
<p>To run the script locally, ensure you have your Google Cloud credentials JSON file and pass the required arguments:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python your_script.py --dataset_id your_dataset_id --staging_table_id your_staging_table_id --prod_table_id your_prod_table_id --local
</span></span></code></pre></div><h3 id="running-in-docker">Running in Docker</h3>
<ol>
<li>Build the Docker image:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker build -t my-bigquery-script .
</span></span></code></pre></div><ol start="2">
<li>Run the Docker container:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker run --rm my-bigquery-script --dataset_id your_dataset_id --staging_table_id your_staging_table_id --prod_table_id your_prod_table_id --local
</span></span></code></pre></div><h3 id="deploying-to-google-cloud-run">Deploying to Google Cloud Run</h3>
<ol>
<li>Create the `cloudrun.yaml` file:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Step 1: Create the Artifact Registry repository if it doesn&#39;t exist</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;gcr.io/cloud-builders/gcloud&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entrypoint</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;bash&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;-c&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        if ! gcloud artifacts repositories describe python-loc-prodifier --location=us-west2 &gt; /dev/null 2&gt;&amp;1; then
</span></span></span><span class="line"><span class="cl"><span class="sd">          gcloud artifacts repositories create python-loc-prodifier --repository-format=docker --location=us-west2
</span></span></span><span class="line"><span class="cl"><span class="sd">        else
</span></span></span><span class="line"><span class="cl"><span class="sd">          echo &#34;Repository python-loc-prodifier already exists&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">        fi</span><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Step 2: Build the Docker image</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;gcr.io/cloud-builders/docker&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;build&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;-t&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;us-west2-docker.pkg.dev/smart-axis-421517/python-loc-prodifier/python-loc-prodifier:dev&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;.&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Step 3: Push the Docker image to Artifact Registry</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;gcr.io/cloud-builders/docker&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s1">&#39;push&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;us-west2-docker.pkg.dev/smart-axis-421517/python-loc-prodifier/python-loc-prodifier:dev&#39;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Step 4: Create the Cloud Run job</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;gcr.io/cloud-builders/gcloud&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s1">&#39;run&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;jobs&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;create&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;python-loc-prodifier-job&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s1">&#39;--image&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;us-west2-docker.pkg.dev/smart-axis-421517/python-loc-prodifier/python-loc-prodifier:dev&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="s1">&#39;--region&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;us-west2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">images</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="s1">&#39;us-west2-docker.pkg.dev/smart-axis-421517/python-loc-prodifier/python-loc-prodifier:dev&#39;</span><span class="w">
</span></span></span></code></pre></div><ol start="2">
<li>Submit the build:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">gcloud builds submit --config cloudrun.yaml .
</span></span></code></pre></div><ol start="3">
<li>Execute the Cloud Run job:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">gcloud run <span class="nb">jobs</span> execute python-loc-prodifier-job --region us-west2
</span></span></code></pre></div><ol start="4">
<li>Check logs for job execution:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">gcloud logging <span class="nb">read</span> <span class="s2">&#34;resource.type=cloud_run_job AND resource.labels.job_name=python-loc-prodifier-job&#34;</span> --limit <span class="m">50</span>
</span></span></code></pre></div><h3 id="running-with-google-cloud-workflows">Running with Google Cloud Workflows</h3>
<p>To execute the script for multiple tables in parallel using Google Cloud Workflows:</p>
<ol>
<li>Create the `workflow.yaml` file:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">main</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">params</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">dataset_id, tables, staging_table_suffix, prod_table_suffix]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">parallel</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">parallel_task</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">call</span><span class="p">:</span><span class="w"> </span><span class="l">http.post</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://your-region-run.googleapis.com/v1/projects/your_project_id/locations/your-region/services/my-bigquery-script:run&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">headers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">Authorization</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Bearer $(ref(auth.access_token))&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">body</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">dataset_id</span><span class="p">:</span><span class="w"> </span><span class="l">${dataset_id}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">staging_table_id</span><span class="p">:</span><span class="w"> </span><span class="l">${table}.staging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">prod_table_id</span><span class="p">:</span><span class="w"> </span><span class="l">${table}.prod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">each</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">table</span><span class="p">:</span><span class="w"> </span><span class="l">${tables}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">return</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Workflow executed&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">auth</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">get_token</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">call</span><span class="p">:</span><span class="w"> </span><span class="l">google.auth.access_token</span><span class="w">
</span></span></span></code></pre></div><ol start="2">
<li>Deploy the workflow:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">gcloud workflows deploy my-bigquery-workflow --source<span class="o">=</span>workflow.yaml --location<span class="o">=</span>your-region
</span></span></code></pre></div><ol start="3">
<li>Execute the workflow:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">gcloud workflows execute my-bigquery-workflow --location<span class="o">=</span>your-region --data<span class="o">=</span><span class="s1">&#39;{
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#34;dataset_id&#34;: &#34;your_dataset_id&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#34;tables&#34;: [&#34;table1&#34;, &#34;table2&#34;, &#34;table3&#34;],
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#34;staging_table_suffix&#34;: &#34;staging&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s1">  &#34;prod_table_suffix&#34;: &#34;prod&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">}&#39;</span>
</span></span></code></pre></div><h2 id="license">License</h2>
<p>This project is licensed under the MIT License. See the <a href="LICENSE">LICENSE</a> file for details.</p>
<h2 id="acknowledgments">Acknowledgments</h2>
<ul>
<li><a href="https://cloud.google.com/bigquery">Google Cloud BigQuery</a></li>
<li><a href="https://cloud.google.com/run">Google Cloud Run</a></li>
<li><a href="https://cloud.google.com/workflows">Google Cloud Workflows</a></li>
</ul>
]]></content>
			<postid> 4ccfea730d22f2d0159567700644636d</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Automate Posting Hugo Blog to Social Sites...Second Attempt</title>
			<link>//localhost:1313/en/posts/rss-reader/</link>
			<pubDate>Sat, 15 Jun 2024 22:36:34 -0500</pubDate>
			<guid>//localhost:1313/en/posts/rss-reader/</guid>
			<description><![CDATA[How To automate posting to social sites]]></description>
			<content type="html"><![CDATA[<h2 id="thoughts-on-this-second-pass">Thoughts on This Second Pass</h2>
<ol>
<li>I will create a script that parses the sites rss feed&hellip;</li>
<li>it will then traverse the xml tree entries&hellip;</li>
<li>if a date is newer than the last publish date&hellip;</li>
<li>publish that post&hellip;</li>
</ol>
<p>I am still thinking through how to publish. I will likely write a monolithic script here, but ideally I would write an api or a batch processor to handle this in some way. I am thinking.</p>
<h2 id="create-a-script-that-parses-my-sites-rss-feed">Create a Script that Parses my Sites RSS Feed</h2>
<p>Pull last run date from a local file.. or from a bucket if running on the cloud.. I&rsquo;ll update this later</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;last_run.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">epoch</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># convert to integer</span>
</span></span><span class="line"><span class="cl"><span class="n">epoch</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">epoch</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="parse-the-rss-feed">Parse the rss feed</h3>
<p>Something like&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">feedparser</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">NewsFeed</span> <span class="o">=</span> <span class="n">feedparser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&#34;https://jnapolitano.com/index.xml&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">NewsFeed</span><span class="o">.</span><span class="n">entries</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">entry</span><span class="o">.</span><span class="n">published</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">raise</span> <span class="n">e</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># entry is returned in the following format and needs to be parsed into epoch</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Wed, 12 Jun 2024 00:00:00 +0000</span>
</span></span></code></pre></div><h3 id="convert-the-returned-date-to-epoch">Convert the returned date to epoch</h3>
<p>the given format is
<code>Wed, 12 Jun 2024 00:00:00 +0000</code></p>
<p>I&rsquo;ll have to conver that to epoch for a point of comparison. Some code below&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># The given date string</span>
</span></span><span class="line"><span class="cl"><span class="n">date_str</span> <span class="o">=</span> <span class="s2">&#34;Wed, 12 Jun 2024 00:00:00 +0000&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Define the format of the date string</span>
</span></span><span class="line"><span class="cl"><span class="n">date_format</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">%a</span><span class="s2">, </span><span class="si">%d</span><span class="s2"> %b %Y %H:%M:%S %z&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Convert the date string to a datetime object</span>
</span></span><span class="line"><span class="cl"><span class="n">dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">date_str</span><span class="p">,</span> <span class="n">date_format</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Convert the datetime object to a timestamp (epoch time)</span>
</span></span><span class="line"><span class="cl"><span class="n">epoch_time</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">timestamp</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">epoch_time</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="compare-the-returned-date-to-the-last-run-date">Compare the returned date to the last run date</h3>
<p>This is the really important step. I am currently just printing true&hellip; but in the next post i will write a script that actually publishes the information to socials.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">publish_date_epoch</span> <span class="o">&gt;</span> <span class="n">last_run_epoch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="write-latest-to-file-when-traversal-is-complete">Write latest to file when traversal is complete</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">write_current_dt_to_file</span><span class="p">(</span><span class="n">file_name</span> <span class="o">=</span> <span class="s2">&#34;last_run.txt&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Get the current epoch time</span>
</span></span><span class="line"><span class="cl">        <span class="n">current_epoch_time</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Write the current epoch time to the file</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">current_epoch_time</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="n">e</span>
</span></span></code></pre></div><h3 id="putting-it-all-together">Putting it all together</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># convert to integer</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_last_run</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;last_run.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">epoch</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">epoch</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">epoch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">epoch</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="n">e</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_news_feed</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">NewsFeed</span> <span class="o">=</span> <span class="n">feedparser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&#34;https://jnapolitano.com/index.xml&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">NewsFeed</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="n">e</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">convert_to_epoch</span><span class="p">(</span><span class="n">given</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">        <span class="c1"># The given date string</span>
</span></span><span class="line"><span class="cl">        <span class="n">date_str</span> <span class="o">=</span> <span class="n">given</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Define the format of the date string</span>
</span></span><span class="line"><span class="cl">        <span class="n">date_format</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">%a</span><span class="s2">, </span><span class="si">%d</span><span class="s2"> %b %Y %H:%M:%S %z&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Convert the date string to a datetime object</span>
</span></span><span class="line"><span class="cl">        <span class="n">dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">date_str</span><span class="p">,</span> <span class="n">date_format</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Convert the datetime object to a timestamp (epoch time)</span>
</span></span><span class="line"><span class="cl">        <span class="n">epoch_time</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">timestamp</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">epoch_time</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="n">e</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">write_current_dt_to_file</span><span class="p">(</span><span class="n">file_name</span> <span class="o">=</span> <span class="s2">&#34;last_run.txt&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Get the current epoch time</span>
</span></span><span class="line"><span class="cl">        <span class="n">current_epoch_time</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Write the current epoch time to the file</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">current_epoch_time</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="n">e</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">last_run_epoch</span> <span class="o">=</span> <span class="n">get_last_run</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">NewsFeed</span> <span class="o">=</span> <span class="n">get_news_feed</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">NewsFeed</span><span class="o">.</span><span class="n">entries</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">given</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="n">published</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># print(given)</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># print(convert_to_epoch(given))</span>
</span></span><span class="line"><span class="cl">        <span class="n">publish_date_epoch</span> <span class="o">=</span> <span class="n">convert_to_epoch</span><span class="p">(</span><span class="n">given</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">publish_date_epoch</span> <span class="o">&gt;</span> <span class="n">last_run_epoch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># in the next pass this will run the social update workflow</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># run the write epoch to file function</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">write_current_dt_to_file</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">raise</span> <span class="n">e</span>
</span></span></code></pre></div><h2 id="next-steps">Next Steps</h2>
<p>I need to write the publishing application. I haven&rsquo;t figure out how I&rsquo;ll do that yet. I want to do some cool things, but tbh it is probably overkill for my use case. I will think on it.</p>
]]></content>
			<postid> e7a0868e949438c9000bac7073dfc20d</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Automate Posting Hugo Blog to Social Sites (with a db) Part 2</title>
			<link>//localhost:1313/en/posts/hugo-mysql-db-setup/</link>
			<pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/hugo-mysql-db-setup/</guid>
			<description><![CDATA[How To automate posting to social sites]]></description>
			<content type="html"><![CDATA[<h2 id="background">Background</h2>
<h3 id="previous-posts-in-this-series">Previous posts in this series</h3>
<ol>
<li><a href="https://jnapolitano.com/en/posts/hugo-social-publisher/">part 1</a></li>
<li><a href="https://jnapolitano.com/en/posts/python-rss-reader/">part 2</a></li>
<li><a href="https://jnapolitano.com/en/posts/mysql-install-buntu/">part 3</a></li>
<li><a href="https://jnapolitano.com/en/posts/mysql-config/">part 4</a></li>
<li><a href="https://jnapolitano.com/en/posts/hugo-rss-setup/">part 5</a></li>
<li><a href="https://jnapolitano.com/en/posts/hugo-rss-mysql-update/">part 6</a></li>
</ol>
<h3 id="expand-a-the-mysql-class">Expand a the mysql class</h3>
<p>I create a <a href="https://github.com/justin-napolitano/mysql-utility-class.git">repo</a> at <code>https://github.com/justin-napolitano/mysql-utility-class.git</code> to enable importing as a submodule the class that i have been workign on.</p>
<h3 id="set-up-the-db">Set up the db</h3>
<p>In <a href="https://jnapolitano.com/en/posts/mysql-config/">another part in this series</a>, I detailed setting up the mysql db via the command line. I am going to furher that workflow by modifying the files in that repo and then running thm to generat tables within my instance of mysql.</p>
<h2 id="setup-you-dev-environmentagain">Setup you dev environment&hellip;again</h2>
<h3 id="copy-the-env-file">Copy the .env file</h3>
<p>Copy over the .env files from the previous few steps.</p>
<h3 id="import-the-config-repo">Import the Config repo</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git submodule add https://github.com/justin-napolitano/mysql-config.git mysql-config
</span></span></code></pre></div><h3 id="import-the-utility-class-repo">Import the utility class repo</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git submodule add https://github.com/justin-napolitano/mysql-utility-class.git mysql-utility-class   
</span></span></code></pre></div><h3 id="setup-the-package-as-a-module">Setup the package as a module</h3>
<h4 id="from-root-drop-an-empty-__init_py-file">From root drop an empty _<em>init</em>.py file</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">touch __init__.py
</span></span></code></pre></div><h4 id="from-the-utility-class-directory-drop-another-__init__py">From the utility class directory drop another <strong>init</strong>.py</h4>
<p>This one however will contain a relative import to enable access to the class</p>
<h5 id="touch">Touch</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> <span class="o">{</span>to the utility class directory<span class="o">}</span> <span class="o">&amp;&amp;</span> touch __init__.py
</span></span></code></pre></div><h5 id="echo-to-file">Echo to file</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;from .MySQLConnector import MySQLConnector&#34;</span> &gt; __init__.py
</span></span></code></pre></div><h4 id="check-the-module-hierarchy">Check the module hierarchy</h4>
<p>We should be looking like this</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">your_project/
</span></span><span class="line"><span class="cl">|-- <span class="gs">__init__</span>.py
</span></span><span class="line"><span class="cl">|-- main.py
</span></span><span class="line"><span class="cl">|-- .env
</span></span><span class="line"><span class="cl"><span class="sb">`-- MySQLConnector/
</span></span></span><span class="line"><span class="cl"><span class="sb">    |-- __init__.py
</span></span></span><span class="line"><span class="cl"><span class="sb">    `</span>-- MySQLConnector.py
</span></span></code></pre></div><h2 id="create-the-main-file">Create the main file</h2>
<h3 id="touch-mainpy">Touch main.py</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">touch main.,py
</span></span></code></pre></div><h3 id="modify-mainpy">Modify main.py</h3>
<p>My file currently looks like this to test the connect</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">MySQLConnector</span> <span class="kn">import</span> <span class="n">MySQLConnector</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">load_dotenv</span><span class="p">()</span>  <span class="c1"># Load environment variables from .env file</span>
</span></span><span class="line"><span class="cl">    <span class="n">connection</span> <span class="o">=</span> <span class="n">MySQLConnector</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">connection</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">connection</span><span class="o">.</span><span class="n">disconnect</span><span class="p">()</span>
</span></span></code></pre></div><h3 id="test-the-conection">Test the conection</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">python -m main.py
</span></span></code></pre></div><h3 id="modify-the-class-for-more-features">Modify the class for more features.</h3>
<p>I want to be able to</p>
<ul>
<li>create a db</li>
<li>drop a db</li>
<li>use a db</li>
<li>execute a script fro file</li>
</ul>
<h4 id="create-db">Create db</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="k">def</span> <span class="nf">create_database</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">database_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;CREATE DATABASE </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;SHOW DATABASES LIKE &#39;</span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2">&#39;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">fetchone</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">result</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Database </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2"> created successfully&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Database </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2"> was not created&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">Error</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error while creating database: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">False</span>
</span></span></code></pre></div><h4 id="drop-db">Drop db</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="k">def</span> <span class="nf">drop_database</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">database_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;DROP DATABASE </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;SHOW DATABASES LIKE &#39;</span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2">&#39;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">fetchone</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="n">result</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Database </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2"> dropped successfully&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Database </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2"> was not dropped&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">Error</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error while dropping database: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">False</span>
</span></span></code></pre></div><h4 id="use-db">use db</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">use_database</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">database_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;USE </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Using database </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">Error</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error while selecting database: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="execute-script">Execute Script</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">execute_script_from_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">file_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">sql_script</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="n">sql_commands</span> <span class="o">=</span> <span class="n">sql_script</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">command</span> <span class="ow">in</span> <span class="n">sql_commands</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">command</span><span class="o">.</span><span class="n">strip</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Executed: </span><span class="si">{</span><span class="n">command</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;SQL script executed successfully&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">Error</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error while executing SQL script: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="test-the-module">Test the module</h3>
<p>With the added logic my main.py file looks like</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">execute_script_from_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">file_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">sql_script</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="n">sql_commands</span> <span class="o">=</span> <span class="n">sql_script</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">command</span> <span class="ow">in</span> <span class="n">sql_commands</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">command</span><span class="o">.</span><span class="n">strip</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Executed: </span><span class="si">{</span><span class="n">command</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;SQL script executed successfully&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">Error</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error while executing SQL script: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>I execute with the following from the project root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">python -m main.py
</span></span></code></pre></div><h2 id="the-current-mysqlconnector-class">The current MySQLConnector Class</h2>
<p>Below is as it stand.. The most up to date file can always be found at <code>https://github.com/justin-napolitano/mysql-utility-class.git</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Python" data-lang="Python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">mysql.connector</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mysql.connector</span> <span class="kn">import</span> <span class="n">Error</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MySQLConnector</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;DB_USER&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;DB_PASSWORD&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">host</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;DB_HOST&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s1">&#39;DB_NAME&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">connection</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">connection</span> <span class="o">=</span> <span class="n">mysql</span><span class="o">.</span><span class="n">connector</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">user</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">user</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">password</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">password</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">host</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">host</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># Do not specify database here</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">is_connected</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Connected to MySQL server&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">Error</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error while connecting to MySQL: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">disconnect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">is_connected</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;MySQL connection is closed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_database</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">database_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;CREATE DATABASE </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;SHOW DATABASES LIKE &#39;</span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2">&#39;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">fetchone</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">result</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Database </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2"> created successfully&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Database </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2"> was not created&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">Error</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error while creating database: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">drop_database</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">database_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;DROP DATABASE </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;SHOW DATABASES LIKE &#39;</span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2">&#39;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">fetchone</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="n">result</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Database </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2"> dropped successfully&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Database </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2"> was not dropped&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">Error</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error while dropping database: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">use_database</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">database_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;USE </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Using database </span><span class="si">{</span><span class="n">database_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">Error</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error while selecting database: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">execute_script_from_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">file_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">sql_script</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="n">sql_commands</span> <span class="o">=</span> <span class="n">sql_script</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">command</span> <span class="ow">in</span> <span class="n">sql_commands</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">command</span><span class="o">.</span><span class="n">strip</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Executed: </span><span class="si">{</span><span class="n">command</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;SQL script executed successfully&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">Error</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Error while executing SQL script: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Usage example</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">load_dotenv</span><span class="p">()</span>  <span class="c1"># Load environment variables from .env file</span>
</span></span><span class="line"><span class="cl">    <span class="n">db_name</span> <span class="o">=</span> <span class="s1">&#39;testing_db&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">db</span> <span class="o">=</span> <span class="n">MySQLConnector</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">db</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">db</span><span class="o">.</span><span class="n">create_database</span><span class="p">(</span><span class="n">db_name</span><span class="p">)</span>  <span class="c1"># Replace &#39;new_database&#39; with the desired database name</span>
</span></span><span class="line"><span class="cl">    <span class="n">db</span><span class="o">.</span><span class="n">use_database</span><span class="p">(</span><span class="n">db_name</span><span class="p">)</span>  <span class="c1"># Use the specified database from .env</span>
</span></span><span class="line"><span class="cl">    <span class="n">db</span><span class="o">.</span><span class="n">drop_database</span><span class="p">(</span><span class="n">db_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">db</span><span class="o">.</span><span class="n">disconnect</span><span class="p">()</span>
</span></span></code></pre></div>]]></content>
			<postid> 6eb350e18199df3715ef730ae448d803</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Automate Posting Hugo Blog to Social Sites... Failure</title>
			<link>//localhost:1313/en/posts/hugo-social-publisher/</link>
			<pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/hugo-social-publisher/</guid>
			<description><![CDATA[How not to automate posting to social sites]]></description>
			<content type="html"><![CDATA[<h2 id="why">Why</h2>
<p>I have a hugo blog that is a pian to share across my social feeds. I want to automate it.</p>
<h2 id="create-a-mockup">Create a mockup</h2>
<p>For this I quickly sketched out my thoughts onto a writing pad.  My thinking is that I will drop a yaml file into each post directory to be read by a a python application calling social apis.</p>
<h4 id="mockup">Mockup</h4>
<p>As you can see this is very rudimentary. I will traverse the posts directories looking for a publish.yaml file that will help a python program to auto-generate some arguments to pass to some apis.</p>
<p><img src="./images/auto-post-sketch.jpg" alt="mock-up"></p>
<h3 id="mockup-a-yaml-file">Mockup a yaml file</h3>
<p>So I&rsquo;m thinking that my file will have a pretty basic structure something like.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">mastodon</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">x </span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">linkedin </span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><h3 id="mockup-the-json-config-file">Mockup the json config file</h3>
<p>I do not know which arguments the apis will need but I&rsquo;m going to guess I&rsquo;ll need something like&hellip;</p>
<ul>
<li>Post body</li>
<li>Tags</li>
</ul>
<p>I might need some other open graph items, but I am hoping that these can be pulled from the rendered html.. we&rsquo;ll see.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;urls: [
</span></span></span><span class="line"><span class="cl"><span class="nt">    {
</span></span></span><span class="line"><span class="cl"><span class="nt">    &#34;</span><span class="err">post-url</span><span class="s2">&#34;: &#34;</span><span class="err">$GENERATED</span> <span class="err">BY</span> <span class="err">DIRECTORY</span><span class="s2">&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;</span><span class="err">post-body</span><span class="s2">&#34;:&#34;</span><span class="err">GENERATED</span> <span class="err">BY</span> <span class="err">POST</span> <span class="err">DESCRIPTION</span><span class="s2">&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;</span><span class="err">post-tags</span><span class="s2">&#34;: &#34;</span><span class="err">GENERATED</span> <span class="err">BY</span> <span class="err">POST</span> <span class="err">TAGS</span><span class="s2">&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;</span><span class="err">mastodon</span><span class="s2">&#34; :{
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;</span><span class="err">publish</span><span class="s2">&#34;:true,
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;</span><span class="err">publish-date</span><span class="s2">&#34;:epoch_date,
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;</span><span class="err">publish-data&#34;</span><span class="p">:</span> <span class="err">Whatever</span> <span class="err">is</span> <span class="err">returned</span> <span class="err">by</span> <span class="err">the</span> <span class="err">api</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="err">}</span>
</span></span><span class="line"><span class="cl">    <span class="err">]</span>
</span></span></code></pre></div><h3 id="mockup-the-python-publisher">Mockup the python publisher</h3>
<p>I am sure there is a better way to do this. Maybe a more dynamic way? I am just writing quickly to get this done. I&rsquo;ll 100% revisit this when I actually write the program and experiment.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">urls</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">args</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">url</span><span class="p">[</span><span class="s1">&#39;post-body&#39;</span><span class="p">],</span><span class="n">url</span><span class="p">[</span><span class="s1">&#39;post-url&#39;</span><span class="p">],</span><span class="s2">&#34;# &#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">url</span><span class="p">[</span><span class="s1">&#39;post-tags&#39;</span><span class="p">])])</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">url</span><span class="p">[</span><span class="s1">&#39;mastodon&#39;</span><span class="p">]][</span><span class="s2">&#34;publish&#34;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">publish_mastodon_article</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="n">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">url</span><span class="p">[</span><span class="s1">&#39;facebook&#39;</span><span class="p">][</span><span class="s2">&#34;publish&#34;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">publish_facebook_article</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="n">args</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="mockup-the-python-directory-walker">Mockup the python directory walker</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">content_dirs</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;content/posts&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">out</span><span class="o">-</span><span class="n">paths</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nb">dir</span> <span class="ow">in</span> <span class="n">content_dirs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="nb">dir</span><span class="p">,</span> <span class="n">topdown</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">files</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="n">name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">out_paths</span>
</span></span><span class="line"><span class="cl">    <span class="n">generate_json_config</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># for name in dirs:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#     print(os.path.join(root, name))</span>
</span></span></code></pre></div><h3 id="mockup-the-yaml-reader">Mockup the yaml reader</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pyyaml</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">generate_json_config</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">json_gibberish</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;post-url&#34;</span><span class="p">:</span> <span class="s2">&#34;jnapolitano.com/en/&#34;</span> <span class="o">+</span> <span class="n">path</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;post-body&#34;</span><span class="p">:</span> <span class="n">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;post-tags&#34;</span><span class="p">:</span> <span class="n">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;mastodon&#34;</span> <span class="p">:{</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;publish&#34;</span><span class="p">:</span><span class="n">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;publish-date&#34;</span><span class="p">:</span><span class="n">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;publish-data&#34;</span><span class="p">:</span> <span class="n">null</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">yaml_path</span> <span class="o">=</span> <span class="n">path</span> <span class="o">+</span> <span class="n">publish</span><span class="o">.</span><span class="n">yaml</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">yaml_path</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">yaml_gibberish</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#whatver the yaml code is insert here... basiclly just translate it over to json and return</span>
</span></span><span class="line"><span class="cl">            <span class="n">yaml_json</span> <span class="o">-</span> <span class="n">yaml_gibberish</span><span class="o">.</span><span class="n">to_json</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">json_gibberish</span><span class="p">[</span><span class="s1">&#39;mastodon&#39;</span><span class="p">][</span><span class="s2">&#34;publish&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">yaml_json</span><span class="p">[</span><span class="s2">&#34;mastodon&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;No mastodon setting passing default to no&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">json_gibberish</span><span class="p">[</span><span class="s1">&#39;mastodon&#39;</span><span class="p">][</span><span class="s2">&#34;publish&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">false</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">json_gibberish</span>
</span></span></code></pre></div><h2 id="scrap-everything-and-change-course">Scrap Everything and Change Course</h2>
<p>So as I was writing the above, I came up with another solution. Writing out a mockup of the code made the entire thing feel to kludgy. I don&rsquo;t like writing to file&hellip; keeping configs up to date.. etc.  I will write an rss feed tracker that will just listen to the published site and then run the social jobs when the xml is updated.</p>
<h3 id="my-new-approach">My new approach</h3>
<p>My thinking is that I will add some options to the front matter of the posts that can easily be scraped from the rendered html.  The advantage of this approach is that it will permit me to always be up to date.  I will not add a republish feature&hellip; yet. I might but that will be another option.</p>
<h3 id="stay-tuned">Stay tuned</h3>
<p>I am breaking away from this post as I am changing direction. So in the mean time here is a photo of my cat.</p>
<p><img src="/images/featured-caesar.jpg" alt="&lsquo;caesar"></p>
]]></content>
			<postid> 38c3ecc9a62587a9ae67c0b4d7332487</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Hugo Build and Deploy GH Workflow</title>
			<link>//localhost:1313/en/posts/gh-pages-workflow/</link>
			<pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/gh-pages-workflow/</guid>
			<description><![CDATA[Hugo Build GH Workflow]]></description>
			<content type="html"><![CDATA[<h1 id="creating-a-gh-workflow-to-build-and-deploy-a-hugo-site-to-gh-pages">Creating a GH Workflow to Build and Deploy a hugo site to gh-pages</h1>
<h2 id="why">Why</h2>
<p>To simplify the build process.</p>
<h2 id="creating-the-workflow">Creating the Workflow</h2>
<h3 id="create-your-yaml-config-file">create your yaml config file</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">touch hugo.yaml
</span></span></code></pre></div><h3 id="set-the-trigger-and-the-environment-defaults">Set the trigger and the environment defaults</h3>
<p>The code below creates a trigger on push from the main and the gh-pages branches.  It also sets read and write permissions to permit executing code and building hugo.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Runs on pushes targeting the default branch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># - pit</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># - ghpages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">gh-pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Allows you to run this workflow manually from the Actions tab</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">workflow_dispatch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">permissions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">contents</span><span class="p">:</span><span class="w"> </span><span class="l">read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pages</span><span class="p">:</span><span class="w"> </span><span class="l">write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id-token</span><span class="p">:</span><span class="w"> </span><span class="l">write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">concurrency</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;pages&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cancel-in-progress</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Default to bash</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">defaults</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">run</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">shell</span><span class="p">:</span><span class="w"> </span><span class="l">bash</span><span class="w">
</span></span></span></code></pre></div><h3 id="define-the-jobs">Define the jobs</h3>
<p>There will be 2 jobs in this workflow</p>
<ul>
<li>The build job</li>
<li>The Deploy job</li>
</ul>
<h4 id="build-job">Build job</h4>
<ul>
<li>Runs an ubuntu vm</li>
<li>Install Hugo from scrip</li>
<li>installs dart sass</li>
<li>setsup pages</li>
<li>configures pages using the gh defaults flow</li>
<li>installs node.js dependencies to host and build js modules within most sites</li>
<li>hugo build to actually build the site</li>
<li>upload the artifact to gh pages for hosting</li>
</ul>
<h4 id="the-deploy-job">The Deploy job</h4>
<ul>
<li>Runs on an ubuntu vm</li>
<li>runs the gh deploy pages action <code>actions/deploy-pages@v4</code></li>
</ul>
<h4 id="code">Code</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Build job</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">HUGO_VERSION</span><span class="p">:</span><span class="w"> </span><span class="m">0.124.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install Hugo CLI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
</span></span></span><span class="line"><span class="cl"><span class="sd">          &amp;&amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb          </span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install Dart Sass</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">sudo snap install dart-sass</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="l">recursive</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/configure-pages@v4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install Node.js dependencies</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] &amp;&amp; npm ci || true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build with Hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># For maximum backward compatibility with Hugo modules</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">HUGO_ENVIRONMENT</span><span class="p">:</span><span class="w"> </span><span class="l">production</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">HUGO_ENV</span><span class="p">:</span><span class="w"> </span><span class="l">production</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          hugo \
</span></span></span><span class="line"><span class="cl"><span class="sd">            --gc \
</span></span></span><span class="line"><span class="cl"><span class="sd">            --minify \
</span></span></span><span class="line"><span class="cl"><span class="sd">            --baseURL &#34;${{ steps.pages.outputs.base_url }}/&#34;          </span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Upload artifact</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/upload-pages-artifact@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Deployment job</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">github-pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">${{ steps.deployment.outputs.page_url }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">needs</span><span class="p">:</span><span class="w"> </span><span class="l">build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy to GitHub Pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/deploy-pages@v4</span><span class="w">
</span></span></span></code></pre></div><h3 id="full-document">Full Document</h3>
<p>Find the most up to date file here <code>https://github.com/justin-napolitano/gh-pages-workflow.git</code></p>
<h2 id="integrating-the-hugo-build-jobs-into-your-workflow">Integrating the hugo build jobs into your workflow</h2>
<p>From your hugo project root</p>
<h3 id="initialize-a-git-repo-if-not-already-done">Initialize a git repo if not already done</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git init <span class="o">&amp;&amp;</span> git add . <span class="o">&amp;&amp;</span> git commit -m <span class="s2">&#34;initialize&#39; 
</span></span></span></code></pre></div><h3 id="push-to-remote">Push to remote</h3>
<p>I use the gh cli.  Follow the official gh documentation to install <a href="%22https://cli.github.com/manual/">Official Documentation</a></p>
<p>Run the following and follow the prompts.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gh repo create
</span></span></code></pre></div><h3 id="make-the-workflow-directory">Make the workflow directory</h3>
<p>From the git root run the following.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir .github/workflows
</span></span></code></pre></div><h3 id="copy-the-hugo-file-to-the-directory">Copy the hugo file to the directory</h3>
<p>In my case I will just download the file that have already created and maintain by running the following from repo root.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> .github/workflows <span class="o">&amp;&amp;</span> wget https://raw.githubusercontent.com/justin-napolitano/gh-pages-workflow/main/hugo.yaml <span class="o">&amp;&amp;</span> <span class="nb">cd</span> ../.. 
</span></span></code></pre></div><h3 id="push">Push</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git add . <span class="o">&amp;&amp;</span> git commit -m <span class="s2">&#34;creating the hugo build workflow&#34;</span> <span class="o">&amp;&amp;</span> git push 
</span></span></code></pre></div>]]></content>
			<postid> 321d72486372f767f4353c3f330e781e</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>GCP Cloud Run Job Scraper</title>
			<link>//localhost:1313/en/posts/l_o_c_scraper/</link>
			<pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/l_o_c_scraper/</guid>
			<description><![CDATA[Running a scraper as a gcp cloud run job]]></description>
			<content type="html"><![CDATA[<h1 id="library-of-congress-scraper-job">Library of Congress Scraper Job</h1>
<p>This <a href="https://github.com/justin-napolitano/loc_scraper">repo</a> scrapes the library of congress for all of the US Supreme Court Cases available on their platform. I intent to use this data to create a research tool to better understand the corpus of text.</p>
<h2 id="quick-history-of-this-project">Quick History of this project</h2>
<p>I had started work on this as an undergraduate at university, but the chatbot apis were not yet available.. and training modesl were far too expensive. I think with current tech I will be able to complete this project in about a week or two.</p>
<h3 id="what-this-script-does">What this script does</h3>
<p>This script simply calls the library of congress&rsquo;s public api with a search query and iterates through the search results.</p>
<p>Each result is transformed to a json string and then dropped into a gcp bucket that can be accessed by other tasks to be built into this workflow.</p>
<h2 id="the-gcp-component">The GCP Component</h2>
<p>This workflow could be built for my local infrastructure or for a vm somewhere in the cloud&hellip; but I&rsquo;ve chosen to design each task as a gcp job that will permit an enterprise scale workflow to run.</p>
<p>The reason for doing this is really just to understand how these jobs work. I will write a subsequent post detailing how this job really works.</p>
<h3 id="why">Why</h3>
<p>Because I want to push myself a bit&hellip; but this also could be used as proof of concept tool that can easily be adapted to the needs of enterprise clients or research institutions.</p>
<h2 id="quickstart">Quickstart</h2>
<h3 id="download-the-repo">Download the repo</h3>
<p>Copy the repo at <a href="https://github.com/justin-napolitano/loc_scraper">github.com/justin-napolitano/loc_scraper</a> to get started</p>
<h3 id="gcloud-cli">Gcloud cli</h3>
<p>After this you will have to install gcloud cli and configure you&rsquo;re local environment. I will write up some scripts in a subsequent post to automate this process&hellip; but for the time being check out this <a href="https://cloud.google.com/sdk/docs/install">&ldquo;link&rdquo;</a></p>
<h3 id="create-the-image">Create the image</h3>
<p>In the repo there is a a bash script called <code>build.sh</code> that will need to be updated to according to your gcp project.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gcloud builds submit --region<span class="o">=</span>us-west2 --config cloudbuild.yaml
</span></span></code></pre></div><p>It calls <code>cloudbuild.yaml</code> which might need to be updated for you, but the following the should work.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;gcr.io/cloud-builders/docker&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">script</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    docker build -t us-west2-docker.pkg.dev/$PROJECT_ID/supreme-court-scraper/supreme-court-scraper-image:dev .</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">automapSubstitutions</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">images</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="s1">&#39;us-west2-docker.pkg.dev/$PROJECT_ID/supreme-court-scraper/supreme-court-scraper-image:dev&#39;</span><span class="w">
</span></span></span></code></pre></div><h3 id="following-creation-of-the-imge">Following creation of the imge</h3>
<p>Next you can create a job on gcp by runnning the <code>job_create.sh</code> script&hellip; or by copying the code below and chaging yourproject to the correct project-name</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gcloud run <span class="nb">jobs</span> create supreme-court-scraper --image us-west2-docker.pkg.dev/yourproject/supreme-court-scraper/supreme-court-scraper-image:dev <span class="se">\
</span></span></span></code></pre></div><h3 id="executing-the-job">Executing the job</h3>
<p>Once complete you can execute the job by running the <code>execute_job.sh</code> script or by running</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gcloud run <span class="nb">jobs</span> execute supreme-court-scraper
</span></span></code></pre></div><h3 id="putting-it-all-together">Putting it all together</h3>
<p>In a perfect world the following should work. Note that src/.env should be set with your environmental variables such as <code>$GCPPROJECTID</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> src/.env <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="o">&amp;&amp;</span> ./build.sh <span class="se">\ </span>
</span></span><span class="line"><span class="cl"><span class="o">&amp;&amp;</span> ./job_create.sh <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="o">&amp;&amp;</span> ./execute_job.sh
</span></span></code></pre></div><h2 id="running-locally">Running locally</h2>
<p>The python script in the <code>/src</code> can be run locally, however it should be modified if you choose not to use gcp.  There are a number of functions within that can easily be modified to permit writing to the local directory.</p>
<h2 id="documentation-sources">Documentation Sources</h2>
<ol>
<li><a href="https://cloud.google.com/run/docs/create-jobs">&ldquo;Google Cloud Run Jobs Automation&rdquo;</a></li>
</ol>
]]></content>
			<postid> a3ef57c57e9c0178498d7b6867032911</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Model Design and Logistic Regression in Python</title>
			<link>//localhost:1313/en/posts/logistic_regression_mockup/</link>
			<pubDate>Fri, 17 Jun 2022 13:20:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/logistic_regression_mockup/</guid>
			<description><![CDATA[Designing a logistic regression model from randomized bioinformatics data.]]></description>
			<content type="html"><![CDATA[<h1 id="model-design-and-logistic-regression-in-python">Model Design and Logistic Regression in Python</h1>
<p>I recently modeled customer churn in Julia with logistic regression model.  It was interesting to be sure, but I want to extend my analysis skillset by modeling biostatistics data.  In this post, I design a logistic regression model of health predictors.</p>
<h2 id="imports">Imports</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># load some default Python modules</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="s1">&#39;seaborn-whitegrid&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">google.cloud</span> <span class="kn">import</span> <span class="n">bigquery</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">date</span><span class="p">,</span> <span class="n">datetime</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">contextily</span> <span class="k">as</span> <span class="nn">cx</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.datasets</span> <span class="kn">import</span> <span class="n">load_digits</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">classification_report</span><span class="p">,</span> <span class="n">confusion_matrix</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
</span></span></code></pre></div><h2 id="data">Data</h2>
<h3 id="data--description">Data  Description</h3>
<p>Chinese Longitudinal Healthy Longevity Survey (CLHLS), Biomarkers Datasets, 2009, 2012, 2014 (ICPSR 37226)
Principal Investigator(s): Yi Zeng, Duke University, and Peking University; James W. Vaupel, Max Planck Institutes, and Duke University</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">filename</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/biostatistics/data/37226-0003-Data.tsv&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># read data in pandas dataframe</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># list first few rows (datapoints)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<p>The float collumns were not interpretted correctly by pandas. I&rsquo;ll fix that</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">columns</span>
</span></span></code></pre></div><pre><code>Index(['ID', 'TRUEAGE', 'A1', 'ALB', 'GLU', 'BUN', 'CREA', 'CHO', 'TG', 'GSP',
       'CRPHS', 'UA', 'HDLC', 'SOD', 'MDA', 'VD3', 'VITB12', 'UALB', 'UCR',
       'UALBBYUCR', 'WBC', 'LYMPH', 'LYMPH_A', 'RBC', 'HGB', 'HCT', 'MCV',
       'MCH', 'MCHC', 'PLT', 'MPV', 'PDW', 'PCT'],
      dtype='object')
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># check datatypesdf</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">dtypes</span>
</span></span></code></pre></div><pre><code>ID            int64
TRUEAGE      object
A1           object
ALB          object
GLU          object
BUN          object
CREA         object
CHO          object
TG           object
GSP          object
CRPHS        object
UA           object
HDLC         object
SOD          object
MDA          object
VD3          object
VITB12       object
UALB         object
UCR          object
UALBBYUCR    object
WBC          object
LYMPH        object
LYMPH_A      object
RBC          object
HGB          object
HCT          object
MCV          object
MCH          object
MCHC         object
PLT          object
MPV          object
PDW          object
PCT          object
dtype: object
</code></pre>
<p>Everything was read an object.  I&rsquo;ll cast everything to numeric&hellip; Thank you numpy</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># replace empty space with na</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">)</span>
</span></span></code></pre></div><p>just to be safe, I&rsquo;ll replace all blank spaces with np.nan.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># convert numeric objects to numeric data types.  I checked in the code book there will not be any false positives</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">to_numeric</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="s1">&#39;raise&#39;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Recheck dictypes</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">dtypes</span>
</span></span></code></pre></div><pre><code>ID             int64
TRUEAGE      float64
A1           float64
ALB          float64
GLU          float64
BUN          float64
CREA         float64
CHO          float64
TG           float64
GSP          float64
CRPHS        float64
UA           float64
HDLC         float64
SOD          float64
MDA          float64
VD3          float64
VITB12       float64
UALB         float64
UCR          float64
UALBBYUCR    float64
WBC          float64
LYMPH        float64
LYMPH_A      float64
RBC          float64
HGB          float64
HCT          float64
MCV          float64
MCH          float64
MCHC         float64
PLT          float64
MPV          float64
PDW          float64
PCT          float64
dtype: object
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># check statistics of the features</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<p>It is kind of odd that there are greater counts for some rows. I&rsquo;ll remove all na.</p>
<p>Checking for negative values and anything else I missed from the initial sql clean:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<p>We remove about 4/5 of our data.  The counts are now equivalent. Everything is in the correct data type.</p>
<h4 id="visualizing-age-distribution">Visualizing Age Distribution</h4>
<p>I am curious what the age spread looks like. An even spread could be used to determine health outcomes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># plot histogram of fare</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">TRUEAGE</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Age&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Histogram&#39;</span><span class="p">);</span>
</span></span></code></pre></div><p><img src="logistic_regression_files/logistic_regression_24_0.png" alt="png"></p>
<p>Unfortunately, the spread is not evenly distributed.</p>
<h4 id="visualizing-age-to-triglyceride-levels">Visualizing Age to Triglyceride Levels</h4>
<p>A predictive model relating health factors to longevity is probably possible.   Certain factors must be met, but I&rsquo;ll assume they are for the sake of this mockup.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#idx = (df.trip_distance &lt; 3) &amp; (gdf.fare_amount &lt; 100)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">TRUEAGE</span><span class="p">,</span> <span class="n">df</span><span class="o">.</span><span class="n">TG</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;True Age&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Triglyceride, mmol/L&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># theta here is estimated by hand</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img src="logistic_regression_files/logistic_regression_26_0.png" alt="png"></p>
<h2 id="filter-examples">Filter Examples</h2>
<p>The data above doesn&rsquo;t really need to be filtered.  To demonstrate how it could be, I include some randomized columns that are then filtered according to specific conditions.</p>
<p>To fit the specificities of the conditions in the training video I&rsquo;ll add some randomized columns.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">#inclusive</span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1"># exclusive</span>
</span></span><span class="line"><span class="cl"><span class="n">emergency_department</span> <span class="o">=</span>  <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="n">lower_bound</span> <span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">upper_bound</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;EMERGENCY&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">emergency_department</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">#inclusive</span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="mi">100</span> <span class="c1"># exclusive</span>
</span></span><span class="line"><span class="cl"><span class="n">cancer_care</span> <span class="o">=</span>  <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="n">lower_bound</span> <span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">upper_bound</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;CANCER_TYPE&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cancer_care</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">#inclusive </span>
</span></span><span class="line"><span class="cl"><span class="c1">#0 = no</span>
</span></span><span class="line"><span class="cl"><span class="c1">#1 = ICPI</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2 MONO </span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="mi">3</span> <span class="c1"># exclusive</span>
</span></span><span class="line"><span class="cl"><span class="n">icpi_history</span> <span class="o">=</span>  <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="n">lower_bound</span> <span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">upper_bound</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;ICPI_HIST&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">icpi_history</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">#inclusive</span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="mi">2</span><span class="c1"># exclusive</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Spanish = 0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># English = 1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Arbitrarily chosen. </span>
</span></span><span class="line"><span class="cl"><span class="n">language</span> <span class="o">=</span>  <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="n">lower_bound</span> <span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">upper_bound</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;LANG&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">language</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">#inclusive</span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1"># exclusive</span>
</span></span><span class="line"><span class="cl"><span class="n">follow_up</span> <span class="o">=</span>  <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="n">lower_bound</span> <span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">upper_bound</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;FOLLOW_UP&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">follow_up</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">#inclusive</span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1"># exclusive</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 0 = no</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1 = Yes</span>
</span></span><span class="line"><span class="cl"><span class="n">cons</span> <span class="o">=</span>  <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="n">lower_bound</span> <span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">upper_bound</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;CONSENT&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cons</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">#inclusive</span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1"># exclusive</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 0 = no</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1 = Yes</span>
</span></span><span class="line"><span class="cl"><span class="n">prego</span> <span class="o">=</span>  <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="n">lower_bound</span> <span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">upper_bound</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;PREGNANT&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">prego</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="writing-the-filter">Writing the Filter</h3>
<p>Writing a quick filter to ensure eligibiity.  This could, and probably should be written functionally, but so it goes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Greater than 18</span>
</span></span><span class="line"><span class="cl"><span class="c1"># CANCER TYPE IS NOT equal to a non-malanoma skin cancer ie 5 arbitrarily chosen </span>
</span></span><span class="line"><span class="cl"><span class="c1"># Patient Seeking care in emergency department is true</span>
</span></span><span class="line"><span class="cl"><span class="c1"># History is not equal to 0. Ie not recieving either.  IDK how it would be provided.  It could also possibly be written as equal to 1 or 2</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Lang is either english or spanish</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Patient Agrees to Follow Up</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Patient Consents</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Patient is Not Pregnant</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">idx_spanish</span> <span class="o">=</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">TRUEAGE</span> <span class="o">&gt;</span> <span class="mi">18</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">CANCER_TYPE</span> <span class="o">!=</span> <span class="mi">5</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">EMERGENCY</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> \
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">ICPI_HIST</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">LANG</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">FOLLOW_UP</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">CONSENT</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">PREGNANT</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Ideally the english and spanish speakers would have been filtered prior to this, but for the sake of exploration this will work. </span>
</span></span><span class="line"><span class="cl"><span class="n">idx_english</span> <span class="o">=</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">TRUEAGE</span> <span class="o">&gt;</span> <span class="mi">18</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">CANCER_TYPE</span> <span class="o">!=</span> <span class="mi">5</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">EMERGENCY</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> \
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">ICPI_HIST</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">LANG</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">FOLLOW_UP</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">CONSENT</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">PREGNANT</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span></code></pre></div><p>I created spanish and english dataframes for the sake of data manipulation.  It is not realy necessary, but it would permit modifying and recoding the data if it were formatted differently.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">filtered_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df</span><span class="p">[</span><span class="n">idx_english</span><span class="p">],</span> <span class="n">df</span><span class="p">[</span><span class="n">idx_spanish</span><span class="p">]],</span> <span class="n">ignore_index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><p>the filtered df is a concattenation of the english and spanish filtered data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">filtered_df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">filtered_df</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1">#only 33 left following the filter. </span>
</span></span></code></pre></div><pre><code>33
</code></pre>
<p>Following the filter only 35 data are left in the set.  A workflow similiar to this could be used to identify possible survey recruits from aggregated chart data.</p>
<h2 id="logistic-regression-sample">Logistic Regression Sample</h2>
<p>I am surpirsed by the low level of samples left following the filter.  To avoid a small n, I will use the initial dataset.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">filename</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/biostatistics/data/37226-0003-Data.tsv&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># replace empty space with na</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># convert numeric objects to numeric data types.  I checked in the code book there will not be any false positives</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">to_numeric</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="s1">&#39;raise&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="the-model">The Model</h3>
<p>There is strong suspicion that biomarkers can determine whether a patient should be admitted for emergency care.  In this simplified model, I will randomly distribute proper disposition across the dataset.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">#inclusive</span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1"># exclusive</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 0 = no</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1 = Yes</span>
</span></span><span class="line"><span class="cl"><span class="n">tmp</span> <span class="o">=</span>  <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="n">low</span><span class="o">=</span><span class="n">lower_bound</span> <span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">upper_bound</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="p">[</span><span class="s2">&#34;PROP_DISPOSITION&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span>
</span></span></code></pre></div><h3 id="create-test-and-train-set">Create Test and Train Set</h3>
<p>This could be randomly sampled as well&hellip;</p>
<h4 id="random-sample">Random Sample</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># copy in memory to avoid errors.  This could be done from files or in other ways if memory is limited.  </span>
</span></span><span class="line"><span class="cl"><span class="n">master_table</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span></code></pre></div><h3 id="test-sample-set-with-10000-randomly-selected-from-the-master-with-replacement">Test Sample Set with 10,000 Randomly Selected from the Master with Replacement</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">test_sample</span> <span class="o">=</span> <span class="n">master_table</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">20000</span><span class="p">,</span><span class="n">replace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">targets</span> <span class="o">=</span> <span class="n">test_sample</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s2">&#34;PROP_DISPOSITION&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="seperate-train-and-test-sets">Seperate Train and Test Sets</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x_train</span><span class="p">,</span> <span class="n">x_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">test_sample</span><span class="p">,</span> <span class="n">targets</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="data-standardization">Data Standardization</h4>
<p>Calculate the mean and standard deviation for each column.
Subtract the corresponding mean from each element.
Divide the obtained difference by the corresponding standard deviation.</p>
<p>Thankfully this is built into SKLearn.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">scaler</span> <span class="o">=</span> <span class="n">StandardScaler</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">x_train</span> <span class="o">=</span> <span class="n">scaler</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">x_train</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="create-the-model">Create the Model</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">model</span> <span class="o">=</span> <span class="n">LogisticRegression</span><span class="p">(</span><span class="n">solver</span><span class="o">=</span><span class="s1">&#39;liblinear&#39;</span><span class="p">,</span> <span class="n">C</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span> <span class="n">multi_class</span><span class="o">=</span><span class="s1">&#39;ovr&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                           <span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>LogisticRegression(C=0.05, multi_class='ovr', random_state=0,
                   solver='liblinear')
</code></pre>
<h3 id="evaluate-model">Evaluate Model</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x_test</span> <span class="o">=</span> <span class="n">scaler</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">x_test</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">y_pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">x_test</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="model-scoring">Model Scoring</h3>
<p>With completely randomized values the score should be about 50%. If it is significantly greater than there is probably a problem with the model.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">score</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>0.5676875
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">model</span><span class="o">.</span><span class="n">score</span><span class="p">(</span><span class="n">x_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>0.55825
</code></pre>
<p>Results are expected</p>
<h3 id="confusion-matrix">Confusion matrix</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cm</span> <span class="o">=</span> <span class="n">confusion_matrix</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">font_size</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">cm</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s1">&#39;Predicted outputs&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;purple&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s1">&#39;Actual outputs&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;purple&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">xaxis</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">ticks</span><span class="o">=</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">cm</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">yaxis</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">ticks</span><span class="o">=</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">cm</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="c1">#ax.set_ylim(0, 1)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">cm</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">cm</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">cm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">],</span> <span class="n">ha</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="s1">&#39;center&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;purple&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><p><img src="logistic_regression_files/logistic_regression_71_0.png" alt="png"></p>
<p>Because the data is randomized it makes the model is accurate about 50% of the time.</p>
<h3 id="printing-the-classification-report">Printing the Classification Report</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">classification_report</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>              precision    recall  f1-score   support

           0       0.55      0.47      0.51      1927
           1       0.56      0.64      0.60      2073

    accuracy                           0.56      4000
   macro avg       0.56      0.56      0.55      4000
weighted avg       0.56      0.56      0.55      4000
</code></pre>
]]></content>
			<postid> 975ec172d2f9b34f351eb19096ee5c89</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Annual Cost of Living Monte Carlo Models</title>
			<link>//localhost:1313/en/posts/cost-of-living-projections/</link>
			<pubDate>Wed, 01 Jun 2022 15:24:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/cost-of-living-projections/</guid>
			<description><![CDATA[Monte Carlo Model to determine the cost of living in your city.]]></description>
			<content type="html"><![CDATA[<h2 id="cost-of-living-projections">Cost of Living Projections</h2>
<h2 id="introduction">Introduction</h2>
<p>I do not like negotiating for salary. Especially, without valid projections to determine a range.</p>
<p>I prepared this report to estimate a salary expectation that will maintain my current standard of living.</p>
<p>I present two Monte Carlo models of Houston and NYC annual living costs.  The data is somewhat dated and &ndash;particularly in the case of houston&ndash; are high level estimates.</p>
<p>In order to produce a better report, I am currently scraping data from the internet for more accurate sample distributions.  I will be able to present that soon.</p>
<p>With that said, the model should not deviate by more than about 5-10 percent from what is presented in below.</p>
<h2 id="findings">Findings</h2>
<p>An annual salary of $90,000 would be sufficient to qualify for rent in Houston and most likely the median level income neighbors of NYC.</p>
<p>I came about this number by quantifying a confidence inverval of annual rent costs in boths cities across a normal distribution.  I then simply multiplied that number by 3 in order to meet the lease qualifications of most landlords.</p>
<h2 id="limitations-of-the-model">Limitations of the Model</h2>
<h3 id="old-nyc-data">Old Nyc Data</h3>
<p>The data I am using was sourced from 2018.   I will be updating it soon.</p>
<h3 id="houston-data">Houston Data</h3>
<p>The houston estimate is based an estimate to stay in the property I am currently staying in.  The rent is 2400 a month.  I estimated that it could raise at maximum to about 2600 in the next year.  If I were to move similiar housing goes for around 2200 to about 2600 a month. I used these as the bounds of my estimates</p>
<h2 id="houston-cost-of-living-expenses">Houston Cost of Living Expenses</h2>
<p>I intend to stay in Houston for the next year.  I would like to move to NY eventually to be nearer to a central office, but not in the near future.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">2400</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">2600</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">median</span> <span class="o">=</span> <span class="mi">2500</span>
</span></span><span class="line"><span class="cl"><span class="n">standard_dev</span> <span class="o">=</span> <span class="mi">100</span>  <span class="c1">#file:///Users/jnapolitano/Downloads/LNG_Shipping_a_Descriptive_Analysis.pdf</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cap_range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">lower_bound</span><span class="p">,</span> <span class="n">upper_bound</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">rent_distribution</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="n">median</span> <span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">standard_dev</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">rent_sample</span> <span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">rent_distribution</span><span class="p">,</span><span class="mi">12</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="houston-monthly-food-costs">Houston Monthly food costs</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">median</span> <span class="o">=</span> <span class="mi">400</span>
</span></span><span class="line"><span class="cl"><span class="n">standard_dev</span> <span class="o">=</span> <span class="mi">50</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">food_range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">lower_bound</span><span class="p">,</span> <span class="n">upper_bound</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">food_distribution</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="n">median</span> <span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">standard_dev</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">food_sample</span> <span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">food_distribution</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="houston-insurance-costs">Houston Insurance Costs</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">median</span> <span class="o">=</span> <span class="mi">250</span>
</span></span><span class="line"><span class="cl"><span class="n">standard_dev</span> <span class="o">=</span> <span class="mi">25</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">insurance_range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">lower_bound</span><span class="p">,</span> <span class="n">upper_bound</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">insurance_distribution</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="n">median</span> <span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">standard_dev</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="the-houston-cost-of-living-df">The Houston Cost of Living DF</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cost_of_living_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;rent&#39;</span><span class="p">]</span><span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">rent_distribution</span><span class="p">,</span><span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;food&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">food_distribution</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;insurance&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">insurance_distribution</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;monthly_cost&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">rent</span> <span class="o">+</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">food</span> <span class="o">+</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">insurance</span>
</span></span><span class="line"><span class="cl"><span class="n">cost_of_living_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h2 id="houston-costs-per-annum-algorithm">Houston Costs Per Annum Algorithm</h2>
<p>The algorithm below calculates the annual cost of rent, food, and insurance to determine total cost per year.  Rent, food, and insurance are set by random choice based on the distributions defined in the functions above.</p>
<p>I run the simulation 10,000 times which in theory corresponds to 10,000 random samples of annual costs.  The point in doing this is to create a random normal distribution to define convidence intervals of my total annual costs.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">years</span> <span class="o">=</span> <span class="mi">10000</span>
</span></span><span class="line"><span class="cl"><span class="n">year_counter</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="c1">#carbon_total_millions_metric_tons = 300000000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#total_tons_shipped = 0</span>
</span></span><span class="line"><span class="cl"><span class="n">total_price</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_price_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">years</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_rent_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">years</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_food_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">years</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_insurance_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">years</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">annual_cost</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">years</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Define a New DataFrame. It should fall out of scope with each iteration </span>
</span></span><span class="line"><span class="cl">    <span class="n">cost_of_living_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#random choice of rent </span>
</span></span><span class="line"><span class="cl">    <span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;rent&#39;</span><span class="p">]</span><span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">rent_distribution</span><span class="p">,</span><span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#random choice of food</span>
</span></span><span class="line"><span class="cl">    <span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;food&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">food_distribution</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#random Choice of Insurance</span>
</span></span><span class="line"><span class="cl">    <span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;insurance&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">insurance_distribution</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#Random Choice of total annual cost</span>
</span></span><span class="line"><span class="cl">    <span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;monthly_cost&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">rent</span> <span class="o">+</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">food</span> <span class="o">+</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">insurance</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># must use apply to account for multiple 0 conditions.  If i simply vectorized the function across the dataframe in a single call i would assign the the same values each day </span>
</span></span><span class="line"><span class="cl">    <span class="c1">#calculate cost per day for fun...</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># query all that are = o.  Summate the capacities deduct the total </span>
</span></span><span class="line"><span class="cl">    <span class="n">annual_cost</span> <span class="o">=</span> <span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;monthly_cost&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">annual_rent</span> <span class="o">=</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">rent</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">annual_food</span> <span class="o">=</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">food</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">annual_insurance</span> <span class="o">=</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">insurance</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_price_samples</span><span class="p">[</span><span class="n">year</span><span class="p">]</span> <span class="o">=</span> <span class="n">annual_cost</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_food_samples</span><span class="p">[</span><span class="n">year</span><span class="p">]</span> <span class="o">=</span> <span class="n">annual_food</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_insurance_samples</span><span class="p">[</span><span class="n">year</span><span class="p">]</span> <span class="o">=</span> <span class="n">annual_insurance</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_rent_samples</span><span class="p">[</span><span class="n">year</span><span class="p">]</span> <span class="o">=</span> <span class="n">annual_rent</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(carbon_total_millions_metric_tons)</span>
</span></span><span class="line"><span class="cl">    <span class="n">year_counter</span> <span class="o">=</span> <span class="n">year_counter</span><span class="o">+</span><span class="mi">1</span>
</span></span></code></pre></div><h3 id="houston-prediction-df">Houston Prediction Df</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">prediction_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="p">[</span><span class="s1">&#39;rent&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cycle_rent_samples</span>
</span></span><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="p">[</span><span class="s1">&#39;food&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cycle_food_samples</span>
</span></span><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="p">[</span><span class="s1">&#39;insurance&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cycle_insurance_samples</span>
</span></span><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="p">[</span><span class="s1">&#39;total&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cycle_price_samples</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="houston-annual-cost-histogram">Houston Annual Cost Histogram</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="o">.</span><span class="n">total</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">grid</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">rwidth</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                   <span class="n">color</span><span class="o">=</span><span class="s1">&#39;#607c8e&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Annual Total Costs Price USD&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Frequency&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.75</span><span class="p">)</span>
</span></span></code></pre></div><p><img src="cost_of_living_monte_carlo_files/cost_of_living_monte_carlo_17_0.png" alt="png"></p>
<h3 id="houston-calculating-the-confidence-interval-for-total-costs">Houston: Calculating the Confidence Interval For Total Costs</h3>
<p>The data is nearly normal. Greater samples sizes would produce a graph of nearly perfect normality</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">st</span><span class="o">.</span><span class="n">norm</span><span class="o">.</span><span class="n">interval</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.90</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">prediction_df</span><span class="o">.</span><span class="n">total</span><span class="p">),</span> <span class="n">scale</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="n">sem</span><span class="p">(</span><span class="n">prediction_df</span><span class="o">.</span><span class="n">total</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>(37795.2942543157, 37808.287836034055)
</code></pre>
<h3 id="houston-annual-rent-histogram">Houston Annual Rent Histogram</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">### Annual Cost Histogram Histogram</span>
</span></span><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="o">.</span><span class="n">rent</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">grid</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">rwidth</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                   <span class="n">color</span><span class="o">=</span><span class="s1">&#39;#607c8e&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Annual Rent Cost Distribution &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Annual Rent Costs Price USD&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Frequency&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.75</span><span class="p">)</span>
</span></span></code></pre></div><p><img src="cost_of_living_monte_carlo_files/cost_of_living_monte_carlo_21_0.png" alt="png"></p>
<h3 id="houston-calculating-the-confidence-interval-for-annual-rent">Houston: Calculating the Confidence Interval For Annual Rent</h3>
<p>The data is nearly normal. Greater samples sizes would produce a graph of nearly perfect normality</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">st</span><span class="o">.</span><span class="n">norm</span><span class="o">.</span><span class="n">interval</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.95</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">prediction_df</span><span class="o">.</span><span class="n">rent</span><span class="p">),</span> <span class="n">scale</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="n">sem</span><span class="p">(</span><span class="n">prediction_df</span><span class="o">.</span><span class="n">rent</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>(29996.264715447538, 30009.767827637417)
</code></pre>
<h2 id="new-york-cost-of-living-expenses">New York Cost of Living Expenses</h2>
<p>For the sake of comparison, the New York Expense distributions are calculated below.  I assume that everything but rent will be equivalent to Houston.  A more accurate model would account for insurance, food, and incidental differences.</p>
<p>I am assuming the rent of a two bedroom apartment.</p>
<p>The data i am using was scraped from craigslist in 2018.  I will redo it later for 2022 data to get a better model.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">nyc_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">&#34;/Users/jnapolitano/Projects/cost-of-living-projections/nyc-housing.csv&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;unicode-escape&#34;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#assuiming a two bedroom</span>
</span></span><span class="line"><span class="cl"><span class="n">nyc_df</span> <span class="o">=</span> <span class="n">nyc_df</span><span class="p">[</span><span class="n">nyc_df</span><span class="p">[</span><span class="s1">&#39;Bedrooms&#39;</span><span class="p">]</span><span class="o">==</span> <span class="s1">&#39;2br&#39;</span><span class="p">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">nyc_df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<p>The price is about 2800 with a std of 7,465.  Which is absurd.  To do a better analysis, I need to clean the data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">nyc_df</span><span class="o">.</span><span class="n">Price</span> <span class="o">&gt;</span> <span class="mi">500</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">nyc_df</span><span class="o">.</span><span class="n">Price</span> <span class="o">&lt;</span> <span class="mi">4500</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nyc_df</span> <span class="o">=</span> <span class="n">nyc_df</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">nyc_df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<p>When accounting for outliers the data is far more managable.  I&rsquo;m surprised by the mean price.  Again this data is old, but it is also does not accout for neighborhoods.  I will redo the analysis at a later data filtered by neighborhoods.</p>
<h3 id="creating-the-nyc-distributions">Creating the NYC Distributions</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">600</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">4500</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">median</span> <span class="o">=</span> <span class="mi">2435</span>
</span></span><span class="line"><span class="cl"><span class="n">standard_dev</span> <span class="o">=</span> <span class="mi">729</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cap_range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">lower_bound</span><span class="p">,</span> <span class="n">upper_bound</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">rent_distribution</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="n">median</span> <span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">standard_dev</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">rent_sample</span> <span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">rent_distribution</span><span class="p">,</span><span class="mi">12</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="nyc-monthly-food-costs">NYC Monthly food costs</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">median</span> <span class="o">=</span> <span class="mi">400</span>
</span></span><span class="line"><span class="cl"><span class="n">standard_dev</span> <span class="o">=</span> <span class="mi">50</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">food_range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">lower_bound</span><span class="p">,</span> <span class="n">upper_bound</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">food_distribution</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="n">median</span> <span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">standard_dev</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">food_sample</span> <span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">food_distribution</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="nyc-insurance-costs">NYC Insurance Costs</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">median</span> <span class="o">=</span> <span class="mi">250</span>
</span></span><span class="line"><span class="cl"><span class="n">standard_dev</span> <span class="o">=</span> <span class="mi">25</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">insurance_range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">lower_bound</span><span class="p">,</span> <span class="n">upper_bound</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">insurance_distribution</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="n">median</span> <span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">standard_dev</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="nyc-cost-of-living-distribution">NYC Cost of Living Distribution</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cost_of_living_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;rent&#39;</span><span class="p">]</span><span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">rent_distribution</span><span class="p">,</span><span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;food&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">food_distribution</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;insurance&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">insurance_distribution</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;monthly_cost&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">rent</span> <span class="o">+</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">food</span> <span class="o">+</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">insurance</span>
</span></span><span class="line"><span class="cl"><span class="n">cost_of_living_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h2 id="nyc-costs-per-annum-algorithm">NYC Costs Per Annum Algorithm</h2>
<p>The algorithm below calculates the annual cost of rent, food, and insurance to determine total cost per year.  Rent, food, and insurance are set by random choice based on the distributions defined in the functions above.</p>
<p>I run the simulation 10,000 times which in theory corresponds to 10,000 random samples of annual costs.  The point in doing this is to create a random normal distribution to define convidence intervals of my total annual costs.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">years</span> <span class="o">=</span> <span class="mi">10000</span>
</span></span><span class="line"><span class="cl"><span class="n">year_counter</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="c1">#carbon_total_millions_metric_tons = 300000000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#total_tons_shipped = 0</span>
</span></span><span class="line"><span class="cl"><span class="n">total_price</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_price_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">years</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_rent_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">years</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_food_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">years</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_insurance_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">years</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">annual_cost</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">years</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Define a New DataFrame. It should fall out of scope with each iteration </span>
</span></span><span class="line"><span class="cl">    <span class="n">cost_of_living_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#random choice of rent </span>
</span></span><span class="line"><span class="cl">    <span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;rent&#39;</span><span class="p">]</span><span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">rent_distribution</span><span class="p">,</span><span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#random choice of food</span>
</span></span><span class="line"><span class="cl">    <span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;food&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">food_distribution</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#random Choice of Insurance</span>
</span></span><span class="line"><span class="cl">    <span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;insurance&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">insurance_distribution</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#Random Choice of total annual cost</span>
</span></span><span class="line"><span class="cl">    <span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;monthly_cost&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">rent</span> <span class="o">+</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">food</span> <span class="o">+</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">insurance</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># must use apply to account for multiple 0 conditions.  If i simply vectorized the function across the dataframe in a single call i would assign the the same values each day </span>
</span></span><span class="line"><span class="cl">    <span class="c1">#calculate cost per day for fun...</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># query all that are = o.  Summate the capacities deduct the total </span>
</span></span><span class="line"><span class="cl">    <span class="n">annual_cost</span> <span class="o">=</span> <span class="n">cost_of_living_df</span><span class="p">[</span><span class="s1">&#39;monthly_cost&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">annual_rent</span> <span class="o">=</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">rent</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">annual_food</span> <span class="o">=</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">food</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">annual_insurance</span> <span class="o">=</span> <span class="n">cost_of_living_df</span><span class="o">.</span><span class="n">insurance</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_price_samples</span><span class="p">[</span><span class="n">year</span><span class="p">]</span> <span class="o">=</span> <span class="n">annual_cost</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_food_samples</span><span class="p">[</span><span class="n">year</span><span class="p">]</span> <span class="o">=</span> <span class="n">annual_food</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_insurance_samples</span><span class="p">[</span><span class="n">year</span><span class="p">]</span> <span class="o">=</span> <span class="n">annual_insurance</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_rent_samples</span><span class="p">[</span><span class="n">year</span><span class="p">]</span> <span class="o">=</span> <span class="n">annual_rent</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(carbon_total_millions_metric_tons)</span>
</span></span><span class="line"><span class="cl">    <span class="n">year_counter</span> <span class="o">=</span> <span class="n">year_counter</span><span class="o">+</span><span class="mi">1</span>
</span></span></code></pre></div><h3 id="nyc-prediction-df">NYC Prediction Df</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">prediction_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="p">[</span><span class="s1">&#39;rent&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cycle_rent_samples</span>
</span></span><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="p">[</span><span class="s1">&#39;food&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cycle_food_samples</span>
</span></span><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="p">[</span><span class="s1">&#39;insurance&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cycle_insurance_samples</span>
</span></span><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="p">[</span><span class="s1">&#39;total&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cycle_price_samples</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="nyc-annual-cost-histogram">NYC Annual Cost Histogram</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="o">.</span><span class="n">total</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">grid</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">rwidth</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                   <span class="n">color</span><span class="o">=</span><span class="s1">&#39;#607c8e&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Annual Total Costs Price USD&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Frequency&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.75</span><span class="p">)</span>
</span></span></code></pre></div><p><img src="cost_of_living_monte_carlo_files/cost_of_living_monte_carlo_47_0.png" alt="png"></p>
<h3 id="nyc-calculating-the-confidence-interval-for-total-costs">NYC: Calculating the Confidence Interval For Total Costs</h3>
<p>The data is nearly normal. Greater samples sizes would produce a graph of nearly perfect normality</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">st</span><span class="o">.</span><span class="n">norm</span><span class="o">.</span><span class="n">interval</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.90</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">prediction_df</span><span class="o">.</span><span class="n">total</span><span class="p">),</span> <span class="n">scale</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="n">sem</span><span class="p">(</span><span class="n">prediction_df</span><span class="o">.</span><span class="n">total</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>(36979.727235126586, 37063.36039733022)
</code></pre>
<h3 id="nyc-annual-rent-histogram">NYC Annual Rent Histogram</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">### Annual Cost Histogram Histogram</span>
</span></span><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="o">.</span><span class="n">rent</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">grid</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">rwidth</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                   <span class="n">color</span><span class="o">=</span><span class="s1">&#39;#607c8e&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Annual Rent Cost Distribution &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Annual Rent Costs Price USD&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Frequency&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.75</span><span class="p">)</span>
</span></span></code></pre></div><p><img src="cost_of_living_monte_carlo_files/cost_of_living_monte_carlo_51_0.png" alt="png"></p>
<h3 id="calculating-the-confidence-interval-for-annual-rent">Calculating the Confidence Interval For Annual Rent</h3>
<p>The data is nearly normal. Greater samples sizes would produce a graph of nearly perfect normality</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">st</span><span class="o">.</span><span class="n">norm</span><span class="o">.</span><span class="n">interval</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.95</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">prediction_df</span><span class="o">.</span><span class="n">rent</span><span class="p">),</span> <span class="n">scale</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="n">sem</span><span class="p">(</span><span class="n">prediction_df</span><span class="o">.</span><span class="n">rent</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>(29169.877514702926, 29269.14186706609)
</code></pre>
<h2 id="nyc-closing-remarks">NYC Closing Remarks</h2>
<p>The rent distribution in NYC with 2018 data is actually nearly comparible to my houston estimate.  An annual salary of 90,000 would permit me to live at about the median level in the city.  I will be redoing this report soon as the data is old.  I am currently scraping data in houston and nyc to produce a better analysis.</p>
<h2 id="imports">Imports</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">scipy.stats</span> <span class="k">as</span> <span class="nn">st</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">shapely.geometry</span> <span class="kn">import</span> <span class="n">Point</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">numpy.random</span> <span class="kn">import</span> <span class="n">choice</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">warnings</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>
</span></span></code></pre></div>]]></content>
			<postid> 19d722a3367160b90fe1dcc2ee5c46ab</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Spearman Rank in Standard Julia</title>
			<link>//localhost:1313/en/posts/spearman_rank_julia/</link>
			<pubDate>Mon, 30 May 2022 20:20:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/spearman_rank_julia/</guid>
			<description><![CDATA[Numerical Recipes in Julia.  Spearman Rank Correlation adapted to nearly standard Julia.]]></description>
			<content type="html"><![CDATA[<h2 id="spearman-rank-in-standard-julia">Spearman Rank in Standard Julia</h2>
<p>Well nearly, I did import the erfc function from the SpecialFunctions package.  I don&rsquo;t like it either.  I&rsquo;ll write my own soon to make up for it.</p>
<h2 id="special-thanks">Special Thanks</h2>
<p>I came across the text Numerical Recipes in C.  It was first published in 1988, by the Cambridge University Press.  The authors are William H. Press, Brian P. Flannery, Saul. A. Teukolsky, and William T. Veterling.</p>
<p>The book is beautiful.  You should try to find a copy.  It comes in Pascal and Fortran too!!!</p>
<p>I&rsquo;m having fun with it and will translate some of the recipes from my first love C to Julia.</p>
<p>I&rsquo;ll write up a review on the functions below in an upcoming edit.  I&rsquo;m so excited that it works that I had to publish.</p>
<h2 id="update-there-is-a-website">Update: There is a Website!!!</h2>
<p><a href="http://numerical.recipes/">numerical.recipes</a> is a website with all of the code and the ebook.  I thought it was open source at first, but they want some money.  I guess it&rsquo;s okay, but still.  Check it out there.</p>
<p><a href="https://www.amazon.com/Numerical-Recipes-Scientific-Computing-Second/dp/0521431085#:~:text=The%20product%20of%20a%20unique,to%20actual%20practical%20computer%20routines">The amazon book link is here</a></p>
<h2 id="update-again">Update Again:</h2>
<p>I found the PDF!  It is available via penn state university. Here&rsquo;s the <a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.129.5354&amp;rep=rep1&amp;type=pdf">download link</a></p>
<h2 id="using-specialfunctionserfc">Using SpecialFunctions:erfc</h2>
<p>I had to import the complementary error function.  I wanted to use just the standard library, but I had to test the code below first.  I&rsquo;ll write the compelemntary error function in pure julia next.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">SpecialFunctions</span><span class="o">:</span><span class="n">erfc</span>
</span></span></code></pre></div><h2 id="spearman-correlation-function">Spearman Correlation Function.</h2>
<p>It takes:</p>
<ul>
<li>two distributions</li>
<li>the sample size</li>
</ul>
<p>It returns a t score  The original, used pointers to return multiple variables.  I&rsquo;ll probably rewrite the function to calculate the copmlimentary variables in seperate methods.  Might as well take advantage of the multiple dispatch capability of the language.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">spearman</span><span class="p">(</span><span class="n">data1</span><span class="p">,</span><span class="n">data2</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">j</span> <span class="o">=</span><span class="mi">1</span> 
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">wksp1m</span><span class="o">=</span> <span class="kt">Vector</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}(</span><span class="mi">0</span><span class="o">:</span><span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">wksp2m</span> <span class="o">=</span> <span class="kt">Vector</span><span class="p">{</span><span class="kt">Float64</span><span class="p">}(</span><span class="mi">0</span><span class="o">:</span><span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">wksp1m</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">data1</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">wksp2m</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">data2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sort!</span><span class="p">(</span><span class="n">wksp1m</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sort!</span><span class="p">(</span><span class="n">wksp2m</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sf</span> <span class="o">=</span> <span class="n">crank</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">wksp1m</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sg</span> <span class="o">=</span> <span class="n">crank</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">wksp2m</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">d</span> <span class="o">=</span> <span class="mi">0</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">n</span>
</span></span><span class="line"><span class="cl">        <span class="n">d</span> <span class="o">+=</span> <span class="n">sqrt</span><span class="p">((</span><span class="kt">Complex</span><span class="p">(</span><span class="n">wksp1m</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-</span><span class="n">wksp2m</span><span class="p">[</span><span class="n">j</span><span class="p">])))</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">en</span><span class="o">=</span><span class="n">n</span>
</span></span><span class="line"><span class="cl">    <span class="n">en3n</span> <span class="o">=</span> <span class="p">(</span><span class="n">en</span><span class="o">*</span><span class="n">en</span><span class="o">*</span><span class="n">en</span><span class="p">)</span><span class="o">-</span><span class="n">en</span>
</span></span><span class="line"><span class="cl">    <span class="n">aved</span><span class="o">=</span><span class="p">(</span><span class="n">en3n</span><span class="o">/</span><span class="mf">6.0</span><span class="p">)</span><span class="o">-</span><span class="p">((</span><span class="n">sf</span><span class="o">+</span><span class="n">sg</span><span class="p">)</span><span class="o">/</span><span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fac</span><span class="o">=</span><span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="n">sf</span><span class="o">/</span><span class="n">en3n</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="p">(</span><span class="n">sg</span><span class="o">/</span><span class="n">en3n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">vard</span> <span class="o">=</span><span class="p">((</span><span class="n">en</span><span class="o">-</span><span class="mf">1.0</span><span class="p">)</span><span class="o">*</span><span class="n">en</span><span class="o">*</span><span class="n">en</span><span class="o">*</span><span class="n">sqrt</span><span class="p">(</span><span class="n">en</span><span class="o">+</span><span class="mf">1.0</span><span class="p">)</span><span class="o">/</span><span class="mf">36.0</span><span class="p">)</span><span class="o">*</span><span class="n">fac</span>
</span></span><span class="line"><span class="cl">    <span class="n">zd</span> <span class="o">=</span> <span class="p">(</span><span class="n">d</span><span class="o">-</span><span class="n">aved</span><span class="o">/</span><span class="n">sqrt</span><span class="p">(</span><span class="n">vard</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">probd</span><span class="o">=</span><span class="n">erfc</span><span class="p">((</span><span class="n">abs</span><span class="p">(</span><span class="n">zd</span><span class="p">)</span><span class="o">/</span><span class="mf">1.4142136</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">rs</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="p">(</span><span class="mf">6.0</span><span class="o">/</span><span class="n">en3n</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">d</span><span class="o">+</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="n">sf</span><span class="o">+</span><span class="n">sg</span><span class="p">)))</span><span class="o">/</span><span class="n">fac</span>
</span></span><span class="line"><span class="cl">    <span class="n">t</span><span class="o">=</span><span class="p">(</span><span class="n">rs</span><span class="p">)</span><span class="o">*</span><span class="n">sqrt</span><span class="p">((</span><span class="n">en</span><span class="o">-</span><span class="mf">2.0</span><span class="p">)</span><span class="o">/</span><span class="p">((</span><span class="n">rs</span><span class="o">+</span><span class="mf">1.0</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="n">rs</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">t</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">    
</span></span></code></pre></div><pre><code>spearman (generic function with 2 methods)
</code></pre>
<h3 id="crank">Crank</h3>
<p>It ranks the distributions by modifying the original sorted array.  So very C.  I may play with this to return a new value, but I like that it modifies in place.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">crank</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">w</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c">#w= Vector{Float64}(1:n)</span>
</span></span><span class="line"><span class="cl">    <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">w</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">w</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">w</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">jt</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">jt</span><span class="p">]</span> <span class="o">!=</span> <span class="n">w</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                    <span class="k">break</span>
</span></span><span class="line"><span class="cl">                <span class="k">end</span>
</span></span><span class="line"><span class="cl">            <span class="k">end</span>
</span></span><span class="line"><span class="cl">            <span class="n">rank</span> <span class="o">=</span> <span class="mf">.5</span><span class="o">*</span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="n">jt</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">ji</span> <span class="k">in</span> <span class="n">j</span><span class="o">:</span><span class="p">(</span><span class="n">jt</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">w</span><span class="p">[</span><span class="n">ji</span><span class="p">]</span> <span class="o">=</span> <span class="n">rank</span>
</span></span><span class="line"><span class="cl">            <span class="k">end</span>
</span></span><span class="line"><span class="cl">            <span class="n">t</span> <span class="o">=</span> <span class="n">jt</span><span class="o">-</span><span class="n">j</span>
</span></span><span class="line"><span class="cl">            <span class="n">s</span> <span class="o">+=</span> <span class="n">t</span><span class="o">*</span><span class="n">t</span><span class="o">*</span><span class="n">t</span><span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">end</span>
</span></span><span class="line"><span class="cl">        <span class="n">c</span> <span class="o">=</span> <span class="n">j</span>
</span></span><span class="line"><span class="cl">        <span class="n">j</span><span class="o">=</span><span class="n">j</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="n">n</span> 
</span></span><span class="line"><span class="cl">        <span class="n">w</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span><span class="n">n</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">s</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>crank (generic function with 1 method)
</code></pre>
<h2 id="main">Main()</h2>
<p>Creates two random distributions and ranks tests them for correlation..</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">d1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="n">rand</span><span class="p">()</span><span class="o">+</span><span class="mi">2</span> <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">:</span><span class="mi">50</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">d2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="n">rand</span><span class="p">()</span><span class="o">+</span><span class="mi">2</span> <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">:</span><span class="mi">50</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">t</span> <span class="o">=</span><span class="n">spearman</span><span class="p">(</span><span class="n">d1</span><span class="p">,</span><span class="n">d2</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">display</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>main (generic function with 1 method)
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><pre><code>619.0719816953838 - 0.0im
</code></pre>
]]></content>
			<postid> ff8605f008dc9c93a61db7de1dfaba2d</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Churn Modelling Marketing Data with Julia</title>
			<link>//localhost:1313/en/posts/propensity_scoring/</link>
			<pubDate>Mon, 30 May 2022 13:30:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/propensity_scoring/</guid>
			<description><![CDATA[Logistic Regression Propensity Models of Marketing Data with Julia.]]></description>
			<content type="html"><![CDATA[<h1 id="churn-modelling-marketing-data-with-julia">Churn Modelling Marketing Data with Julia</h1>
<h2 id="introduction">Introduction</h2>
<p>I prepared this analysis to learn the logistic regression in Julia. The work is fairly straightforward.  I am modelling if a customer will exit a website based on a number of sites.  I&rsquo;ll improve the model in an upcoming post.  As if, is not as interesting as asking when. That will be my next project</p>
<h3 id="imports">Imports</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Pkg</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">DataFrames</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">CSV</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Plots</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">GLM</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">StatsBase</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Lathe</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">MLBase</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">ClassImbalance</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">ROCAnalysis</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">PyCall</span>
</span></span><span class="line"><span class="cl"><span class="n">sklearn</span> <span class="o">=</span> <span class="n">pyimport</span><span class="p">(</span><span class="s">&#34;sklearn.metrics&#34;</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>PyObject &lt;module 'sklearn.metrics' from '/Users/jnapolitano/venvs/finance/lib/python3.9/site-packages/sklearn/metrics/__init__.py'&gt;
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">load_csv</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span><span class="n">CSV</span><span class="o">.</span><span class="n">File</span><span class="p">(</span><span class="s">&#34;./Churn_Modelling.csv&#34;</span><span class="p">))</span> 
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df</span> 
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><pre><code>load_csv (generic function with 1 method)
</code></pre>
<h2 id="loading-data">Loading Data</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">marketing_df</span> <span class="o">=</span> <span class="n">load_csv</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">first</span><span class="p">(</span><span class="n">marketing_df</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">println</span><span class="p">(</span><span class="n">size</span><span class="p">(</span><span class="n">marketing_df</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">describe</span><span class="p">(</span><span class="n">marketing_df</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>(10000, 14)
</code></pre>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># Check column names</span>
</span></span><span class="line"><span class="cl"><span class="n">names</span><span class="p">(</span><span class="n">marketing_df</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>14-element Vector{Symbol}:
 :RowNumber
 :CustomerId
 :Surname
 :CreditScore
 :Geography
 :Gender
 :Age
 :Tenure
 :Balance
 :NumOfProducts
 :HasCrCard
 :IsActiveMember
 :EstimatedSalary
 :Exited
</code></pre>
<h3 id="check-class-imbalance">Check Class Imbalance</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># Count the classes</span>
</span></span><span class="line"><span class="cl"><span class="n">countmap</span><span class="p">(</span><span class="n">marketing_df</span><span class="o">.</span><span class="n">Exited</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Dict{Int64, Int64} with 2 entries:
  0 =&gt; 7963
  1 =&gt; 2037
</code></pre>
<h2 id="data-preprocessing">Data Preprocessing</h2>
<h3 id="one-hot-encoding">One Hot Encoding</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># One hot encoding</span>
</span></span><span class="line"><span class="cl"><span class="n">Lathe</span><span class="o">.</span><span class="n">preprocess</span><span class="o">.</span><span class="n">OneHotEncode</span><span class="p">(</span><span class="n">marketing_df</span><span class="p">,</span><span class="ss">:Geography</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Lathe</span><span class="o">.</span><span class="n">preprocess</span><span class="o">.</span><span class="n">OneHotEncode</span><span class="p">(</span><span class="n">marketing_df</span><span class="p">,</span><span class="ss">:Gender</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">select!</span><span class="p">(</span><span class="n">marketing_df</span><span class="p">,</span> <span class="n">Not</span><span class="p">([</span><span class="ss">:RowNumber</span><span class="p">,</span> <span class="ss">:CustomerId</span><span class="p">,</span><span class="ss">:Surname</span><span class="p">,</span><span class="ss">:Geography</span><span class="p">,</span><span class="ss">:Gender</span><span class="p">,</span><span class="ss">:Male</span><span class="p">]))</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<h3 id="split-trainand-test-data">Split Train/and Test Data</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># Train test split</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Lathe</span><span class="o">.</span><span class="n">preprocess</span><span class="o">:</span> <span class="n">TrainTestSplit</span>
</span></span><span class="line"><span class="cl"><span class="n">train</span><span class="p">,</span> <span class="n">test</span> <span class="o">=</span> <span class="n">TrainTestSplit</span><span class="p">(</span><span class="n">marketing_df</span><span class="p">,</span><span class="mf">.75</span><span class="p">);</span>
</span></span></code></pre></div><h2 id="build-model">Build Model</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># Train logistic regression model</span>
</span></span><span class="line"><span class="cl"><span class="n">fm</span> <span class="o">=</span> <span class="nd">@formula</span><span class="p">(</span><span class="n">Exited</span> <span class="o">~</span> <span class="n">CreditScore</span> <span class="o">+</span> <span class="n">Age</span> <span class="o">+</span> <span class="n">Tenure</span> <span class="o">+</span> <span class="n">Balance</span> <span class="o">+</span> <span class="n">NumOfProducts</span> <span class="o">+</span> <span class="n">HasCrCard</span> <span class="o">+</span> <span class="n">IsActiveMember</span> <span class="o">+</span> <span class="n">EstimatedSalary</span> <span class="o">+</span> <span class="n">Female</span> <span class="o">+</span> <span class="n">France</span> <span class="o">+</span> <span class="n">Spain</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">logit</span> <span class="o">=</span> <span class="n">glm</span><span class="p">(</span><span class="n">fm</span><span class="p">,</span> <span class="n">train</span><span class="p">,</span> <span class="n">Binomial</span><span class="p">(),</span> <span class="n">ProbitLink</span><span class="p">())</span>
</span></span></code></pre></div><pre><code>StatsModels.TableRegressionModel{GeneralizedLinearModel{GLM.GlmResp{Vector{Float64}, Binomial{Float64}, ProbitLink}, GLM.DensePredChol{Float64, LinearAlgebra.Cholesky{Float64, Matrix{Float64}}}}, Matrix{Float64}}

Exited ~ 1 + CreditScore + Age + Tenure + Balance + NumOfProducts + HasCrCard + IsActiveMember + EstimatedSalary + Female + France + Spain

Coefficients:
───────────────────────────────────────────────────────────────────────────────────────
                        Coef.   Std. Error       z  Pr(&gt;|z|)     Lower 95%    Upper 95%
───────────────────────────────────────────────────────────────────────────────────────
(Intercept)      -1.90933      0.165007     -11.57    &lt;1e-30  -2.23274      -1.58592
CreditScore      -0.000321917  0.000183184   -1.76    0.0789  -0.000680951   3.71172e-5
Age               0.040893     0.00165251    24.75    &lt;1e-99   0.0376541     0.0441318
Tenure           -0.008864     0.00611129    -1.45    0.1469  -0.0208419     0.0031139
Balance           1.65933e-6   3.30286e-7     5.02    &lt;1e-06   1.01198e-6    2.30668e-6
NumOfProducts    -0.040173     0.0309946     -1.30    0.1949  -0.100921      0.0205753
HasCrCard        -0.00442931   0.0386394     -0.11    0.9087  -0.0801612     0.0713026
IsActiveMember   -0.557894     0.0365213    -15.28    &lt;1e-51  -0.629475     -0.486314
EstimatedSalary   2.2925e-7    3.07604e-7     0.75    0.4561  -3.73644e-7    8.32143e-7
Female            0.301642     0.0354259      8.51    &lt;1e-16   0.232209      0.371076
France           -0.450226     0.0446176    -10.09    &lt;1e-23  -0.537674     -0.362777
Spain            -0.443184     0.051707      -8.57    &lt;1e-16  -0.544527     -0.34184
───────────────────────────────────────────────────────────────────────────────────────
</code></pre>
<h2 id="model-predictions-and-evaluation">Model Predictions and Evaluation</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># Predict the target variable on test data </span>
</span></span><span class="line"><span class="cl"><span class="n">prediction</span> <span class="o">=</span> <span class="n">predict</span><span class="p">(</span><span class="n">logit</span><span class="p">,</span><span class="n">test</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>2406-element Vector{Union{Missing, Float64}}:
 0.24401107345293602
 0.1266535868551322
 0.031721959583257124
 0.11357816519004983
 0.24824114578495612
 0.024688755265128235
 0.14209354336141483
 0.18528877855991494
 0.15470097145575007
 0.25962439112051505
 0.15117890643161475
 0.2110682947689441
 0.06358192272871947
 ⋮
 0.24899439141513482
 0.23449577199293972
 0.13610439167926225
 0.1737934374110589
 0.1341643450975004
 0.5831068095078078
 0.2950497674661655
 0.04139159536998556
 0.06795785137729822
 0.017204995327274736
 0.12888818685657766
 0.15310112069144077
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># Convert probability score to class</span>
</span></span><span class="line"><span class="cl"><span class="n">prediction_class</span> <span class="o">=</span> <span class="p">[</span><span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mf">0.5</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">1</span> <span class="k">end</span> <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">prediction</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">prediction_df</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span><span class="n">y_actual</span> <span class="o">=</span> <span class="n">test</span><span class="o">.</span><span class="n">Exited</span><span class="p">,</span> <span class="n">y_predicted</span> <span class="o">=</span> <span class="n">prediction_class</span><span class="p">,</span> <span class="n">prob_predicted</span> <span class="o">=</span> <span class="n">prediction</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="o">.</span><span class="n">correctly_classified</span> <span class="o">=</span> <span class="n">prediction_df</span><span class="o">.</span><span class="n">y_actual</span> <span class="o">.==</span> <span class="n">prediction_df</span><span class="o">.</span><span class="n">y_predicted</span>
</span></span></code></pre></div><pre><code>2406-element BitVector:
 0
 1
 1
 1
 1
 1
 1
 1
 1
 0
 1
 1
 1
 ⋮
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
</code></pre>
<h3 id="prediction-accuracy">Prediction Accuracy</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">accuracy</span> <span class="o">=</span> <span class="n">mean</span><span class="p">(</span><span class="n">prediction_df</span><span class="o">.</span><span class="n">correctly_classified</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>0.8100581878636741
</code></pre>
<h3 id="confusion-matrix">Confusion Matrix</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># confusion_matrix = confusmat(2,prediction_df.y_actual, prediction_df.y_predicted)</span>
</span></span><span class="line"><span class="cl"><span class="n">confusion_matrix</span> <span class="o">=</span> <span class="n">MLBase</span><span class="o">.</span><span class="n">roc</span><span class="p">(</span><span class="n">prediction_df</span><span class="o">.</span><span class="n">y_actual</span><span class="p">,</span> <span class="n">prediction_df</span><span class="o">.</span><span class="n">y_predicted</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>ROCNums{Int64}
  p = 510
  n = 1896
  tp = 105
  tn = 1844
  fp = 52
  fn = 405
</code></pre>
<h3 id="results">Results</h3>
<p>The model is estimating far to many exiting cases.  About 4 times the true value.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">fpr</span><span class="p">,</span> <span class="n">tpr</span><span class="p">,</span> <span class="n">thresholds</span> <span class="o">=</span> <span class="n">sklearn</span><span class="o">.</span><span class="n">roc_curve</span><span class="p">(</span><span class="n">prediction_df</span><span class="o">.</span><span class="n">y_actual</span><span class="p">,</span> <span class="n">prediction_df</span><span class="o">.</span><span class="n">prob_predicted</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>([0.0, 0.0, 0.0, 0.0005274261603375527, 0.0005274261603375527, 0.0010548523206751054, 0.0010548523206751054, 0.0015822784810126582, 0.0015822784810126582, 0.0026371308016877636  …  0.8829113924050633, 0.9066455696202531, 0.9066455696202531, 0.9193037974683544, 0.9193037974683544, 0.92457805907173, 0.92457805907173, 0.9725738396624473, 0.9725738396624473, 1.0], [0.0, 0.00196078431372549, 0.00392156862745098, 0.00392156862745098, 0.00784313725490196, 0.00784313725490196, 0.01568627450980392, 0.01568627450980392, 0.03137254901960784, 0.03137254901960784  …  0.9921568627450981, 0.9921568627450981, 0.9941176470588236, 0.9941176470588236, 0.996078431372549, 0.996078431372549, 0.9980392156862745, 0.9980392156862745, 1.0, 1.0], [1.8467335270755767, 0.8467335270755767, 0.8140811888019499, 0.8092555110984978, 0.7970873802691381, 0.79684704533007, 0.7719016175181805, 0.7709263202992206, 0.7060214606993195, 0.6994801619873218  …  0.04233143871590189, 0.03786940431261241, 0.037850945580692276, 0.035665362242897694, 0.03532968973176317, 0.03416668456674327, 0.03407543014692377, 0.020932892669754958, 0.020885871157504798, 0.00597005405256463])
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># Plot ROC curve</span>
</span></span><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">fpr</span><span class="p">,</span> <span class="n">tpr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">title!</span><span class="p">(</span><span class="s">&#34;ROC curve&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p><img src="propensity_scoring_files/propensity_scoring_24_0.svg" alt="svg"></p>
<h2 id="the-class-imbalance-problem">The Class Imbalance Problem</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># Count the classes</span>
</span></span><span class="line"><span class="cl"><span class="n">countmap</span><span class="p">(</span><span class="n">marketing_df</span><span class="o">.</span><span class="n">Exited</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Dict{Int64, Int64} with 2 entries:
  0 =&gt; 7963
  1 =&gt; 2037
</code></pre>
<h3 id="smote-to-fix-imbalance">Smote to fix imbalance</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">X2</span><span class="p">,</span> <span class="n">y2</span> <span class="o">=</span><span class="n">smote</span><span class="p">(</span><span class="n">marketing_df</span><span class="p">[</span><span class="o">!</span><span class="p">,[</span><span class="ss">:CreditScore</span><span class="p">,</span><span class="ss">:Age</span> <span class="p">,</span><span class="ss">:Tenure</span><span class="p">,</span> <span class="ss">:Balance</span><span class="p">,</span> <span class="ss">:NumOfProducts</span><span class="p">,</span> <span class="ss">:HasCrCard</span><span class="p">,</span> <span class="ss">:IsActiveMember</span><span class="p">,</span> <span class="ss">:EstimatedSalary</span><span class="p">,</span> <span class="ss">:Female</span> <span class="p">,</span> <span class="ss">:France</span><span class="p">,</span> <span class="ss">:Spain</span><span class="p">]],</span> <span class="n">marketing_df</span><span class="o">.</span><span class="n">Exited</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">pct_under</span> <span class="o">=</span> <span class="mi">150</span><span class="p">,</span> <span class="n">pct_over</span> <span class="o">=</span> <span class="mi">200</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df_balanced</span> <span class="o">=</span> <span class="n">X2</span>
</span></span><span class="line"><span class="cl"><span class="n">df_balanced</span><span class="o">.</span><span class="n">Exited</span> <span class="o">=</span> <span class="n">y2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">df_balanced</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Count the classes</span>
</span></span><span class="line"><span class="cl"><span class="n">countmap</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">Exited</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Dict{Int64, Int64} with 2 entries:
  0 =&gt; 6111
  1 =&gt; 6111
</code></pre>
<h3 id="retest">Retest</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># Train test split</span>
</span></span><span class="line"><span class="cl"><span class="n">train</span><span class="p">,</span> <span class="n">test</span> <span class="o">=</span> <span class="n">TrainTestSplit</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="mf">.75</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Model Building</span>
</span></span><span class="line"><span class="cl"><span class="n">fm</span> <span class="o">=</span> <span class="nd">@formula</span><span class="p">(</span><span class="n">Exited</span> <span class="o">~</span> <span class="n">CreditScore</span> <span class="o">+</span> <span class="n">Age</span> <span class="o">+</span> <span class="n">Tenure</span> <span class="o">+</span> <span class="n">Balance</span> <span class="o">+</span> <span class="n">NumOfProducts</span> <span class="o">+</span> <span class="n">HasCrCard</span> <span class="o">+</span> <span class="n">IsActiveMember</span> <span class="o">+</span> <span class="n">EstimatedSalary</span> <span class="o">+</span> <span class="n">Female</span> <span class="o">+</span> <span class="n">France</span> <span class="o">+</span> <span class="n">Spain</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">logit</span> <span class="o">=</span> <span class="n">glm</span><span class="p">(</span><span class="n">fm</span><span class="p">,</span> <span class="n">train</span><span class="p">,</span> <span class="n">Binomial</span><span class="p">(),</span> <span class="n">ProbitLink</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Predict the target variable on test data </span>
</span></span><span class="line"><span class="cl"><span class="n">prediction</span> <span class="o">=</span> <span class="n">predict</span><span class="p">(</span><span class="n">logit</span><span class="p">,</span><span class="n">test</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Convert probability score to class</span>
</span></span><span class="line"><span class="cl"><span class="n">prediction_class</span> <span class="o">=</span> <span class="p">[</span><span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mf">0.5</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">1</span> <span class="k">end</span> <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">prediction</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">prediction_df</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span><span class="n">y_actual</span> <span class="o">=</span> <span class="n">test</span><span class="o">.</span><span class="n">Exited</span><span class="p">,</span> <span class="n">y_predicted</span> <span class="o">=</span> <span class="n">prediction_class</span><span class="p">,</span> <span class="n">prob_predicted</span> <span class="o">=</span> <span class="n">prediction</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">prediction_df</span><span class="o">.</span><span class="n">correctly_classified</span> <span class="o">=</span> <span class="n">prediction_df</span><span class="o">.</span><span class="n">y_actual</span> <span class="o">.==</span> <span class="n">prediction_df</span><span class="o">.</span><span class="n">y_predicted</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Accuracy Score</span>
</span></span><span class="line"><span class="cl"><span class="n">accuracy</span> <span class="o">=</span> <span class="n">mean</span><span class="p">(</span><span class="n">prediction_df</span><span class="o">.</span><span class="n">correctly_classified</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">print</span><span class="p">(</span><span class="s">&#34;Accuracy of the model is : &#34;</span><span class="p">,</span><span class="n">accuracy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Confusion Matrix</span>
</span></span><span class="line"><span class="cl"><span class="n">confusion_matrix</span> <span class="o">=</span> <span class="n">MLBase</span><span class="o">.</span><span class="n">roc</span><span class="p">(</span><span class="n">prediction_df</span><span class="o">.</span><span class="n">y_actual</span><span class="p">,</span> <span class="n">prediction_df</span><span class="o">.</span><span class="n">y_predicted</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>Accuracy of the model is : 0.7169563791407019




ROCNums{Int64}
  p = 1550
  n = 1499
  tp = 1091
  tn = 1095
  fp = 404
  fn = 459
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">fpr</span><span class="p">,</span> <span class="n">tpr</span><span class="p">,</span> <span class="n">thresholds</span> <span class="o">=</span> <span class="n">sklearn</span><span class="o">.</span><span class="n">roc_curve</span><span class="p">(</span><span class="n">prediction_df</span><span class="o">.</span><span class="n">y_actual</span><span class="p">,</span> <span class="n">prediction_df</span><span class="o">.</span><span class="n">prob_predicted</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c"># Plot ROC curve</span>
</span></span></code></pre></div><pre><code>([0.0, 0.0, 0.0, 0.00066711140760507, 0.00066711140760507, 0.00133422281521014, 0.00133422281521014, 0.0020013342228152103, 0.0020013342228152103, 0.00266844563042028  …  0.9846564376250834, 0.9893262174783188, 0.9893262174783188, 0.9913275517011341, 0.9913275517011341, 0.9973315543695798, 0.9986657771847899, 0.9993328885923949, 0.9993328885923949, 1.0], [0.0, 0.0006451612903225806, 0.0025806451612903226, 0.0025806451612903226, 0.005161290322580645, 0.005161290322580645, 0.007741935483870968, 0.007741935483870968, 0.00903225806451613, 0.00903225806451613  …  0.9980645161290322, 0.9980645161290322, 0.9987096774193548, 0.9987096774193548, 0.9993548387096775, 0.9993548387096775, 0.9993548387096775, 0.9993548387096775, 1.0, 1.0], [1.9907624292252022, 0.9907624292252022, 0.983731024429679, 0.97951657298985, 0.9730082291507035, 0.9713532719467679, 0.9629327481173712, 0.9604203755106321, 0.9593444340323958, 0.9584649467140461  …  0.06923199350115271, 0.06553287523911823, 0.06469253560487893, 0.058594401854125504, 0.057872556108602216, 0.034170953161915506, 0.03357051125028141, 0.03297342671224324, 0.030937011626933943, 0.023743078872535135])
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">plot</span><span class="p">(</span><span class="n">fpr</span><span class="p">,</span> <span class="n">tpr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">title!</span><span class="p">(</span><span class="s">&#34;ROC curve&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p><img src="propensity_scoring_files/propensity_scoring_32_0.svg" alt="svg"></p>
<h2 id="final-discussion">Final Discussion</h2>
<p>When accounting for class imbalance, the model accuracy is reduced to 71 percent from about 81 percent.</p>
<p>While this seems counterintutive, the second model is actually a better model overall.</p>
<p>The model with 81 percent accuracy is simply more accurate by chance.  The bin of exits to remains is far larger.  Thus, reported accuracy is higher.</p>
<p>When the classes are normalized, we see a prediction of about 71 percent.  Confidently, I can say that this model would scale appropriately.</p>
<p>The first model on the other hand would scale to about 25-30 percent accuracy.</p>
]]></content>
			<postid> 6a43f28a598460fe5a7c550c77e26b44</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Markov Chains in Julia</title>
			<link>//localhost:1313/en/posts/markov-models-julia/</link>
			<pubDate>Thu, 26 May 2022 01:30:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/markov-models-julia/</guid>
			<description><![CDATA[Writing a Markov Simulation Problem the hard way.]]></description>
			<content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I am currently working on a <a href="https://blog.jnapolitano.io/series/legal-research-with-ai/">legal research series</a> where I perform statistical analysis and ml models to legal datasets.  My intention is to model the behavior of courts, determine the outcome of cases, and build a pipeline capable of identifying relevant case law by issue area.</p>
<p>That data set is nearly complete, but I have not decided which models to apply to it.  This is where Julia comes into play.</p>
<p>I plan to perform the statistical analysis and possible the ml workload with Julia.</p>
<p>In this post, I share an Algorithm to compute Markov Chains.</p>
<h2 id="markov-chains">Markov Chains</h2>
<p>I don&rsquo;t understand them completely.  I am grateful to <a href="https://julia.quantecon.org/tools_and_techniques/finite_markov.html">the text</a> for helping me to bettter grasp how they operate.</p>
<p>As far as my understanding goes they permit modeling the transition of states, possibly in infinite time, according to a probability distribution.  I recommend reading <a href="https://julia.quantecon.org/tools_and_techniques/finite_markov.html#markov-chains">this source</a> for authority.</p>
<h2 id="my-translation-of-markov-chains">My Translation of Markov Chains</h2>
<p>Lets start with a finite set of of elements that we call S.  In Cs terms think of this is as an array in the C Language.  It must be defined prior to an operation. <code>I think markov chains can be performed on unbounded sets as well but I'm not at that level yet</code>.</p>
<p>The set is called the set space.  Each value within it considered an individual state.</p>
<p>Markov Chains are sets that contain the Markov Property.  A markov property considers the probability of the model having a state within the space at a point in time.</p>
<p>Thus, the probability of going from x to y in one step of unit time can be computed.  If we consider the state changes within a stochastic matrix we can then determine the overall probabily of arriving at states within a system.</p>
<p>Review the <a href="https://julia.quantecon.org/tools_and_techniques/finite_markov.html#equation-mpp">formal definition</a>.</p>
<h2 id="application-to-my-work">Application to My Work</h2>
<p>I will be using this model to determine the probability of a justice transitioning from emotional states.  The central thesis of my understanding of judicial behavior is that the justices develop attitudinal states towards issue areas, legal provisions, states, religions, objects in general.  I will compute those states by first determining them.  I will then calculate the bayesian probability of state transition across time.  Finally, those distribution will be inputted in Markov Chain models.</p>
<h2 id="markov-simulation-the-hard-way">Markov Simulation the Hard Way</h2>
<p>The work below is not my own.  I attribute it to <a href="https://julia.quantecon.org/tools_and_techniques/finite_markov.html#equation-mpp">julia.quantecon.org/</a>.</p>
<p>The alogorithm takes a stochastic probability matrix(square in this case) and create a random distribution according to those probabilities.</p>
<p>The simulation then randomly selects values from the random distibution.  That discrete value is stored in the output.  As I understand it currently, the output is the Markov Chain.</p>
<p>The comments in the code are mine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Julia" data-lang="Julia"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">LinearAlgebra</span><span class="p">,</span> <span class="n">Statistics</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Distributions</span><span class="p">,</span> <span class="n">Plots</span><span class="p">,</span> <span class="n">Printf</span><span class="p">,</span> <span class="n">QuantEcon</span><span class="p">,</span> <span class="n">Random</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">mc_sample_path</span><span class="p">(</span><span class="n">P</span><span class="p">;</span> <span class="n">init</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">sample_size</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@assert</span> <span class="n">size</span><span class="p">(</span><span class="n">P</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">size</span><span class="p">(</span><span class="n">P</span><span class="p">)[</span><span class="mi">2</span><span class="p">]</span> <span class="c"># square required</span>
</span></span><span class="line"><span class="cl">    <span class="n">N</span> <span class="o">=</span> <span class="n">size</span><span class="p">(</span><span class="n">P</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="c"># should be square # well it&#39;s been asserted</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># create vector of discrete RVs for each row</span>
</span></span><span class="line"><span class="cl">    <span class="c"># In human terminology. Create a Categorical distribution of length = the size of the row of the matrix.  </span>
</span></span><span class="line"><span class="cl">    <span class="c">#IF that makes sense</span>
</span></span><span class="line"><span class="cl">    <span class="n">dists</span> <span class="o">=</span> <span class="p">[</span><span class="n">Categorical</span><span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="o">:</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">N</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># setup the simulation</span>
</span></span><span class="line"><span class="cl">    <span class="n">X</span> <span class="o">=</span> <span class="n">fill</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">sample_size</span><span class="p">)</span> <span class="c"># allocate memory, or zeros(Int64, sample_size) # I love Julia.  Readable syntax and low level contro</span>
</span></span><span class="line"><span class="cl">    <span class="n">X</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">init</span> <span class="c"># set the initial state Equal to 1 in this case.  </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">t</span> <span class="k">in</span> <span class="mi">2</span><span class="o">:</span><span class="n">sample_size</span> <span class="c"># start at position 2.  Work from t-1# This is a common technique.  Couldn&#39;t figure this out once in a technical interview.  I wrote an if else for the zero condition.... Not so smart</span>
</span></span><span class="line"><span class="cl">        <span class="n">dist</span> <span class="o">=</span> <span class="n">dists</span><span class="p">[</span><span class="n">X</span><span class="p">[</span><span class="n">t</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="c"># get discrete RV from last state&#39;s transition distribution</span>
</span></span><span class="line"><span class="cl">        <span class="n">X</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span> <span class="c"># draw new value</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">X</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h2 id="markov-simulation-the-easier-way">Markov Simulation the Easier Way</h2>
<p>Given a stochastic probability matrix, the Markov Chain function will produce a chain.</p>
<p>The simulate method will then simulate the chain across a n steps.</p>
<p>We can then take the mean of the output to determine the average amount of time spent in a state.  In this case the average amount of time spent in state 1 which should correlate to unemployment.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Julia" data-lang="Julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">LinearAlgebra</span><span class="p">,</span> <span class="n">Statistics</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Distributions</span><span class="p">,</span> <span class="n">Plots</span><span class="p">,</span> <span class="n">Printf</span><span class="p">,</span> <span class="n">QuantEcon</span><span class="p">,</span> <span class="n">Random</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">easy_way</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">P</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.4</span> <span class="mf">0.6</span><span class="p">;</span> <span class="mf">0.2</span> <span class="mf">0.8</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">mc</span> <span class="o">=</span> <span class="n">MarkovChain</span><span class="p">(</span><span class="n">P</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">X</span> <span class="o">=</span> <span class="n">simulate</span><span class="p">(</span><span class="n">mc</span><span class="p">,</span> <span class="mi">100_000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">μ_2</span> <span class="o">=</span> <span class="n">count</span><span class="p">(</span><span class="n">X</span> <span class="o">.==</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="n">length</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="c"># or mean(x -&gt; x == 1, X)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="sb">```julia
</span></span></span></code></pre></div>]]></content>
			<postid> 30dbb45f9db9508988799d727fecded2</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Quantitative Julia Problems</title>
			<link>//localhost:1313/en/posts/pi-with-julia/</link>
			<pubDate>Tue, 24 May 2022 01:30:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/pi-with-julia/</guid>
			<description><![CDATA[Testing your Julia Configuration with some numerical computing.]]></description>
			<content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In my <a href="https://blog.jnapolitano.io/posts/rocky-linux-8-julia/">previous post</a>, I demonstrated how to configure Rocky Linux and RHEL distributions for quantitative analysis.</p>
<p>In this post, I include a few sample programs to test your installation.</p>
<h2 id="how-to-run-the-programs">How to run the programs</h2>
<p>I saved them to a folder within the project directory.</p>
<h3 id="activate-the-project">Activate the Project</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Pkg</span>
</span></span><span class="line"><span class="cl"><span class="n">Pkg</span><span class="o">.</span><span class="n">activate</span><span class="p">(</span><span class="s">&#34;.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">#cd(&#34;&lt;sub-directory-containing-files&gt;) optional</span>
</span></span></code></pre></div><h3 id="run-a-program">Run a program</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Julia" data-lang="Julia"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="s">&#34;path/to/script-name.jl&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="estimate-the-value-of-pi">Estimate the Value of Pi</h2>
<p>Use the Monte Carlo method to estimate the value of pi.</p>
<h3 id="solution">Solution</h3>
<p>We estimate the area by sampling bivariate uniforms and looking at the fraction that fall into the unit circle.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Julia" data-lang="Julia"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Number of iterations</span>
</span></span><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="mi">1000000</span>
</span></span><span class="line"><span class="cl"><span class="c">#counter variable</span>
</span></span><span class="line"><span class="cl"><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">n</span> <span class="c"># for i in the range of 1 to n</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">global</span> <span class="n">count</span>  <span class="c"># make count global to reference within the loop.  Otherwise the the variable will be understood to be a local within the for loop</span>
</span></span><span class="line"><span class="cl">    <span class="c">#rand(2) Returns a two element vector.  </span>
</span></span><span class="line"><span class="cl">    <span class="c">#Can be read as let u be equal to the first index of the vector and let v be equal to the second</span>
</span></span><span class="line"><span class="cl">    <span class="n">u</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">rand</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">d</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">((</span><span class="n">u</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">)</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">v</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">)</span><span class="o">^</span><span class="mi">2</span><span class="p">)</span>  <span class="c"># distance from middle of square</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">d</span> <span class="o">&lt;</span> <span class="mf">0.5</span>
</span></span><span class="line"><span class="cl">        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">area_estimate</span> <span class="o">=</span> <span class="n">count</span> <span class="o">/</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">print</span><span class="p">(</span><span class="n">area_estimate</span> <span class="o">*</span> <span class="mi">4</span><span class="p">)</span>  <span class="c"># dividing by radius**2</span>
</span></span></code></pre></div><h2 id="use-quadgk-to-aproximate-an-integral">Use QuadGk to Aproximate an integral</h2>
<p>The trapezoidal rule can be used to aproximate an integral.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Julia" data-lang="Julia"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">QuadGK</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="mi">8</span> <span class="c"># The Function</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">value</span><span class="p">,</span> <span class="n">accuracy</span> <span class="o">=</span> <span class="n">quadgk</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span> <span class="c"># pass the function, the lower bound and the upper bound</span>
</span></span></code></pre></div>]]></content>
			<postid> 6b4d2501f3e215b4ddec60d24e0a9057</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Configuring Rocky Linux 8 for Quantitative Analysis in Julia</title>
			<link>//localhost:1313/en/posts/rocky-linux-8-julia/</link>
			<pubDate>Tue, 24 May 2022 00:30:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/rocky-linux-8-julia/</guid>
			<description><![CDATA[Configure Rocky Linux 8 for Julia development and quantitative analysis.]]></description>
			<content type="html"><![CDATA[<h2 id="install-jupyter">Install Jupyter</h2>
<p>Start with installing jupyter.  It will serve as our server for development.</p>
<h3 id="install-dependencies">Install Dependencies</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo dnf install gcc python3-devel kernel-headers-<span class="k">$(</span>uname -r<span class="k">)</span>
</span></span></code></pre></div><h3 id="install-jupyter-via-pip">Install Jupyter Via Pip</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip3 install --user jupyter
</span></span></code></pre></div><h2 id="install-julia">Install Julia</h2>
<p>We will be installing from the official binaries.</p>
<p>Make a directory in user profile.  i simply ran <code>mkdir julia</code> in the <code>home</code> folder.  The <code>cd</code> to <code>julia</code>.</p>
<p>When in the folder run</p>
<h3 id="wget">Wget</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://julialang-s3.julialang.org/bin/linux/x64/1.7/julia-1.7.2-linux-x86_64.tar.gz
</span></span></code></pre></div><h3 id="unpack">Unpack</h3>
<p>Then unpack</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tar zxvf julia-1.7.2-linux-x86_64.tar.gz
</span></span></code></pre></div><h3 id="add-to-path">Add to Path</h3>
<p>In my case I added the following to my shell profile.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$PATH</span><span class="s2">:/home/jnapolitano/julia/julia-1.7.2/bin/&#34;</span>
</span></span></code></pre></div><h2 id="downloading-the-quantecon-project">Downloading the QuantEcon Project</h2>
<p>I will be working through the QuantEcon textbook provided at <a href="https://julia.quantecon.org/">https://julia.quantecon.org/</a>.</p>
<h3 id="clone-the-repository">Clone the repository</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git clone https://github.com/quantecon/lecture-julia.notebooks
</span></span></code></pre></div><h2 id="activate-the-project">Activate the Project.</h2>
<p>Run a julia repl by typing <code>julia</code> into your terminal&hellip; if you added it to the path.  Otherwise navigate to the bin and activate julia.</p>
<h3 id="install-the-dependencies">Install the Dependencies</h3>
<p>Next run the following commands from the Julia REPL.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Pkg</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Pkg</span><span class="o">.</span><span class="n">activate</span><span class="p">(</span><span class="s">&#34;.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Pkg</span><span class="o">.</span><span class="n">instantiate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="sb">```
</span></span></span><span class="line"><span class="cl"><span class="sb">
</span></span></span><span class="line"><span class="cl"><span class="sb">IT will take some time to download and extract all of the packages give it time.  
</span></span></span></code></pre></div>]]></content>
			<postid> 8e234204207845c3c43e75b983a9cb01</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Rice Paddy Methane Emissions Estimation: Part 2</title>
			<link>//localhost:1313/en/posts/rice-paddy-emissions-2/</link>
			<pubDate>Mon, 23 May 2022 19:30:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/rice-paddy-emissions-2/</guid>
			<description><![CDATA[Comparing 5 years of methane emissions to determine if Climate Trace forecasts greater emissions than UN FAOSTAT.]]></description>
			<content type="html"><![CDATA[<h1 id="methane-emissions-estimation-data-part-2-a-comparison-between-faostat-and-university-of-malaysia-estimates">Methane Emissions Estimation Data Part 2: A Comparison between FAOSTAT and University of Malaysia Estimates</h1>
<p>This post documents the data exploration phase of a project that determines whether global methane emissions produced by rice paddies are undercounted.</p>
<p>It is fairly code python and pandas heavy.</p>
<p>The code and data exploration follows the summary below.</p>
<h2 id="hypothesis-testing-the-university-of-malaysia-paper">Hypothesis Testing the University of Malaysia Paper</h2>
<h2 id="claims">Claims</h2>
<ul>
<li>That the distributions do not differ between 2020 and 2019</li>
<li>That the means do no differ between 2020 and 2019</li>
</ul>
<h2 id="what-will-be-tested">What will be Tested.</h2>
<ul>
<li>Shapiro-Wilk Test</li>
<li>Mann-Whitney U Test</li>
<li>Kruskal Wallis</li>
<li>Friedman</li>
</ul>
<h2 id="analysis">Analysis</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">scipy.stats</span> <span class="k">as</span> <span class="nn">stats</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">filepath</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/wattime-takehome/wattime-takehome/data/ch4_2015-2021.xlsx&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">hypothesis_testing_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="drop-total-row-from-the-data">Drop total row from the data</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">hypothesis_testing_df</span> <span class="o">=</span> <span class="n">hypothesis_testing_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">hypothesis_testing_df</span><span class="p">[</span><span class="s1">&#39;country_name&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&#34;Total&#34;</span><span class="p">)]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span> <span class="c1">#copying to avoid modifying slices in memory.  Old df should also drop from memory in production environment.</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">hypothesis_testing_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="test-for-normality-shapiro-wilk">Test for Normality: Shapiro-Wilk</h3>
<h4 id="2019">2019</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## Selecting Malaysia 2019 Data </span>
</span></span><span class="line"><span class="cl"><span class="n">data_2019</span> <span class="o">=</span> <span class="n">hypothesis_testing_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2019&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">data_2019</span>
</span></span></code></pre></div><pre><code>0     2.070985e+06
1     3.294713e+05
2     5.603352e+06
3     1.148324e+04
4     1.266668e+06
5     7.501556e+06
6     9.500199e+04
7     4.566914e+04
8     2.332056e+05
9     5.947277e+05
10    1.327782e+05
11    1.461058e+04
12    8.476088e+04
13    1.256888e+06
14    1.056287e+05
15    1.164235e+05
16    6.528548e+05
17    3.584550e+05
18    9.655062e+04
19    1.305046e+06
20    8.990870e+04
21    1.691351e+05
22    1.269751e+06
Name: tCH4_2019, dtype: float64
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">results</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">shapiro</span><span class="p">(</span><span class="n">data_2019</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;stat=</span><span class="si">%.3f</span><span class="s1">, p=</span><span class="si">%.3f</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">results</span><span class="o">.</span><span class="n">statistic</span><span class="p">,</span> <span class="n">results</span><span class="o">.</span><span class="n">pvalue</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">results</span><span class="o">.</span><span class="n">pvalue</span> <span class="o">&gt;</span> <span class="mf">0.05</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Probably Gaussian&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Probably not Gaussian&#39;</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>stat=0.567, p=0.000
Probably not Gaussian
</code></pre>
<h5 id="results">Results</h5>
<p>The distribution is not gausian so a non-paremtric test must be completed.  It is not necessary to perform this test on the 2020 data, but I will do so anyways for practice.</p>
<h4 id="2020">2020</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## Selecting the Malaysia Data 2020</span>
</span></span><span class="line"><span class="cl"><span class="n">data_2020</span> <span class="o">=</span> <span class="n">hypothesis_testing_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2020&#39;</span><span class="p">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">results</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">shapiro</span><span class="p">(</span><span class="n">data_2020</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;stat=</span><span class="si">%.3f</span><span class="s1">, p=</span><span class="si">%.3f</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">results</span><span class="o">.</span><span class="n">statistic</span><span class="p">,</span> <span class="n">results</span><span class="o">.</span><span class="n">pvalue</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">results</span><span class="o">.</span><span class="n">pvalue</span> <span class="o">&gt;</span> <span class="mf">0.05</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Probably Gaussian&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Probably not Gaussian&#39;</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>stat=0.565, p=0.000
Probably not Gaussian
</code></pre>
<h5 id="results-1">Results</h5>
<p>The 2020 data is not gausian which verifies that we will need to perform a non parmetric test</p>
<h3 id="independence-of-samples">Independence of Samples.</h3>
<p>We have to assume that the samples are independent of each other as we know they are dependent on hecatares.<br>
Though the correlations are rather high this is due to the smiliarity of hectares per year.  Thus the amount of ch4 is similiar</p>
<h3 id="distribution-similiarity">Distribution Similiarity</h3>
<h4 id="mann-whitney-u-test">Mann-Whitney U Test</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Example of the Mann-Whitney U Test</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">stat</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">mannwhitneyu</span><span class="p">(</span><span class="n">data_2019</span><span class="p">,</span> <span class="n">data_2020</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;stat=</span><span class="si">%.3f</span><span class="s1">, p=</span><span class="si">%.3f</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">stat</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">p</span> <span class="o">&gt;</span> <span class="mf">0.05</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Probably the same distribution&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Probably different distributions&#39;</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>stat=266.000, p=0.982
Probably the same distribution
</code></pre>
<h3 id="kruskal-wallis-test">Kruskal Wallis test</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">stat</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">kruskal</span><span class="p">(</span><span class="n">data_2019</span><span class="p">,</span> <span class="n">data_2020</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;stat=</span><span class="si">%.3f</span><span class="s1">, p=</span><span class="si">%.3f</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">stat</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">p</span> <span class="o">&gt;</span> <span class="mf">0.05</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Probably the same distribution&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Probably different distributions&#39;</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>stat=0.001, p=0.974
Probably the same distribution
</code></pre>
<h3 id="friedman-test">Friedman Test</h3>
<p>Just for the sake of it I will compare data across all distributions</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Example of the Friedman Test</span>
</span></span><span class="line"><span class="cl"><span class="c1">#data_2014 = hypothesis_testing_df[&#39;tCH4_2014&#39;]</span>
</span></span><span class="line"><span class="cl"><span class="n">data_2015</span> <span class="o">=</span> <span class="n">hypothesis_testing_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2015&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">data_2016</span> <span class="o">=</span> <span class="n">hypothesis_testing_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2016&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">data_2017</span> <span class="o">=</span> <span class="n">hypothesis_testing_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2017&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">data_2018</span> <span class="o">=</span> <span class="n">hypothesis_testing_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2018&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">stat</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="n">stats</span><span class="o">.</span><span class="n">friedmanchisquare</span><span class="p">(</span><span class="n">data_2015</span><span class="p">,</span> <span class="n">data_2016</span><span class="p">,</span> <span class="n">data_2017</span><span class="p">,</span> <span class="n">data_2018</span><span class="p">,</span> <span class="n">data_2019</span><span class="p">,</span> <span class="n">data_2020</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;stat=</span><span class="si">%.3f</span><span class="s1">, p=</span><span class="si">%.3f</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">stat</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">p</span> <span class="o">&gt;</span> <span class="mf">0.05</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Probably the same distribution&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Probably different distributions&#39;</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>stat=11.472, p=0.043
Probably different distributions
</code></pre>
<h4 id="results-2">Results.</h4>
<p>Some distributions differ from one another.  Which those are have yet to be discovered.  For the sake of this analysis I will not attempt to identify them.</p>
<p>The statment that the distributions of the 2019 and 2020 data do not differ cannot differ.  That said we also cannot claim that the means are statistically equivalent as the data is not parametric.</p>
]]></content>
			<postid> 322d693892ecb0bfc2023d0a9099d0f5</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Conduct Legal Research with AI Part 8: Case Nodes Sample Data</title>
			<link>//localhost:1313/en/posts/legal-research-part-8/</link>
			<pubDate>Mon, 23 May 2022 16:30:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/legal-research-part-8/</guid>
			<description><![CDATA[Merging Oyez and Library of Congress Data into a Comprehensive Data Set]]></description>
			<content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The legal Research with AI Series is expanding quickly. This is the 9th post related to it in someway.  Building this pipeline and integrating multiple datasets into nodes is proving to be verbose.</p>
<p>This post documents merging Oyez and Library of Congress of data structured json files that represent nodes and hierarchal relationships.</p>
<h2 id="main-function">Main Function</h2>
<p>The plan for this program is to:</p>
<ul>
<li>Read the prepared dataframe created in the <a href="https://blog.jnapolitano.io/posts/legal-research-part-7/">legal research part 7 post</a></li>
<li>for each row of the df load a dictionary from the the libary of congress path and the oyez path</li>
<li>Set keys on the Oyez dataset</li>
<li>Write the updated Oyez dataset to file</li>
</ul>
<p>Review the work below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Python" data-lang="Python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># outpath fo the current file</span>
</span></span><span class="line"><span class="cl">    <span class="n">inpath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span><span class="s2">&#34;case_files.csv&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">outpath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span><span class="s2">&#34;nodes&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">#Create a df from the case_files.csv file</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">inpath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">master_df</span><span class="o">.</span><span class="n">iterrows</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span> <span class="o">=</span> <span class="n">read_json</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s2">&#34;Path&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">loc_dict</span> <span class="o">=</span> <span class="n">read_json</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s1">&#39;Path_1&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;loc_id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;loc_url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;simple_citation&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;loc_id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;shelf_id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;shelf_id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;issues&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">nodify_list</span><span class="p">(</span><span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">],</span><span class="s1">&#39;issue&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;major_topics&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">nodify_list</span><span class="p">(</span><span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;subject_major_case_topic&#39;</span><span class="p">],</span> <span class="s1">&#39;major_topic&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;major_topics&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;loc_pdf&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;resources&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;pdf&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">outfile</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">outpath</span><span class="p">,</span><span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;simple_citation&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">        <span class="n">outfile</span> <span class="o">=</span> <span class="n">outfile</span> <span class="o">+</span> <span class="s2">&#34;.json&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">outfile</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">            <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">outpath</span><span class="p">,</span><span class="n">f</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="helper-functions">Helper Functions</h2>
<h3 id="read-json">Read Json</h3>
<p>read_json simply reads json into a dictionary with the json.loads method with a context manager.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Python" data-lang="Python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">read_json</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">        <span class="nb">dict</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">dict</span>
</span></span></code></pre></div><h3 id="nodify-list">Nodify List</h3>
<p>Some of the data in the Loc dataset is stored in lists.  I want them to be individual nodes in the final dataset.  To account for this, the nodify_list function returns a list of dictionaries containing keys that will be used to construct graph nodes.   I will most likely need to modify these as the graph schema expands with more data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Python" data-lang="Python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">nodify_list</span><span class="p">(</span><span class="n">lst</span><span class="p">,</span><span class="n">node_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">return_list</span><span class="o">=</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">        <span class="nb">dict</span> <span class="o">=</span> <span class="p">{</span><span class="n">node_name</span><span class="p">:</span> <span class="n">item</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">return_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">return_list</span>
</span></span></code></pre></div><h2 id="the-complete-program">The Complete Program</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#merging.python</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">doctest</span> <span class="kn">import</span> <span class="n">master</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">read_json</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">        <span class="nb">dict</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">dict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">nodify_list</span><span class="p">(</span><span class="n">lst</span><span class="p">,</span><span class="n">node_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">return_list</span><span class="o">=</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">        <span class="nb">dict</span> <span class="o">=</span> <span class="p">{</span><span class="n">node_name</span><span class="p">:</span> <span class="n">item</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">return_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">return_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># outpath fo the current file</span>
</span></span><span class="line"><span class="cl">    <span class="n">inpath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span><span class="s2">&#34;case_files.csv&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">outpath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span><span class="s2">&#34;nodes&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">#Create a df from the case_files.csv file</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">inpath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">master_df</span><span class="o">.</span><span class="n">iterrows</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span> <span class="o">=</span> <span class="n">read_json</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s2">&#34;Path&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">loc_dict</span> <span class="o">=</span> <span class="n">read_json</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s1">&#39;Path_1&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;loc_id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;loc_url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;simple_citation&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;loc_id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;shelf_id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;shelf_id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;issues&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">nodify_list</span><span class="p">(</span><span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">],</span><span class="s1">&#39;issue&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;major_topics&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">nodify_list</span><span class="p">(</span><span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;subject_major_case_topic&#39;</span><span class="p">],</span> <span class="s1">&#39;major_topic&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;major_topics&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;loc_pdf&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">loc_dict</span><span class="p">[</span><span class="s1">&#39;resources&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;pdf&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">outfile</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">outpath</span><span class="p">,</span><span class="n">oyez_dict</span><span class="p">[</span><span class="s1">&#39;simple_citation&#39;</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">        <span class="n">outfile</span> <span class="o">=</span> <span class="n">outfile</span> <span class="o">+</span> <span class="s2">&#34;.json&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">outfile</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">            <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">oyez_dict</span><span class="p">,</span><span class="n">f</span><span class="p">,</span> <span class="n">indent</span> <span class="o">=</span> <span class="mi">6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(oyez_dict)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="sample-json-output">Sample Json Output</h2>
<p>Below is a sample of what the program outputs.  It is a single case.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;decisions&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/case_decision/case_decision/16396&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;votes&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;ideology&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;seniority&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;opinion_type&#34;</span><span class="p">:</span> <span class="s2">&#34;majority&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;member&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/john_marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15085</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">53035</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/john_marshall/john_marshall.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32729</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">},</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">12570</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;john_marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;John Adams&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2729&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Chief Justice of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4244119200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2729</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5330167200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">],</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;John Marshall&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">},</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/decision_vote/decision_vote/205605&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;vote&#34;</span><span class="p">:</span> <span class="s2">&#34;majority&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;joining&#34;</span><span class="p">:</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;ideology&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;seniority&#34;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;opinion_type&#34;</span><span class="p">:</span> <span class="s2">&#34;none&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;member&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/bushrod_washington&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15093</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Washington&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">42759</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/bushrod_washington/bushrod_washington.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32698</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">},</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">11339</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;bushrod_washington&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;John Adams&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2737&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4421066400</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2737</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5400756000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">],</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Bushrod Washington&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">},</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/decision_vote/decision_vote/205606&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;vote&#34;</span><span class="p">:</span> <span class="s2">&#34;majority&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;joining&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/john_marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15085</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">53035</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/john_marshall/john_marshall.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32729</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">},</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">12570</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;john_marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;John Adams&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2729&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Chief Justice of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4244119200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2729</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5330167200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">],</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;John Marshall&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                              <span class="p">]</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;ideology&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;seniority&#34;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;opinion_type&#34;</span><span class="p">:</span> <span class="s2">&#34;concurrence&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;member&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/william_johnson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15059</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Johnson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">45940</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/william_johnson/william_johnson.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32779</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">},</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">11046</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;william_johnson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;Thomas Jefferson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2703&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4273149600</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2703</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5227524000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">],</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;William Johnson&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">},</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/decision_vote/decision_vote/205607&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;vote&#34;</span><span class="p">:</span> <span class="s2">&#34;majority&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;joining&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/john_marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15085</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">53035</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/john_marshall/john_marshall.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32729</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">},</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">12570</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;john_marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;John Adams&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2729&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Chief Justice of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4244119200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2729</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5330167200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">],</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;John Marshall&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                              <span class="p">]</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;ideology&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;seniority&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;opinion_type&#34;</span><span class="p">:</span> <span class="s2">&#34;none&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;member&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/brockholst_livingston&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15111</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Livingston&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">44786</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/brockholst_livingston/brockholst_livingston.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32714</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">},</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">5901</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;brockholst_livingston&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;Thomas Jefferson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2755&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4632314400</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2755</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5142160800</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">],</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Henry Brockholst Livingston&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">},</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/decision_vote/decision_vote/205608&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;vote&#34;</span><span class="p">:</span> <span class="s2">&#34;majority&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;joining&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/john_marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15085</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">53035</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/john_marshall/john_marshall.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32729</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">},</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">12570</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;john_marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;John Adams&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2729&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Chief Justice of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4244119200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2729</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5330167200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">],</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;John Marshall&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                              <span class="p">]</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;ideology&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;seniority&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;opinion_type&#34;</span><span class="p">:</span> <span class="s2">&#34;none&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;member&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/thomas_todd&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15039</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Todd&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">41113</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/thomas_todd/thomas_todd.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32769</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">},</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">6854</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;thomas_todd&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;Thomas Jefferson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2683&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4540989600</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2683</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5133175200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">],</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Thomas Todd&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">},</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/decision_vote/decision_vote/205609&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;vote&#34;</span><span class="p">:</span> <span class="s2">&#34;majority&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;joining&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/john_marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15085</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">53035</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/john_marshall/john_marshall.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32729</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">},</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">12570</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;john_marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;John Adams&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2729&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Chief Justice of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4244119200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2729</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5330167200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                      <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">],</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;John Marshall&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                              <span class="p">]</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;ideology&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;seniority&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;opinion_type&#34;</span><span class="p">:</span> <span class="s2">&#34;none&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;member&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/william_cushing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15077</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Cushing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">52796</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/william_cushing/william_cushing.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32776</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">},</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">7527</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;william_cushing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;George Washington&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2721&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-5027076000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2721</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5677408800</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">],</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;William Cushing&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">},</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/decision_vote/decision_vote/205610&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;vote&#34;</span><span class="p">:</span> <span class="s2">&#34;none&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;joining&#34;</span><span class="p">:</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;ideology&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;seniority&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;opinion_type&#34;</span><span class="p">:</span> <span class="s2">&#34;none&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;member&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/samuel_chase&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15105</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Chase&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">52231</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/samuel_chase/samuel_chase.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32759</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">},</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">5613</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;samuel_chase&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;George Washington&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2749&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-5002970400</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2749</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5487933600</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                          <span class="p">}</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">],</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Samuel Chase&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">},</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/decision_vote/decision_vote/205611&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;vote&#34;</span><span class="p">:</span> <span class="s2">&#34;none&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;joining&#34;</span><span class="p">:</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                  <span class="p">],</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;minority_vote&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;winning_party&#34;</span><span class="p">:</span> <span class="s2">&#34;Peck&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;decision_type&#34;</span><span class="p">:</span> <span class="s2">&#34;majority opinion&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;majority_vote&#34;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;Under the  Contracts Clause (Article 1, Section 10, Clause 1), states cannot rescind an agreement even if that agreement was reached illegally&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/cases/1789-1850/10us87&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;second_party&#34;</span><span class="p">:</span> <span class="s2">&#34;John Peck&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;first_party&#34;</span><span class="p">:</span> <span class="s2">&#34;Robert Fletcher&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;advocates&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;A case in which the Court held that a contract is still binding and enforceable, even if secured illegally.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;first_party_label&#34;</span><span class="p">:</span> <span class="s2">&#34;Petitioner&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;related_cases&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;conclusion&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;p&gt;In a unanimous opinion, the Court held that since the estate had been legally \&#34;passed into the hands of a purchaser for a valuable consideration,\&#34; the Georgia legislature could not take away the land or invalidate the contract. Noting that the Constitution did not permit bills of attainder or ex post facto laws, the Court held that laws annulling contracts or grants made by previous legislative acts were constitutionally impermissible.&lt;/p&gt;\n&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;facts_of_the_case&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;p&gt;In 1795, the Georgia state legislature passed a land grant awarding territory to four companies. The following year, however, the legislature voided the law and declared all rights and claims under it to be invalid. In 1800, John Peck acquired land that was part of the original legislative grant. He then sold the land to Robert Fletcher three years later, claiming that past sales of the land had been legitimate. Fletcher argued that since the original sale of the land had been declared invalid, Peck had no legal right to sell the land and thus committed a breach of contract.&lt;/p&gt;\n&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;timeline&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/case_timeline/case_timeline/52829&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;dates&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">-5045220000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">-5075546400</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">-5075460000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">-5075373600</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">-5075287200</span>
</span></span><span class="line"><span class="cl">                  <span class="p">],</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;event&#34;</span><span class="p">:</span> <span class="s2">&#34;Argued&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/case_timeline/case_timeline/52830&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;dates&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                        <span class="mi">-5042714400</span>
</span></span><span class="line"><span class="cl">                  <span class="p">],</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;event&#34;</span><span class="p">:</span> <span class="s2">&#34;Decided&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;opinion_announcement&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;second_party_label&#34;</span><span class="p">:</span> <span class="s2">&#34;Respondent&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;heard_by&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/courts/marshall6&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15247</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;members&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/john_marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15085</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">53035</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/john_marshall/john_marshall.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32729</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">},</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">12570</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;john_marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;John Adams&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2729&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Chief Justice of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4244119200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2729</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5330167200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                              <span class="p">],</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;John Marshall&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/william_cushing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15077</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Cushing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">52796</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/william_cushing/william_cushing.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32776</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">},</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">7527</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;william_cushing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;George Washington&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2721&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-5027076000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2721</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5677408800</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                              <span class="p">],</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;William Cushing&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/samuel_chase&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15105</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Chase&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">52231</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/samuel_chase/samuel_chase.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32759</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">},</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">5613</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;samuel_chase&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;George Washington&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2749&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-5002970400</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2749</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5487933600</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                              <span class="p">],</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Samuel Chase&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/bushrod_washington&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15093</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Washington&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">42759</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/bushrod_washington/bushrod_washington.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32698</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">},</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">11339</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;bushrod_washington&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;John Adams&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2737&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4421066400</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2737</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5400756000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                              <span class="p">],</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Bushrod Washington&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/william_johnson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15059</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Johnson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">45940</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/william_johnson/william_johnson.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32779</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">},</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">11046</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;william_johnson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;Thomas Jefferson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2703&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4273149600</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2703</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5227524000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                              <span class="p">],</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;William Johnson&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/brockholst_livingston&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15111</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Livingston&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">44786</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/brockholst_livingston/brockholst_livingston.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32714</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">},</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">5901</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;brockholst_livingston&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;Thomas Jefferson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2755&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4632314400</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2755</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5142160800</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                              <span class="p">],</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Henry Brockholst Livingston&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/thomas_todd&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15039</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Todd&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">41113</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/thomas_todd/thomas_todd.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32769</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">},</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">6854</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;thomas_todd&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;Thomas Jefferson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2683&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4540989600</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2683</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5133175200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                          <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                              <span class="p">],</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Thomas Todd&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                  <span class="p">],</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;court_start&#34;</span><span class="p">:</span> <span class="mi">-5133175200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;marshall6&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;images&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">4355969</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/courts/marshall6.jpg&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">78522</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/jpeg&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                  <span class="p">],</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Marshall Court (1807-1810)&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;manner_of_jurisdiction&#34;</span><span class="p">:</span> <span class="s2">&#34;Writ of &lt;i&gt;certiorari&lt;/i&gt;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">1793</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;lower_court&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;justia_url&#34;</span><span class="p">:</span> <span class="s2">&#34;https://supreme.justia.com/cases/federal/us/10/87/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;docket_number&#34;</span><span class="p">:</span> <span class="s2">&#34;None&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">62333</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;written_opinion&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;judge_full_name&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;title&#34;</span><span class="p">:</span> <span class="s2">&#34;Syllabus&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">16171</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/case_document/written_opinion/16171&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;justia_opinion_url&#34;</span><span class="p">:</span> <span class="s2">&#34;https://supreme.justia.com/cases/federal/us/10/87/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;judge_last_name&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;justia_opinion_id&#34;</span><span class="p">:</span> <span class="mi">1907670</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;syllabus&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;label&#34;</span><span class="p">:</span> <span class="s2">&#34;Syllabus&#34;</span>
</span></span><span class="line"><span class="cl">                  <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;judge_full_name&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;title&#34;</span><span class="p">:</span> <span class="s2">&#34;View Case&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">16172</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/case_document/written_opinion/16172&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;justia_opinion_url&#34;</span><span class="p">:</span> <span class="s2">&#34;https://supreme.justia.com/cases/federal/us/10/87/case.html&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;judge_last_name&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;justia_opinion_id&#34;</span><span class="p">:</span> <span class="mi">1907671</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;case&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;label&#34;</span><span class="p">:</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl">                  <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;question&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;p&gt;Could the contract between Fletcher and Peck be invalidated by an act of the Georgia legislature?&lt;/p&gt;\n&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;citation&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;page&#34;</span><span class="p">:</span> <span class="s2">&#34;87&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;volume&#34;</span><span class="p">:</span> <span class="s2">&#34;10&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;year&#34;</span><span class="p">:</span> <span class="s2">&#34;1810&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/case_citation/case_citation/27135&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;oral_argument_audio&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;decided_by&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/courts/marshall6&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15247</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;members&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                  <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/john_marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15085</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">53035</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/john_marshall/john_marshall.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32729</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">12570</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;john_marshall&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                              <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;John Adams&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2729&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Chief Justice of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4244119200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2729</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5330167200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">}</span>
</span></span><span class="line"><span class="cl">                        <span class="p">],</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;John Marshall&#34;</span>
</span></span><span class="line"><span class="cl">                  <span class="p">},</span>
</span></span><span class="line"><span class="cl">                  <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/william_cushing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15077</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Cushing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">52796</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/william_cushing/william_cushing.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32776</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">7527</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;william_cushing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                              <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;George Washington&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2721&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-5027076000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2721</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5677408800</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">}</span>
</span></span><span class="line"><span class="cl">                        <span class="p">],</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;William Cushing&#34;</span>
</span></span><span class="line"><span class="cl">                  <span class="p">},</span>
</span></span><span class="line"><span class="cl">                  <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/samuel_chase&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15105</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Chase&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">52231</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/samuel_chase/samuel_chase.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32759</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">5613</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;samuel_chase&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                              <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;George Washington&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2749&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-5002970400</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2749</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5487933600</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">}</span>
</span></span><span class="line"><span class="cl">                        <span class="p">],</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Samuel Chase&#34;</span>
</span></span><span class="line"><span class="cl">                  <span class="p">},</span>
</span></span><span class="line"><span class="cl">                  <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/bushrod_washington&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15093</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Washington&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">42759</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/bushrod_washington/bushrod_washington.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32698</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">11339</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;bushrod_washington&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                              <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;John Adams&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2737&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4421066400</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2737</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5400756000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">}</span>
</span></span><span class="line"><span class="cl">                        <span class="p">],</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Bushrod Washington&#34;</span>
</span></span><span class="line"><span class="cl">                  <span class="p">},</span>
</span></span><span class="line"><span class="cl">                  <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/william_johnson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15059</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Johnson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">45940</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/william_johnson/william_johnson.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32779</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">11046</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;william_johnson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                              <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;Thomas Jefferson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2703&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4273149600</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2703</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5227524000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">}</span>
</span></span><span class="line"><span class="cl">                        <span class="p">],</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;William Johnson&#34;</span>
</span></span><span class="line"><span class="cl">                  <span class="p">},</span>
</span></span><span class="line"><span class="cl">                  <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/brockholst_livingston&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15111</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Livingston&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">44786</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/brockholst_livingston/brockholst_livingston.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32714</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">5901</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;brockholst_livingston&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                              <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;Thomas Jefferson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2755&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4632314400</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2755</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5142160800</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">}</span>
</span></span><span class="line"><span class="cl">                        <span class="p">],</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Henry Brockholst Livingston&#34;</span>
</span></span><span class="line"><span class="cl">                  <span class="p">},</span>
</span></span><span class="line"><span class="cl">                  <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/people/thomas_todd&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;ID&#34;</span><span class="p">:</span> <span class="mi">15039</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;last_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Todd&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;thumbnail&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">41113</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/people/thomas_todd/thomas_todd.thumb.png&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">32769</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                              <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/png&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">},</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;length_of_service&#34;</span><span class="p">:</span> <span class="mi">6854</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;thomas_todd&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;roles&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                              <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;appointing_president&#34;</span><span class="p">:</span> <span class="s2">&#34;Thomas Jefferson&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/preson_role/scotus_justice/2683&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;role_title&#34;</span><span class="p">:</span> <span class="s2">&#34;Associate Justice of the Supreme Court of the United States&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;scotus_justice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;date_end&#34;</span><span class="p">:</span> <span class="mi">-4540989600</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2683</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;date_start&#34;</span><span class="p">:</span> <span class="mi">-5133175200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="nt">&#34;institution_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Supreme Court of the United States&#34;</span>
</span></span><span class="line"><span class="cl">                              <span class="p">}</span>
</span></span><span class="line"><span class="cl">                        <span class="p">],</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Thomas Todd&#34;</span>
</span></span><span class="line"><span class="cl">                  <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;court_start&#34;</span><span class="p">:</span> <span class="mi">-5133175200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;view_count&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;identifier&#34;</span><span class="p">:</span> <span class="s2">&#34;marshall6&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;images&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                  <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">4355969</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;href&#34;</span><span class="p">:</span> <span class="s2">&#34;https://api.oyez.org/sites/default/files/images/courts/marshall6.jpg&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">78522</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nt">&#34;mime&#34;</span><span class="p">:</span> <span class="s2">&#34;image/jpeg&#34;</span>
</span></span><span class="line"><span class="cl">                  <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Marshall Court (1807-1810)&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;location&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Fletcher v. Peck&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;term&#34;</span><span class="p">:</span> <span class="s2">&#34;1789-1850&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;additional_docket_numbers&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;loc_id&#34;</span><span class="p">:</span> <span class="s2">&#34;http://www.loc.gov/item/usrep010087/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;loc_url&#34;</span><span class="p">:</span> <span class="s2">&#34;http://www.loc.gov/item/usrep010087/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;simple_citation&#34;</span><span class="p">:</span> <span class="s2">&#34;usrep010087&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;shelf_id&#34;</span><span class="p">:</span> <span class="s2">&#34;series: Volume 10 Call Number: KF101 Series: Contracts Law&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;title&#34;</span><span class="p">:</span> <span class="s2">&#34;U.S. Reports: Fletcher v. Peck, 10 U.S. (6 Cranch) 87 (1810).&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;issues&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;supreme court&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;united states&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;court opinions&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;periodical&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;land titles&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;contracts law&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;court cases&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;judicial decisions&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;equity&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;law library&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;public lands&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;judicial review and appeals&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;contracts&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;government documents&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;bills and resolutions&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;law&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;common law&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;property rights&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;court decisions&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;u.s. reports&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;legislative powers&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;real estate&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;issue&#34;</span><span class="p">:</span> <span class="s2">&#34;property&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;major_topics&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                  <span class="nt">&#34;major_topic&#34;</span><span class="p">:</span> <span class="s2">&#34;contracts law&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;loc_pdf&#34;</span><span class="p">:</span> <span class="s2">&#34;https://tile.loc.gov/storage-services/service/ll/usrep/usrep010/usrep010087/usrep010087.pdf&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content>
			<postid> 8a7f426a22b4ef47a37750941b78570c</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Legal Research with AI Part 7: Wrangling Data with Julia</title>
			<link>//localhost:1313/en/posts/legal-research-part-7/</link>
			<pubDate>Sun, 22 May 2022 16:30:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/legal-research-part-7/</guid>
			<description><![CDATA[File management with Julia in preperation for data merge.]]></description>
			<content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p>In a <a href="https://blog.jnapolitano.io/posts/legal-research-part-5/">previous post</a>, I seperated all of the results returned from the Library of Congress API into individual JSON documents to be imported as nodes into a neo4j graph.</p>
<p>In this post, I filter the <code>LOC</code> data against another data set from Oyez that will be integrated in the next post.</p>
<h2 id="filtering-data">Filtering Data</h2>
<p>Both data sets have been seperated into individual case nodes stored in the json format as a file with the format : <!-- raw HTML omitted -->.json.</p>
<p>The Library of Congress data contains indices, admonitions, briefs, and other data that I will not yet be incorporating into my data set.</p>
<p>In order to find only the case data I will be creating a dataframe containing the paths of json files with matching citations.</p>
<h2 id="using-julia-instead-of-python">Using Julia Instead of Python</h2>
<p>I love Python, but I want to try something new.  Julia&rsquo;s <a href="https://docs.julialang.org/en/v1/manual/methods/">multiple dispatch</a> design tempted me to try it out.  This is my first Julia program.  I will be documenting the work more so than usual.</p>
<h3 id="julia-import-functions">Julia &ldquo;import&rdquo; Functions</h3>
<p>Coming from Python, I typically import libraries/packages with an <code>import</code> call.  Something like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span>
</span></span></code></pre></div><p>In Julia, we use the <code>using</code> call to import the package. Like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">DataFrames</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">CSV</span>
</span></span></code></pre></div><p>A package can also be imported, but this does not instantiate the methods and functions within it (As far as I understand it).</p>
<p>For instance <code>import CSV</code> would only load the package but I would have to call CSV.method to actually do something.  Something like <code>from pandas import to_csv</code> in Python.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="n">DataFrames</span>
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="n">CSV</span>
</span></span></code></pre></div><h2 id="the-main-function">The Main Function</h2>
<p>Just like in C -and like we should in Python-, I declared a main function to run the program.  I call it with main().  I do not know if there is a similar convention to Python&rsquo;s <code>if __name__ == &quot;__main__&quot;</code>.  I will find out soon.</p>
<p>The main difference in function declaration between Python and Julia is the inclusion of the <code>end</code> keyword and the end of the function.</p>
<p>For instance review the main function below :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c"># outpath fo the current file</span>
</span></span><span class="line"><span class="cl">    <span class="n">outpath</span> <span class="o">=</span> <span class="n">joinpath</span><span class="p">(</span><span class="n">pwd</span><span class="p">(),</span><span class="s">&#34;case_files.csv&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">#Glob files from directory</span>
</span></span><span class="line"><span class="cl">    <span class="n">oyez_dataframe</span> <span class="o">=</span> <span class="n">get_files</span><span class="p">(</span><span class="s">&#34;oyez_cited&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c">#Glob files from directory</span>
</span></span><span class="line"><span class="cl">    <span class="n">loc_dataframe</span> <span class="o">=</span> <span class="n">get_files</span><span class="p">(</span><span class="s">&#34;loc_cited&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c"># Join on File excluding extraneous data not in the oyez dataset</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_df</span> <span class="o">=</span> <span class="n">innerjoin</span><span class="p">(</span><span class="n">oyez_dataframe</span><span class="p">,</span> <span class="n">loc_dataframe</span><span class="p">,</span> <span class="n">on</span> <span class="o">=</span> <span class="ss">:File</span><span class="p">,</span> <span class="n">validate</span><span class="o">=</span><span class="p">(</span><span class="nb">true</span><span class="p">,</span> <span class="nb">true</span><span class="p">),</span> <span class="n">makeunique</span> <span class="o">=</span> <span class="nb">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">#Select every file but the .DS_Store from the dataframe.  </span>
</span></span><span class="line"><span class="cl">    <span class="n">master_df</span> <span class="o">=</span> <span class="n">filter</span><span class="p">(</span><span class="n">row</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="p">(</span><span class="n">row</span><span class="o">.</span><span class="n">File</span> <span class="o">==</span> <span class="s">&#34;.DS_Store&#34;</span><span class="p">),</span> <span class="n">master_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">#Write to file</span>
</span></span><span class="line"><span class="cl">    <span class="n">outpath</span> <span class="o">=</span> <span class="n">df_to_file</span><span class="p">(</span><span class="n">master_df</span><span class="p">,</span><span class="n">outpath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><h3 id="creating-an-outpath">Creating an outpath</h3>
<p>The main function creates an outpath to write the resultant master df to file by calling <code>joinpath(pwd(), &quot;case_files.csv&quot;)</code>.</p>
<h3 id="the-get-files-function">The Get Files Function</h3>
<p>Next, the get_files function is called to create two data frames:  the loc_df and the oyez_df.</p>
<h4 id="declaring-empty-string-arrays">Declaring empty string arrays</h4>
<p>Each file name is appended to a file_name array declared with <code>&lt;array_name&gt; = String[]</code></p>
<h4 id="reading-files-with-readdir">Reading Files with readdir()</h4>
<p>File names are from from a directory passed to the built in <code>readdir()</code> function.</p>
<h4 id="appending-files-to-file_name-array">Appending Files to file_name Array</h4>
<p>Each file name is appended to a file_name array declared with <code>file_name = String[]</code> and appended to with the push!(file_name,f) call.  Note the <code>!</code> following push.  This typically means that the function is operating on the data in memory and will not return a new value.</p>
<h4 id="appending-file-paths-to-file_path-array">Appending File Paths to file_path Array</h4>
<p>I also include the file path by appending what is returned by <code>path = joinpath(working_path, f)</code> to the file_path list.</p>
<p>I love the built in <code>joinpath</code> function.  Pythons <code>os.sep.join()</code> works well, but I really like Julia&rsquo;s implementation.</p>
<h4 id="sorting-the-arrays-with-merge-sort">Sorting the Arrays with Merge Sort</h4>
<p>Arrays are soreted by call <code>sort_array(&lt;array&gt;)</code>.  It returns a sorted array using the merge sort alogorithm.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">sort_array</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sort</span><span class="p">(</span><span class="n">array</span><span class="p">;</span> <span class="n">alg</span><span class="o">=</span><span class="nb">MergeSort</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h4 id="crating-a-dataframe-with-the-arrays">Crating a Dataframe with the Arrays</h4>
<p>Finally a dataframe containing the sorted file_name and file_path lists as the columns file and path is created and then returned.</p>
<h4 id="a-note-on-refactoring">A note on refactoring</h4>
<p>This function should be refactored into seperate ones, but it works well enough with this workflow that I am going to leave it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">function</span> <span class="n">get_files</span><span class="p">(</span><span class="n">directory</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_name</span> <span class="o">=</span> <span class="kt">String</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_path</span> <span class="o">=</span> <span class="kt">String</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">working_path</span> <span class="o">=</span> <span class="n">joinpath</span><span class="p">(</span><span class="n">pwd</span><span class="p">(),</span> <span class="n">directory</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c"># context management.  Cd and then go back to the orignal pwd</span>
</span></span><span class="line"><span class="cl">    <span class="n">cd</span><span class="p">(</span><span class="n">working_path</span><span class="p">)</span> <span class="k">do</span> 
</span></span><span class="line"><span class="cl">        <span class="c">#print(&#34;Current directory: &#34;, working_path)</span>
</span></span><span class="line"><span class="cl">        <span class="n">foreach</span><span class="p">(</span><span class="n">readdir</span><span class="p">())</span> <span class="k">do</span> <span class="n">f</span>
</span></span><span class="line"><span class="cl">            <span class="n">path</span> <span class="o">=</span> <span class="n">joinpath</span><span class="p">(</span><span class="n">working_path</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">push!</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">push!</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c">#dump(stat(f.desc)) # you can customize what you want to print</span>
</span></span><span class="line"><span class="cl">        <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="c">#println(&#39;\n&#39;, pwd())</span>
</span></span><span class="line"><span class="cl">    <span class="c">#display(file_paths)</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_name</span> <span class="o">=</span> <span class="n">sort_array</span><span class="p">(</span><span class="n">file_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_path</span> <span class="o">=</span> <span class="n">sort_array</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span><span class="n">File</span> <span class="o">=</span> <span class="n">file_name</span><span class="p">,</span> <span class="n">Path</span> <span class="o">=</span> <span class="n">file_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h3 id="joining-data-frames-by-citation">Joining Data Frames by Citation</h3>
<p>Julia&rsquo;s DataFrames package can easily join dataframes on a column.  In this workflow the file which is titled after a case citation is used.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c"># Join on File excluding extraneous data not in the oyez dataset</span>
</span></span><span class="line"><span class="cl"><span class="n">master_df</span> <span class="o">=</span> <span class="n">innerjoin</span><span class="p">(</span><span class="n">oyez_dataframe</span><span class="p">,</span> <span class="n">loc_dataframe</span><span class="p">,</span> <span class="n">on</span> <span class="o">=</span> <span class="ss">:File</span><span class="p">,</span> <span class="n">validate</span><span class="o">=</span><span class="p">(</span><span class="nb">true</span><span class="p">,</span> <span class="nb">true</span><span class="p">),</span> <span class="n">makeunique</span> <span class="o">=</span> <span class="nb">true</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="filtering-the-df-for-extraneous-files">Filtering the DF for Extraneous Files</h3>
<p>The master_df  is filtered to remove <code>.DS_Store</code> from the list of files to be processed.  Below notice the <code>!</code> in this case it will return all a data frame of values that are not equal to .DS_Store in the File column.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c">#Select every file but the .DS_Store from the dataframe.  </span>
</span></span><span class="line"><span class="cl"><span class="n">master_df</span> <span class="o">=</span> <span class="n">filter</span><span class="p">(</span><span class="n">row</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="p">(</span><span class="n">row</span><span class="o">.</span><span class="n">File</span> <span class="o">==</span> <span class="s">&#34;.DS_Store&#34;</span><span class="p">),</span> <span class="n">master_df</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="the-df_to_file-function">The df_to_file Function</h3>
<p>Finally the df is written to file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="c">#Write to file</span>
</span></span><span class="line"><span class="cl"><span class="n">outpath</span> <span class="o">=</span> <span class="n">df_to_file</span><span class="p">(</span><span class="n">master_df</span><span class="p">,</span><span class="n">outpath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">df_to_file</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="n">outpath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">CSV</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">outpath</span><span class="p">,</span> <span class="n">df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">outpath</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><h2 id="the-complete-program">The Complete Program</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">DataFrames</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">CSV</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">get_files</span><span class="p">(</span><span class="n">directory</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_name</span> <span class="o">=</span> <span class="kt">String</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_path</span> <span class="o">=</span> <span class="kt">String</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">working_path</span> <span class="o">=</span> <span class="n">joinpath</span><span class="p">(</span><span class="n">pwd</span><span class="p">(),</span> <span class="n">directory</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c"># context management.  Cd and then go back to the orignal pwd</span>
</span></span><span class="line"><span class="cl">    <span class="n">cd</span><span class="p">(</span><span class="n">working_path</span><span class="p">)</span> <span class="k">do</span> 
</span></span><span class="line"><span class="cl">        <span class="c">#print(&#34;Current directory: &#34;, working_path)</span>
</span></span><span class="line"><span class="cl">        <span class="n">foreach</span><span class="p">(</span><span class="n">readdir</span><span class="p">())</span> <span class="k">do</span> <span class="n">f</span>
</span></span><span class="line"><span class="cl">            <span class="n">path</span> <span class="o">=</span> <span class="n">joinpath</span><span class="p">(</span><span class="n">working_path</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">push!</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">push!</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c">#dump(stat(f.desc)) # you can customize what you want to print</span>
</span></span><span class="line"><span class="cl">        <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="c">#println(&#39;\n&#39;, pwd())</span>
</span></span><span class="line"><span class="cl">    <span class="c">#display(file_paths)</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_name</span> <span class="o">=</span> <span class="n">sort_array</span><span class="p">(</span><span class="n">file_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_path</span> <span class="o">=</span> <span class="n">sort_array</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span><span class="n">File</span> <span class="o">=</span> <span class="n">file_name</span><span class="p">,</span> <span class="n">Path</span> <span class="o">=</span> <span class="n">file_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">sort_array</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sort</span><span class="p">(</span><span class="n">array</span><span class="p">;</span> <span class="n">alg</span><span class="o">=</span><span class="nb">MergeSort</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">df_to_file</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="n">outpath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">CSV</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">outpath</span><span class="p">,</span> <span class="n">df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">outpath</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="n">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c"># outpath fo the current file</span>
</span></span><span class="line"><span class="cl">    <span class="n">outpath</span> <span class="o">=</span> <span class="n">joinpath</span><span class="p">(</span><span class="n">pwd</span><span class="p">(),</span><span class="s">&#34;case_files.csv&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">#Glob files from directory</span>
</span></span><span class="line"><span class="cl">    <span class="n">oyez_dataframe</span> <span class="o">=</span> <span class="n">get_files</span><span class="p">(</span><span class="s">&#34;oyez_cited&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c">#Glob files from directory</span>
</span></span><span class="line"><span class="cl">    <span class="n">loc_dataframe</span> <span class="o">=</span> <span class="n">get_files</span><span class="p">(</span><span class="s">&#34;loc_cited&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c"># Join on File excluding extraneous data not in the oyez dataset</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_df</span> <span class="o">=</span> <span class="n">innerjoin</span><span class="p">(</span><span class="n">oyez_dataframe</span><span class="p">,</span> <span class="n">loc_dataframe</span><span class="p">,</span> <span class="n">on</span> <span class="o">=</span> <span class="ss">:File</span><span class="p">,</span> <span class="n">validate</span><span class="o">=</span><span class="p">(</span><span class="nb">true</span><span class="p">,</span> <span class="nb">true</span><span class="p">),</span> <span class="n">makeunique</span> <span class="o">=</span> <span class="nb">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">#Select every file but the .DS_Store from the dataframe.  </span>
</span></span><span class="line"><span class="cl">    <span class="n">master_df</span> <span class="o">=</span> <span class="n">filter</span><span class="p">(</span><span class="n">row</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="p">(</span><span class="n">row</span><span class="o">.</span><span class="n">File</span> <span class="o">==</span> <span class="s">&#34;.DS_Store&#34;</span><span class="p">),</span> <span class="n">master_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">#Write to file</span>
</span></span><span class="line"><span class="cl">    <span class="n">outpath</span> <span class="o">=</span> <span class="n">df_to_file</span><span class="p">(</span><span class="n">master_df</span><span class="p">,</span><span class="n">outpath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div>]]></content>
			<postid> db6caa3bc9a9590b628925a0b061f9c2</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Legal Research with AI: Part 6</title>
			<link>//localhost:1313/en/posts/masterpiece/</link>
			<pubDate>Sat, 21 May 2022 19:40:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/masterpiece/</guid>
			<description><![CDATA[Control Model: A traditional statistical analysis of voting behavior in SPSS.]]></description>
			<content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Currently, my server is mining data from the neo4j graph database.</p>
<p>This post contains a control model completed in SPSS that will serve as the base line for comparison to Ml models.  It includes a short literature review of the theoritical foundation of the Attitudinal Model of Judicial Behavior.</p>
<h2 id="hypothesis">Hypothesis</h2>
<p>When considering the individual Supreme Court Justices, their voting behavior may be best described by the interaction between their ideological precepts and the facts of the case.  Their vote will not be dictated entirely by the constraint of precedent.</p>
<h2 id="experimental-design">Experimental Design</h2>
<p>In this paper, the legal model is tested against the attitudinal model.   The intent is to best describe the process of Supreme Court decision making in relationship to Masterpiece Cakeshop, Ltd. v. Colorado Civil Rights Commission {cite}<code>masterpiececake</code>.</p>
<h3 id="the-legal-model">The Legal Model</h3>
<p>The Legal Model consists of three major components:</p>
<ol>
<li>precedent <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
<li>text (constitutional and statutory provisions) <sup id="fnref1:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
<li>legislative intent. <sup id="fnref2:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
</ol>
<p>The initial analysis of Masterpiece Cakeshop Ltd. v. Colorado Civil Rights Commission {cite}<code>masterpiececake</code> will consist of an argument dependent on all three.</p>
<h3 id="the-attitudinal-model">The Attitudinal Model</h3>
<p>The proposed attitudinal model will derive ideological values for the individual justices according to subject area <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.  This is accomplished by cross-referencing the current Supreme Court justices’ votes on the merits across time <sup id="fnref1:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.  The first set of scores describe general voting behavior.  The next by first amendment cases.  Finally, by first amendment cases controlling for establishment <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> and free exercise <sup id="fnref1:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> clause. and external situations <sup id="fnref2:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.  When applying these to the facts of the case in Masterpiece Cakeshop Ltd. vs. Colorado Civil Rights Board (2018) it is expected that ideological scores will predict the outcome.</p>
<h2 id="legal-model-case-study">Legal Model Case Study</h2>
<p>Write an intro.  Facts, text,</p>
<h3 id="the-facts-of-the-case">The Facts of the Case</h3>
<p>The facts of the case in this instance are pulled directly from the syllabus of the Supreme Court Opinion {cite}<code>masterpiececake</code>:</p>
<blockquote>
<p>Masterpiece Cakeshop, Ltd., is a Colorado bakery owned and operated by Jack Phillips, an expert baker and devout Christian. In 2012, he told a same-sex couple that he would not create a cake for their wedding celebration because of his religious opposition to same-sex marriages—marriages that Colorado did not then recognize—but that he would sell them other baked goods, e.g., birthday cakes. The couple filed a charge with the Colorado Civil Rights Commission (Commission) pursuant to the Colorado Anti-Discrimination Act (CADA), which prohibits, as relevant here, discrimination based on sexual orientation in a “place of business engaged in any sales to the public and any place offering services . . . to the public.&quot; Under CADA’s administrative review system, the Colorado Civil Rights Division first found probable cause for a violation and referred the case to the Commission. The Commission then referred the case for a formal hearing before a state Administrative Law Judge (ALJ), who ruled in the couple’s favor. In so doing, the ALJ rejected Phillips’ First Amendment claims: that requiring him to create a cake for a same-sex wedding would violate his right to free speech by compelling him to exercise his artistic talents to express a message with which he disagreed and would violate his right to the free exercise of religion.</p>
</blockquote>
<h3 id="the-pertinent-text">The Pertinent Text</h3>
<p>The first step of the test is to test Mr. Phillips claims against pertinent text of the controlling statutory and constitutional provisions.  Therefore, the relevant texts relating to the free speech claims are:</p>
<ol>
<li>The First Amendment of the Constitution <sup id="fnref2:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></li>
<li>The Colorado Public Accommodation law {cite}:<code>crs-title24-art-34-part-6-section 601-604-2016</code>.</li>
</ol>
<p>These will be tested against the claim that the Colorado Law unduly burdens Mr. Phillips by abridging his free exercise of religion, as well as his freedom of speech.  <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></p>
<h4 id="the-first-ammendment-text">The First Ammendment Text</h4>
<p>I begin with the First Amendment <sup id="fnref3:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.  Due to its brevity, I include the entire text:</p>
<blockquote>
<p>Congress shall make no law respecting an establishment of religion, or prohibiting the free exercise thereof; or abridging the freedom of speech, or of the press; or the right of the people peaceably to assemble, and to petition the Government for a redress of grievances. (U.S. Const. amend I)</p>
</blockquote>
<h4 id="colorado-state-law-title-24-article-34-part-6-section-601-604-2016">Colorado State Law Title 24, Article 34, Part 6, Section 601-604 2016</h4>
<p>The pertinent clause of the Colorado State Law in question reads:</p>
<blockquote>
<p>It is a discriminatory practice and unlawful for a person, directly or indirectly, to refuse, withhold from, or deny to an individual or a group, because of disability, race, creed, color, sex, sexual orientation, marital status, national origin, or ancestry, the full and equal enjoyment of the goods, services, facilities, privileges, advantages, or accommodations of a place of public accommodation (Colorado Revised Statute, Title 24, Article 34, Part 6, Section 601-604 2016).</p>
</blockquote>
<h3 id="standing">Standing</h3>
<p>Based simply on textual grounds, Mr. Phillips’ free exercise, and freedom of speech claims are completely unfounded.  The first amendment as written does not protect the individual resident of an individual state from undue abridgements of personal religious and speech freedoms.  If we adopt the standard of incorporation as written into the precedent the first amendment still does not seem to support the claims.1  Speech, if understood according to Webster, is “communication or expression of thoughts in spoken words (Webster&rsquo;s New World 2016).” The action of making a cake, cannot be in any way considered speech by this definition. speech.  Symbolic speech, whatever that means, is not written into the Constitution.</p>
<h4 id="the-first-ammendment-standing">The First Ammendment Standing</h4>
<p>At first reading, Mr. Phillips claim <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> does not seem to be legitimate.  If in fact the Colorado Law abridges religious freedoms, or individual speech in any way the amendment reads that “Congress shall make no law”.  At least when reading the text of the First Amendment as plainly as possible it does not apply directly to the case at hand. As a matter of fact, it does not apply to state in any capacity. The difficulty however, is that the Court has incorporated into the common law this amendment.  Therefore, it considered applicable to the states, and thus operable upon the residents of the individual states.  Forgoing this truth, we also run into a few textual problems.  For instance, how is it that speech is defined? Or exactly what constitutes a prohibition of the free exercise of religion?  These questions may only be answer by consulting precedent.</p>
<h4 id="colorado-state-law-standing">Colorado State Law Standing</h4>
<p>Contrary to Mr. Phillips’ claim the law does not seem to unduly burden any religious freedoms, nor speech in general.  Rather, it is a generally applicable law, that extends protections in places of public accommodation to people according to sexual-orientation.  Reading this in contrast to the First Amendment, there are no direct violations.</p>
<h3 id="legislative-intent">Legislative Intent</h3>
<p>If the Court relied entirely on the textual evidence to judge, it is apparent that the case would not have been heard by the bench. However, this is obviously not the case.  As such, Legislative Intent must also be considered in this analysis.  This section will attempt to discover the intent behind the First Amendment in order to judge Mr. Philips’ claims against original intent.</p>
<h4 id="the-first-ammendment-intent">The First Ammendment Intent</h4>
<p>The First Amendment along with the remaining nine were first introduced to the floor of Congress in 1789 to address the concern that specific individual liberties could be eroded by the powers of the national congress. According to James Madison, in order to limit the power of the legislature.  The case being that it is the most powerful branch, and therefore most likely to be abused (Lloyd 1789).  At the behest of the representatives of the individual states, as well as their ratification committees, the National Congress in order to ratify the Constitution agreed to ratify a Bill of Rights.</p>
<p>Each individual clause of the amendment is important to the discussion.  For the purpose of this paper, I will discuss the legislative history of the Establishment and Free Exercise Clauses, as well as the Freedom of Speech Clauses.  Then a short discussion on the drafting process of the entire amendment will be had.</p>
<h4 id="freedom-of-speech">Freedom of Speech</h4>
<p>The ideological and textual foundations for the free speech clauses come from English heritage.  For instance, the English Bill of Rights, drafted in 1689, states “that the freedome of speech and debates or proceedings in Parlyament ought not to be impeached or questioned in any court or place out of Parlyament (1 Will. And Mar. Sess. 2, c. 2.)”</p>
<p>The individual states in their constitutions drafted protection for at least the “freedom of the press.” <sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>  The state of Pennsylvania in their 1790 Constitution states that:</p>
<blockquote>
<p>The printing presses shall be free to every person who undertakes to examine the proceedings of the legislature, or any branch of government: And no law shall ever be made to restrain the right thereof.  The Free communication of the thoughts and opinions is one of the invaluable rights of man; and every citizen may freely speak, write and print on any subject, being responsible for the abuse of that liberty.  (Dallas 1791, xxxiv)</p>
</blockquote>
<p>Evident here is the strong common law and statutory practice of protection of the rights of the individual to publish material no matter the content, however, there does not seem to be a protection for symbolic expressions of speech such as the production of a cake.</p>
<p>The state ratification committees offer the best insight into the matter of free speech, as it meant to those most concerned with protecting that right.  The Honorable James Lincoln, of South Carolina puts the point most succinctly:</p>
<blockquote>
<p>Why in this Constitution, is a total silence with regard to the liberty of the press?  Was it forgotten? Impossible!  Then it must have been purposely omitted…. The Liberty of the press was the tyrants scourge — it was the true friend and firmest supporter of civil liberty; therefore, why pass it by in silence?&hellip; Pray, sir, what security have we for a republican form of government, when it depends on the mere will and pleasure of a few men, who, with an army, navy, and rich treasury at their back, may change and alter it as they please?  It may be said they will be sworn.  Sir, the king of Great Britain, at his coronation, swore to govern his subjects with justice and mercy.  We were then his subjects, and continued so for a long time after.  He would be glad to know how he observed his oath.  If, then, the king of Great Britain forswore himself, what security have we that a future President and four or five senators — like himself — will think more solemnly of so sacred an obligation than he did?   (Elliot 1888, 314-316)</p>
</blockquote>
<p>The most obvious concern is the failure of the Constitution to draft specific protections to secure the individual states from the type of tyranny experienced under the English Crown.  So too is a bit of realism present.  How is it that men, men of high rank, can be expected to uphold their oaths to govern with regard to the people?  When it is likely that men that acquire power will in many cases do the utmost to retain that power.  It is difficult to make the argument that these men had much of a consideration for individual speech, or any form of symbolic speech <sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup></p>
<p>The Congressional accounts support the same basic idea.  James Madison proposed to the House, that the “people shall not be deprived or abridged of their right to speak, to write, or to publish their sentiments; and the freedom of the press, as one of the great bulwarks of liberty, shall be inviolable (Lloyd 1789).  Roger Sherman, also put to the floor, that “people have certain natural rights which are retained by them when they enter into society. Such are the rights… of Speaking, writing and publishing their Sentiments with decency and freedom (Lloyd 1789).”   There is no apparent concern for symbolic forms of speech.  Rather, the idea is that someone may privately write and say what he so wishes, and publish that material if one so chooses.</p>
<p>The overarching intent of the Free Speech clause, appears to be an intent to forbid the federal government from restricting access to free presses.  The concern is almost exclusively focused on published material, and the fact that a free press enables the people of a nation to challenge the acts of government.  To restrict this right, in the eyes of some members of the congress, and the state ratification committees, was to in effect establish a tyrannical government.  The English Bill of Rights, State Constitutions, and the accounts of the State Ratification Committees all support this.</p>
<p>The conditional clauses within the state constitutions also point to the fact, that speech was not to be construed to enable a person to act in a way that is harmful to the public welfare.  State laws passed in order to improve the well being of the general public could not be abrogated by individuals claiming a free speech exemption.  In reference to Mr. Phillips’ claims an original intent lens, at best guess <sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup>, would not support an individual protection from state public accommodation laws on free speech grounds.</p>
<h4 id="establishment-and-free-exercise-clauses">Establishment and Free Exercise Clauses</h4>
<p>Again, the English heritage of founders of the United States is relevant to the discussion.  The English Bill of Rights reads, “that the commission for erecting the late courts of commissioners of ecclesiastical causes and all other commissions and courts of like nature are illegal and pernicious (1 Will. and Mary. Sess. 2, c. 2).” <sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup></p>
<p>Also, certain State constitutions prohibit religious tests necessary to hold office, as well as the imposition of any religious belief upon inhabitants.  Georgia’s in particular, “All persons whatever shall have the free exercise of their religion; provided it be not repugnant to the peace and safety of the State; and shall not, unless by consent, support any teacher, or teachers, except those of their own profession…. No clergyman, of any denomination, shall be allowed a seat in the legislature (Watkins and Watkins 1800, 15-16).” Also, important is the state of New York’s 1777 constitution which states, “that the free Exercise and Enjoyment of religious Profession and Worship, without Discrimination or Preference, shall forever hereafter be allowed within this state to all Mankind.” Noticeable is the conditional clause, citing: Provided, that the Liberty and Conscience hereby granted, shall not be so construed, as to excuse Acts of Licentiousness, or justify Practices inconsistent with the Peace or Safety of this State (The State of New York 1789, 13).” A number of other states follow in like fashion. <sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup></p>
<p>An intent to separate civil and political life is also apparent at the first congress.  For instance, at first drafting what became the establishment clause read, “The civil rights of none shall be abridged on account of religious belief or worship, nor shall any national religion be established, nor shall the full and equal rights of conscience be in any manner, or any pretext infringed (Lloyd 1789).”  A later draft also read, “Congress shall make no law establishing articles of faith or a mode of worship, or prohibiting the free exercise of religion, or abridging the freedom of speech, or the press, or the right of the people peaceable to assemble, and petition to the Government for the redress of grievances (Lloyd 1789).”</p>
<p>Together, these provide little evidence into the intention of the legislators present at the first congress.  The first draft, quite different from the final, implies a respect for both the free exercise of religion, and for free exercise of action according to the dictate of conscience.  As a summary of Mr. Samuel Huntington’s concern reads, “he hoped therefore the amendment would be made in such a way as to secure the rights of conscience, and a free exercise of the rights of religion, but not to patronize those who profess no religion at all (Lloyd 1789).” Thus, concern for both religious exercise, as well as non-religious seems to be equally supported by at least Mr. Huntington.  Governor Randolph of Virginia puts this same convention more forwardly in stating that, “a mutual toleration, and a persuasion that no man has the right to impose his opinion on other” is his intent behind the ratification of what became the first amendment (Elliot 1888).</p>
<p>However, the next draft removes this consideration, and limits the wording to include only protections for the free-exercise of religion.  Freedom of consciousness, whatever that they may mean is dropped.  A series of other drafts may be considered, as may conflicting pamphlets but the pressing reality is that the members of the first congress, as well as the state ratification committees, and the general public at large, all had different concerns.  Who is considered to be authoritative on this matter is dependent upon the values of the individual reader.  Therefore, there cannot be one legislative intent, but instead a diversity of intents that converged about a single piece of legislation.</p>
<p>If one were to guess, which is the best that can be done on the matter, the intent behind the establishment clause was to protect the individual states from usurpation of powers by the federal government of powers historically held by the states.  The protections for religion, speech, assembly, and redress, grant to the states special protections in order to further weaken the federal government.  There is not a unanimous application of these rights to all individual inhabitants within the United States.    No, instead, a blanket restriction was imposed upon the federal government, in order to allow the states to manage these affairs as they saw fit.  If a justice were to consult this original intention, Mr. Philips’ claims would be superfluous, as the amendment would not be binding on the state of Colorado.</p>
<h3 id="precedent">Precedent</h3>
<h4 id="analysis-of-case-law">Analysis of Case Law</h4>
<p>To test Mr. Phillips’ claim to a freedom of speech, and a free exercise exemption, this section of the paper will analyze the doctrines created by the Supreme Court in regard to Privacy, Establishment, Free Exercise, and the Freedom of Contract.</p>
<h4 id="establishment-of-clause">Establishment of Clause</h4>
<p>Lemon v. Kurtzman is the authority which the court recognizes as the standard by which to test laws for Establishment Clause violations.  The “Lemon Test” states three rules.  “First, the statute must have a secular legislative purpose; second, its principal or primary effect must be one that neither advances nor inhibits religion; Finally, the statute must not foster an excessive government entanglement with religion (Lemon v. Kurtzman, 1971) “In order to determine whether the government entanglement with religious is excessive, we must examine the character and purpose of the institutions that benefitted, the nature of the aid the state provides, and the resulting relationship between the government and the religious authority (Lemon v. Kurtzman, 1971).”  The Colorado state law in question, does not in any way violate these provisions.</p>
<p>For example, it may not be construed to have any other purpose than a secular one.  Secondly, the primary effect does not inhibit nor advance religion.  The primary purpose only protects individuals from discrimination in place of public accommodation.  Third, the law does not entangle the government, federal or state, with religion.  In effect, the government, no matter the degree of separation, is not entangled with any church, mosque, or any other form of religion.</p>
<h4 id="free-exercise">Free Exercise</h4>
<p>The Free Exercise claim is not as easily defeated.  A number of cases must be reviewed in order to conclude whether the Colorado law is in violation of this clause (U.S. Const. amend. I cl.1)</p>
<h5 id="reynolds-v-united-states-1879">Reynolds v. United States 1879</h5>
<p>The first case under consideration is Reynolds v. United States (1879), in which laws prohibiting bigamy were brought under scrutiny when challenged by members of the Church of Latter Day Saints.  To challenge the conviction, which was considered, as it is at present antithetical to publically accepted morality the Court argued that “laws are made for the government of actions, and while they cannot interfere with mere religious belief and opinions, they may with practices (Reynolds v. United States, 1879)” in order to promote the general welfare of the people.  To permit otherwise “would be to make the professed doctrines of religious belief superior to the law of the land, and in effect to permit every citizen to become a law unto himself (Reynolds v. United States, 1879).”</p>
<h5 id="employment-division-v-smith-1990">Employment Division v. Smith 1990</h5>
<p>This position is reiterated in Employment Div. v. Smith (1990) in which the court deliberated on the validity of a Seattle State law’s prohibition on providing unemployment benefits to individuals found to have used schedule I substance despite a claim to a religious exemption.  The appellant sought to reverse the verdict of Reynolds.  The Court did not budge.  To force the state to violate its own laws at the behest of an individual claiming religious exemptions for specific practices in effect does put the government behind the promotion of the claimant’s religious beliefs.  In fact, “it is a permissible reading of U.S Const. Amend. I to say that if prohibiting the exercise or religion is not the object of a law, but merely the incidental effect of a generally applicable and otherwise valid provision, the First Amendment has not been offended (Employment Div. v. Smith, 1990).”</p>
<h5 id="hobby-lobby-inc-v-burwell-2014">Hobby Lobby, Inc v. Burwell 2014</h5>
<p>The court shifted however in Hobby Lobby, Inc v. Burwell which the Supreme Court violated the spirit of previous decisions in response to Congress’ passage of the Religious Land Use and Institutionalized Persons Act, the RLUIPA. Which is “in an obvious effort to effect a complete separation from First Amendment case law (Hobby Lobby, Inc v. Burwell, 2014).” The Court did not strike the law as they had done City of Boerne v. Flores (1997).  Instead they validated it despite the fact “the powers of the legislature are defined and limited; and that those limits may not be mistaken (City of Boerne v. Flores, 1997).”  Unlike the consensus in Employment Div. v. Smith (1990), that a rule of general applicability may supersede one’s free exercise rights, the court found in favor of the corporate entity Hobby Lobby’s stance that the imposition of fines as punishment for not providing contraceptive coverage to female employees is not the “least restrictive means of furthering” a government interest.</p>
<h5 id="free-exercise-mr-so-and-sos-claim">Free Exercise Mr. So and So&rsquo;s Claim</h5>
<p>Considering the current claim, is it that the Colorado Law unduly inhibits the free exercise of religious belief?  No, it does not in any way.  By way of Lemon v. Kurtzman (1971), Reynolds v. United States (1879), and Employment Div. v. Smith (1990), the Colorado Public Accommodation law passes the test of general applicability.  However, the only precedent which may challenge its constitutionality is Hobby Lobby, Inc v. Burwell (2014).  Nonetheless, the Colorado Law may be considered the least restrictive means to further the public accommodation protections according to sexual-orientation.  To accomplish the same ends in any way less restrictive would require the law to be struck from the books.</p>
<h4 id="privacy">Privacy</h4>
<p>The right to marriage, well the right for same-sex couples to marry is a right founded in the doctrine of privacy and supported by the Fourteenth Amendment.  Obergefell v. Hodges (2015) the ruling which enabled same-sex couples to marry is the culmination of a development of a doctrine which proposes that institutions understood to be fundamental to ordered liberty ought not to be excessively regulated by the Congress (Palko v. Connecticut, 1937).   A string of cases in which the Court came to adopt the position that consenting adults of nontraditional relationships ought to receive the same protections under the law as those of traditional relationships rationalize the ruling. <sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup></p>
<h5 id="griswold-v-connecticut-1965">Griswold v. Connecticut 1965</h5>
<p>In Griswold v. Connecticut (1965) it was found that a consenting couple may receive counseling from a planned parenthood representative with regard to birth control.  The right of that couple to act according to their discretion is fundamental to the institution of marriage.  The court could not find a rational government interest to infringe upon that sacred barrier.</p>
<h5 id="loving-v-virginia-1967">Loving v. Virginia 1967</h5>
<p>Accordingly, the Court ruled in Loving v. Virginia (1967) that the rights afforded to white couples and black couples, could not be excluded from couples of mixed races.  Marriage is a fundamental right.  Therefore, it cannot be awarded only to select classes. Rather it is a right afforded to each individual of the United States.  The Fourteenth Amendment ensures that all people are afforded equal protection under the law.  To violate this principle is to violate the constitution.</p>
<h5 id="lawrence-v-texas-2003">Lawrence v. Texas 2003</h5>
<p>Lawrence v. Texas (2003) applied this principle to same sex couples.  It was found that sodomy laws in general restrict the ability for male same-sex couples to fully realize intimacy.  The laws unduly affected a single class of individuals without reason except to eliminate a socially unaccepted behavior from the private lives of two consenting adults.  The court could find no basis for the ban apart from undue bias directed at same-sex couples.</p>
<h5 id="obergefell-v-hodges-2015">Obergefell v. Hodges 2015</h5>
<p>The ultimate realization of the privacy protections and Fourteenth Amendment jurisprudence is found in Obergefell v. Hodges (2015) The court here found that “the right to marry is a fundamental right inherent in the liberty of the person (Obergefell v. Hodges, 2015).”  To disallow a same sex couples the right to marriage “denies individual dignity and autonomy (Obergefell v. Hodges, 2015).” to a subclass of citizens without rational basis.  In Obergefell v. Hodges (2015) “under the Due Process and Equal Protections Clauses of the Fourteenth Amendment couples of the same-sex may not be deprived” of their right to marry and to share the same privileges of same-sex couples.</p>
<h5 id="privacy-and-mr-so-and-sos-claim">Privacy and Mr. So and So&rsquo;s Claim</h5>
<p>According then to the Privacy doctrine, and namely Obergefell v. Hodges the right for gay couples to marry is fundamental.  They must then receive the same privileges and protections of all other married couples.  Without even the Colorado Law in place, I would argue that the Privacy Doctrine in of itself protects gay couples from the type of discrimination experienced by Mr. Charlie Craig and Mr. Dave Mullins.  The sanctity of the institution of marriage no matter those whom enter into it is fundamental to the idea of liberty in this country. To violate that sanctity when two gay men marry is to violate the holding of Obergefell and more heinously the dignity of two individuals.</p>
<h4 id="freedom-to-contract">Freedom to Contract</h4>
<p>There may be a case for the individual right to bargain for the terms of one’s contracts free from the regulation of the government, but the court has already spoken on this matter.  “The power… to restrict freedom of contract may be exercised in the public interest (West Coast Hotel Co. v. Parrish, 1937) Also, the authority of the government to regulate products that affect interstate commerce has been affirmed in United States v. Darby (1941). The real question here is whether a state government may regulate services in places of public accommodation?</p>
<p>The answer is a resounding yes. The Federal government for instance may do so when commerce is affected.  The two most important cases for the purpose of this paper are Katzenbach v. McClung (1964) and Heart of Atlanta Motel, Inc. v. United States (379 U.S. 241, 1964). These cases both rest on the validity of Title II of the Civil Rights Act of 1964 which states “all Persons shall be entitled to the full and equal enjoyment of the goods, services, facilities, privileges, advantages, and accommodations of any place of public accommodation.”  Public accommodation is defined as “any inn, hotel, motel, or other establishment which provides lodging to transient guests.  Any Restaurant, cafeteria, lunchroom, lunch counter, soda fountain, or other facility principally engaged in selling food for consumption on the premises. (42 U.S.C. S 2000a(a), 42 U.S.C. S 2000a(b)).</p>
<h5 id="katzenbach-v-mcclung-1964">Katzenbach v. McClung 1964</h5>
<p>In Katzenbach v. McClung (1964) the Court recognized “that discrimination in restaurants has a direct and highly restrictive effect upon interstate travel… This results because discriminatory practices prevent Negroes from buying prepared food… except in isolated and unkempt restaurants and under unsatisfactory and often unpleasant conditions (Katzenbach v. McClung, 1964).”  The outcome of which is the treatment of Blacks as second-class citizens not deserving the standards of decency enjoyed by their White peers. As the Congress enjoys “the power to make all laws which shall be necessary and proper for carrying into execution” it’s Commercial and Spending powers, Congress may regulate “those activities intrastate which so affect interstate commerce… to the attainment of a legitimate end (Katzenbach v. McClung, 1964).”</p>
<h5 id="heart-of-atlanta-motel-inc-v-united-states-1964">Heart of Atlanta Motel, Inc, v. United States 1964</h5>
<p>Heart of Atlanta Motel, Inc. v. United States (1964) reiterates the opinion of Katzenbach v. McClung (1964), but further specifies when the Congress may in fact regulate commercial services.  “The only questions are (1) whether Congress had a rational basis for finding that racial discrimination&hellip; affected commerce, and (2) if it had such a basis, whether the means it selected to eliminate that evil reasonable and appropriate (Heart of Atlanta Motel, Inc. v. United States, 1964).”  In the case of the segregation of hotels the Congress is well within its bounds to manage the way in which proprietors treat their customers, in order to avoid the evil of segregation.  It is not a stretch to apply the same principles to support the right of a state’s legislature to ensure that no discrimination occurs on the basis of sexual-orientation.</p>
<h5 id="freedom-to-contract-and-mr-so-and-sos-claim">Freedom to Contract and Mr. So and So&rsquo;s claim</h5>
<p>In the case of the individual states, their police powers alone allow them to enforce public accommodation laws by way of the 10th amendment.  The barometer in the case of Masterpiece Cake (2018)  is whether the Colorado law protects the welfare, safety, and health of the public at large.  Obviously, a state law which purports to protect the general welfare, and safety of all people can be said to meet this standard.</p>
<p>(attitudinal-case-study)=</p>
<h2 id="attitudinal-model-case-study">Attitudinal Model Case Study</h2>
<p>Write an intro.  Facts, text,</p>
<h3 id="methodology">Methodology</h3>
<p>To build a model that takes into account the subjective attitudes of the Supreme Court Justices. I use the Washington University Law Database (Spaeth, Epstein, et al. 2017) that takes into account the individual decisions of each justice in order to determine their ideological value across time.   I then test these values against the facts, including attitudinal objects, and attitudinal situations, of Masterpiece Cake LTD. v. Colorado Civil Rights Commission (2018)</p>
<h4 id="ideological-score-by-justice">Ideological Score by Justice</h4>
<p>To determine a justice’s ideological score I test their votes across time to determine whether they vote conservatively or liberally.  A simple mean value between one and two is then generated.  The closer to one a justice votes the more conservative.  Alternatively, the closer to two the value, the more liberal.  The results for the individual justices are included in
the chart below.</p>
<h6 id="table">Table</h6>
<table>
<thead>
<tr>
<th>Justice</th>
<th>Mean</th>
<th>N</th>
<th>Std. Deviation</th>
<th>Variance</th>
</tr>
</thead>
<tbody>
<tr>
<td>AMKennedy</td>
<td>1.42</td>
<td>2668</td>
<td>0.493</td>
<td>0.243</td>
</tr>
<tr>
<td>CThomas</td>
<td>1.32</td>
<td>2179</td>
<td>0.468</td>
<td>0.219</td>
</tr>
<tr>
<td>RBGinsburg</td>
<td>1.6</td>
<td>1964</td>
<td>0.491</td>
<td>0.241</td>
</tr>
<tr>
<td>SGBreyer</td>
<td>1.56</td>
<td>1848</td>
<td>0.496</td>
<td>0.246</td>
</tr>
<tr>
<td>JGRoberts</td>
<td>1.42</td>
<td>913</td>
<td>0.493</td>
<td>0.243</td>
</tr>
<tr>
<td>SAAlito</td>
<td>1.36</td>
<td>874</td>
<td>0.481</td>
<td>0.232</td>
</tr>
<tr>
<td>SSotomayor</td>
<td>1.62</td>
<td>600</td>
<td>0.487</td>
<td>0.237</td>
</tr>
<tr>
<td>EKagan</td>
<td>1.59</td>
<td>486</td>
<td>0.492</td>
<td>0.242</td>
</tr>
<tr>
<td>NMGorsuch</td>
<td>1.18</td>
<td>17</td>
<td>0.393</td>
<td>0.154</td>
</tr>
<tr>
<td>Total</td>
<td>1.47</td>
<td>11549</td>
<td>0.499</td>
<td>0.249</td>
</tr>
</tbody>
</table>
<h4 id="ideological-score-by-justice-first-ammendment">Ideological Score by Justice First Ammendment</h4>
<p>Similarly, I derive ideological values according to voting patterns relating to first amendment cases.  The results are printed in the following chart.</p>
<h5 id="table-1">Table</h5>
<table>
<thead>
<tr>
<th>Justice</th>
<th>issue area of case (coarse)</th>
<th>Mean</th>
<th>N</th>
<th>Std. Deviation</th>
<th>Variance</th>
</tr>
</thead>
<tbody>
<tr>
<td>AMKennedy</td>
<td>First Amendment</td>
<td>1.47</td>
<td>167</td>
<td>0.5</td>
<td>0.25</td>
</tr>
<tr>
<td>CThomas</td>
<td>First Amendment</td>
<td>1.33</td>
<td>127</td>
<td>0.472</td>
<td>0.223</td>
</tr>
<tr>
<td>RBGinsburg</td>
<td>First Amendment</td>
<td>1.68</td>
<td>112</td>
<td>0.469</td>
<td>0.22</td>
</tr>
<tr>
<td>SGBreyer</td>
<td>First Amendment</td>
<td>1.55</td>
<td>108</td>
<td>0.5</td>
<td>0.25</td>
</tr>
<tr>
<td>JGRoberts</td>
<td>First Amendment</td>
<td>1.51</td>
<td>47</td>
<td>0.505</td>
<td>0.255</td>
</tr>
<tr>
<td>SAAlito</td>
<td>First Amendment</td>
<td>1.42</td>
<td>43</td>
<td>0.499</td>
<td>0.249</td>
</tr>
<tr>
<td>SSotomayor</td>
<td>First Amendment</td>
<td>1.67</td>
<td>33</td>
<td>0.479</td>
<td>0.229</td>
</tr>
<tr>
<td>EKagan</td>
<td>First Amendment</td>
<td>1.67</td>
<td>27</td>
<td>0.48</td>
<td>0.231</td>
</tr>
<tr>
<td>NMGorsuch</td>
<td>First Amendment</td>
<td>2</td>
<td>1</td>
<td>.</td>
<td>.</td>
</tr>
<tr>
<td>Total</td>
<td>First Amendment</td>
<td>1.51</td>
<td>665</td>
<td>0.5</td>
<td>0.25</td>
</tr>
</tbody>
</table>
<h4 id="ideological-score-by-justice-by-individual-issue-area">Ideological Score by Justice by Individual Issue Area</h4>
<p>Finally, ideological scores are derived by issue area.  For the purpose of this discussion this is equivalent to an evaluation of the individual attitude-situations as they relate to the facts of the case.  The results are below:</p>
<h5 id="table-2">Table</h5>
<table>
<thead>
<tr>
<th>Justice</th>
<th>issue area of case (coarse)</th>
<th>Issue Area Of Case (Fine)</th>
<th>Mean</th>
<th>N</th>
<th>Std. Deviation</th>
<th>Variance</th>
</tr>
</thead>
<tbody>
<tr>
<td>AMKennedy</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>1.71</td>
<td>14</td>
<td>0.469</td>
<td>0.22</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1.23</td>
<td>13</td>
<td>0.439</td>
<td>0.192</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.48</td>
<td>27</td>
<td>0.509</td>
<td>0.259</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td>Free Exercise Of Religion</td>
<td>1.71</td>
<td>14</td>
<td>0.469</td>
<td>0.22</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1.23</td>
<td>13</td>
<td>0.439</td>
<td>0.192</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.48</td>
<td>27</td>
<td>0.509</td>
<td>0.259</td>
<td></td>
</tr>
<tr>
<td>CThomas</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>1.91</td>
<td>11</td>
<td>0.302</td>
<td>0.091</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1.1</td>
<td>10</td>
<td>0.316</td>
<td>0.1</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.52</td>
<td>21</td>
<td>0.512</td>
<td>0.262</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td>Free Exercise Of Religion</td>
<td>1.91</td>
<td>11</td>
<td>0.302</td>
<td>0.091</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1.1</td>
<td>10</td>
<td>0.316</td>
<td>0.1</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.52</td>
<td>21</td>
<td>0.512</td>
<td>0.262</td>
<td></td>
</tr>
<tr>
<td>RBGinsburg</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>1.56</td>
<td>9</td>
<td>0.527</td>
<td>0.278</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>2</td>
<td>9</td>
<td>0</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.78</td>
<td>18</td>
<td>0.428</td>
<td>0.183</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td>Free Exercise Of Religion</td>
<td>1.56</td>
<td>9</td>
<td>0.527</td>
<td>0.278</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>2</td>
<td>9</td>
<td>0</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.78</td>
<td>18</td>
<td>0.428</td>
<td>0.183</td>
<td></td>
</tr>
<tr>
<td>SGBreyer</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>1.78</td>
<td>9</td>
<td>0.441</td>
<td>0.194</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1.67</td>
<td>9</td>
<td>0.5</td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.72</td>
<td>18</td>
<td>0.461</td>
<td>0.212</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td>Free Exercise Of Religion</td>
<td>1.78</td>
<td>9</td>
<td>0.441</td>
<td>0.194</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1.67</td>
<td>9</td>
<td>0.5</td>
<td>0.25</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.72</td>
<td>18</td>
<td>0.461</td>
<td>0.212</td>
<td></td>
</tr>
<tr>
<td>JGRoberts</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>2</td>
<td>7</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.78</td>
<td>9</td>
<td>0.441</td>
<td>0.194</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td>Free Exercise Of Religion</td>
<td>2</td>
<td>7</td>
<td>0</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.78</td>
<td>9</td>
<td>0.441</td>
<td>0.194</td>
<td></td>
</tr>
<tr>
<td>SAAlito</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>2</td>
<td>6</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.75</td>
<td>8</td>
<td>0.463</td>
<td>0.214</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td>Free Exercise Of Religion</td>
<td>2</td>
<td>6</td>
<td>0</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.75</td>
<td>8</td>
<td>0.463</td>
<td>0.214</td>
<td></td>
</tr>
<tr>
<td>SSotomayor</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>1.5</td>
<td>6</td>
<td>0.548</td>
<td>0.3</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>2</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.63</td>
<td>8</td>
<td>0.518</td>
<td>0.268</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td>Free Exercise Of Religion</td>
<td>1.5</td>
<td>6</td>
<td>0.548</td>
<td>0.3</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>2</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.63</td>
<td>8</td>
<td>0.518</td>
<td>0.268</td>
<td></td>
</tr>
<tr>
<td>EKagan</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>1.8</td>
<td>5</td>
<td>0.447</td>
<td>0.2</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>2</td>
<td>1</td>
<td>.</td>
<td>.</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.83</td>
<td>6</td>
<td>0.408</td>
<td>0.167</td>
<td></td>
</tr>
<tr>
<td>NMGorsuch</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>2</td>
<td>1</td>
<td>.</td>
<td>.</td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>2</td>
<td>1</td>
<td>.</td>
<td>.</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td>Free Exercise Of Religion</td>
<td>2</td>
<td>1</td>
<td>.</td>
<td>.</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>2</td>
<td>1</td>
<td>.</td>
<td>.</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>1.78</td>
<td>68</td>
<td>0.418</td>
<td>0.174</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1.46</td>
<td>48</td>
<td>0.504</td>
<td>0.254</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.65</td>
<td>116</td>
<td>0.48</td>
<td>0.231</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td>Free Exercise Of Religion</td>
<td>1.78</td>
<td>68</td>
<td>0.418</td>
<td>0.174</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1.46</td>
<td>48</td>
<td>0.504</td>
<td>0.254</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.65</td>
<td>116</td>
<td>0.48</td>
<td>0.231</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="expected-results">Expected Results</h3>
<p>In an attempt to replicate the results of Masterpiece Cakeshop Ltd. v. Chicago Civil Rights Commission (2018) I will simply consult the three ideological values above.  If a justice scores below a 1.5 in any area, then they will be expected to vote conservatively.  Conversely if a score above 1.5 is observed the justice is expected to vote liberally.</p>
<p>In context, A liberal vote will found in favor of the Mr. Charlie Craig and his partner, Mr. Dave Mullins.  The following variables describe liberal voting preferences as they relate to the case.  Pro-civil liberties or civil rights, pro-neutrality in establishment clause cases, pro-underdog, anti-owner, anti-business, pro-government, pro-exercise of judicial action, and pro-judicial activism. A conservative vote is in favor of Mr. Philips, the Colorado baker. Conservatism in context is described as opposite the above liberal values.</p>
<h4 id="justice-vote-according-to-general-ideological-score">Justice Vote According to General Ideological Score</h4>
<h5 id="table-3">Table</h5>
<table>
<thead>
<tr>
<th>Justice</th>
<th>Score</th>
<th>Vote</th>
</tr>
</thead>
<tbody>
<tr>
<td>AMKennedy</td>
<td>1.42</td>
<td>Cons.</td>
</tr>
<tr>
<td>CThomas</td>
<td>1.32</td>
<td>Cons.</td>
</tr>
<tr>
<td>RBGinsburg</td>
<td>1.6</td>
<td>Lib.</td>
</tr>
<tr>
<td>SGBreyer</td>
<td>1.56</td>
<td>Lib.</td>
</tr>
<tr>
<td>JGRoberts</td>
<td>1.42</td>
<td>Cons.</td>
</tr>
<tr>
<td>SAAlito</td>
<td>1.36</td>
<td>Cons.</td>
</tr>
<tr>
<td>SSotomayor</td>
<td>1.62</td>
<td>Lib.</td>
</tr>
<tr>
<td>EKagan</td>
<td>1.59</td>
<td>Lib.</td>
</tr>
<tr>
<td>NMGorsuch</td>
<td>1.18</td>
<td>Cons.</td>
</tr>
<tr>
<td>Total</td>
<td>1.47</td>
<td>Cons.</td>
</tr>
</tbody>
</table>
<h4 id="justice-votes-by-first-amendment">Justice Votes by First Amendment</h4>
<h5 id="table-4">Table</h5>
<table>
<thead>
<tr>
<th>Justice</th>
<th>issue area of case (coarse)</th>
<th>Score</th>
<th>Vote</th>
</tr>
</thead>
<tbody>
<tr>
<td>AMKennedy</td>
<td>First Amendment</td>
<td>1.47</td>
<td>Cons.</td>
</tr>
<tr>
<td>CThomas</td>
<td>First Amendment</td>
<td>1.33</td>
<td>Cons.</td>
</tr>
<tr>
<td>RBGinsburg</td>
<td>First Amendment</td>
<td>1.68</td>
<td>Lib.</td>
</tr>
<tr>
<td>SGBreyer</td>
<td>First Amendment</td>
<td>1.55</td>
<td>Lib.</td>
</tr>
<tr>
<td>JGRoberts</td>
<td>First Amendment</td>
<td>1.51</td>
<td>Lib.</td>
</tr>
<tr>
<td>SAAlito</td>
<td>First Amendment</td>
<td>1.42</td>
<td>Cons.</td>
</tr>
<tr>
<td>SSotomayor</td>
<td>First Amendment</td>
<td>1.67</td>
<td>Lib.</td>
</tr>
<tr>
<td>EKagan</td>
<td>First Amendment</td>
<td>1.67</td>
<td>Lib.</td>
</tr>
<tr>
<td>NMGorsuch</td>
<td>First Amendment</td>
<td>2</td>
<td>Cons.</td>
</tr>
<tr>
<td>Total</td>
<td>First Amendment</td>
<td>1.51</td>
<td>Lib.</td>
</tr>
<tr>
<td>Total</td>
<td>1.51</td>
<td>Lib.</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="justice-votes-by-issue-area">Justice Votes by Issue Area</h4>
<h5 id="table-5">Table</h5>
<table>
<thead>
<tr>
<th>Justice Identification Number</th>
<th>Issue Area Of Case (Coarse)</th>
<th>Issue Area Of Case (Fine)</th>
<th>Score</th>
<th>Vote</th>
</tr>
</thead>
<tbody>
<tr>
<td>Amkennedy</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>1.71</td>
<td>Lib.</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1.23</td>
<td>Cons.</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.48</td>
<td>Cons.</td>
<td></td>
</tr>
<tr>
<td>Cthomas</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>1.91</td>
<td>Lib.</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1.1</td>
<td>Cons.</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.52</td>
<td>Lib</td>
<td></td>
</tr>
<tr>
<td>Rbginsburg</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>1.56</td>
<td>Lib</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>2</td>
<td>Lib</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.78</td>
<td>Lib</td>
<td></td>
</tr>
<tr>
<td>Sgbreyer</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>1.78</td>
<td>Lib</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1.67</td>
<td>Lib</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.72</td>
<td>Lib</td>
<td></td>
</tr>
<tr>
<td>Jgroberts</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>2</td>
<td>Lib</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1</td>
<td>Cons.</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.78</td>
<td>Lib.</td>
<td></td>
</tr>
<tr>
<td>Saalito</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>2</td>
<td>Lib.</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1</td>
<td>Cons.</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.75</td>
<td>Lib.</td>
<td></td>
</tr>
<tr>
<td>Ssotomayor</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>1.5</td>
<td>Lib/Con</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>2</td>
<td>Lib.</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.63</td>
<td>Lib.</td>
<td></td>
</tr>
<tr>
<td>Ekagan</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>1.8</td>
<td>Lib.</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>2</td>
<td>Lib.</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.83</td>
<td>Lib.</td>
<td></td>
</tr>
<tr>
<td>Nmgorsuch</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>2</td>
<td>Lib.</td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>2</td>
<td>Lib.</td>
<td></td>
</tr>
<tr>
<td>Total</td>
<td>First Amendment</td>
<td>Free Exercise Of Religion</td>
<td>1.78</td>
<td>Lib.</td>
</tr>
<tr>
<td></td>
<td>Establishment Of Religion</td>
<td>1.46</td>
<td>Cons.</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Total</td>
<td>1.65</td>
<td>Lib.</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="prediction-summary">Prediction Summary</h3>
<p>The general ideological value scores predict a 5-4 split along the usual lines (figure 5 include a ref).  The conservative majority coalition consists of Justices, Kennedy, Thomas, Roberts, Alito, and Gorsuch.  The liberal minority is of Justices Ginsberg, Breyer, Sotomayor, and Kagan.</p>
<p>The ideological scores by the first amendment issue area, predicts a very different outcome.  For instance, a 7-2 liberal majority is expected.  Kennedy, is expected to vote with the conservative coalition, along with Gorsuch.  The Liberal majority consists of, Thomas, Ginsberg, Breyer, Roberts, Alito, Sotomayor, and Kagan.</p>
<p>Testing again for individual issue areas, the results seem spurious.  When controlling for just the establishment clause, there is a 5-4 majority conservative coalition comprised of Justices Kennedy, Thomas, Roberts, Alito and Gorsuch.  The minority coalition consists of Justices, Ginsberg, Breyer, Sotomayor, Kagan.  However, when controlling for Free Exercise, a 9-0 liberal majority is the expected outcome.</p>
<h2 id="findings">Findings</h2>
<h3 id="actual-results">Actual Results</h3>
<p>The actual results of Masterpiece Cakeshop, Ltd, v. Chicago Civil Rights Commission (2018) yield a 7-2 conservative majority in favor of Mr. Phillips consisting of Justice Roberts, Justice Kennedy, Justice Thomas, Justice Breyer, Justice Alito, Justice Kagan, and Justice Gorsuch.  The liberal minority consist of Justice Ginsberg and Justice Sotomayor.  Justice Kennedy delivered the opinion of the Court.</p>
<p>The set of ideological values that best predict the actual outcome of the case is the general ideological score.  A 5-4 conservative majority in this case was expected with Justices Kennedy, Thomas, Roberts, Alito, and Gorsuch in the majority.  Justices Ginsberg, Breyer, Sotomayor, and Kagan were in the expected minority.</p>
<h3 id="attitudinal-model-evaluation">Attitudinal Model Evaluation</h3>
<p>The discrepancy between the expected results and the actual results is difficult to explain.  Restricting the analysis at this point to only the attitudinal model the explanation must be that the ideologies of the justices acted upon the facts of the case, the situations in an unexpected way.  This could be caused by two factors. The first being that the variables defining conservatism and liberalism are inaccurate.  The other being that Justices, primarily the liberals which voted conservatively voted against the dictate of their ideological preferences.</p>
<p>As stated above the attributes defining liberalism are pro-civil liberties or civil rights, pro-underdog, anti-owner, anti-business, pro-government, pro-exercise of judicial action, and pro-judicial activism.  Justice Breyer and Justice Kagan both tend to vote towards this direction.  In Masterpiece Cakeshop Ltd, v. Colorado Civil Rights Commission (2018)  however, they did not.  To run through the facts of the case quickly, Mr. Phillips is the proprietor of a small business that discriminates against a quasi-suspect class of citizens (non-heterosexual couples) in violation of Colorado state civil rights law.  When brought to suit, a civil rights administration of the state of Colorado, which is de-facto a quasi-judicial bureaucracy, oversaw the case and declared Mr. Phillip in violation of generally applicable and religiously neutral Colorado public accommodation laws.  Or in other words, every factor leading to a liberal vote is apparent in this case.  So then, Justices’ Breyer and Kagan moving in the conservative direction is remarkable.</p>
<p>Or is it?   While reading through the Court’s opinion, the Court does not greatly address Mr. Phillips’ claim.  In fact, Justice Kennedy completely side steps the freedom of speech and religious freedom haymaker.  Rather, the object of consideration turns from Mr. Phillip’s to the actions of the state’s Civil Rights Commission.  “When the Colorado Civil Rights Commission considered this case, it did not do so with the religious neutrality that the Constitution requires.” (Masterpiece Cakeshop Ltd. v. Colorado Civil Rights Commission 2018) Considering this change in object, is it that the pertinent facts of the case change as well?</p>
<p>Pro-civil liberties or civil rights, pro-underdog, anti-owner, anti-business, pro-government, pro-exercise of judicial action, and pro-judicial activism all still apply.  With the additional imposition by the Commission of “comprehensive staff training” and “quarterly compliance reports” it could also be argued that the pro-affirmative action factor may be active in this case. However, the startling material fact that distinguishes this case is the abject hostility the Civil Rights Commission demonstrated towards Mr. Philips’ “sincerely held religious beliefs (Masterpiece Cakeshop Ltd. v. Colorado Civil Rights Commission 2018).”  Therefore, the pro-neutrality of the establishment clause is grossly violated.  To such a degree that the “clear and impermissible hostility towards [the] sincere religious beliefs (Masterpiece Cakeshop Ltd. v. Colorado Civil Rights Commission 2018)” forced two liberal Justices to join the conservative coalition.</p>
<p>In Justice Kagan’s own words,</p>
<blockquote>
<p>“[I]t is a general rule that [religious and philosophical] objections do not allow business owners and other actors in the economy and in society to deny protected persons equal access to goods and services under a neutral and generally applicable public accommodations law.” Ante, at 9. But in upholding that principle, state actors cannot show hostility to religious views; rather, they must give those views “neutral and respectful consideration.” Ante, at 12. I join the Court’s opinion in full because I believe the Colorado Civil Rights Commission did not satisfy that obligation. (Masterpiece Cakeshop Ltd. v. Colorado Civil Rights Commission 2018)</p>
</blockquote>
<p>What is apparent then is that Justice Kagan recognizes that in order to apply the establishment clause neutrally the federal and state governments must not act with hostility towards individuals with sincerely held religious beliefs.  Laws of general applicability in order to be constitutional must not unduly harm religious individuals.  Thus, Justice Breyer, and Justice Kagan both agree in full with the opinion of the Court.</p>
<h3 id="legal-model-evalution">Legal Model Evalution</h3>
<p>More startling then the actual outcome of the case is the fact that the Justices largely adhered to precedent, or at least to the judicially created rule that valid law applied neutrally in respect to the establishment clause may be considered good law.  When considering the facts of the case to previous first amendment questions the results in light of the Civil Rights Commission’s hostility towards Mr. Phillips are not in any way remarkable.</p>
<p>The three-pronged Lemon v. Kurtzman (1971) test exclusively could yield the same results.  First the Colorado law does have a secular purpose.  On the other hand, due to the way in which the Civil Rights Commission applied the law, its effect “inhibits religion”.  Because of that inhibition, the Colorado state government does become unnecessarily entangled in religion.  Passing through the matrix, the actions of the state are obviously unconstitutional.</p>
<p>Consulting also Employment Div. v. Smith (1990) the court in Masterpiece Cakeshop Ltd, v. Colorado Civil Rights Commission (2018) stuck to their statement that “it is a permissible reading of U.S Const. Amend. I to say that if prohibiting the exercise or religion is not the object of a law, but merely the incidental effect of a generally applicable and otherwise valid provision, the First Amendment has not been offended (Employment Div. v. Smith, 1990).”  Therefore, a law of general applicability, applied neutrally does not warrant individual exemptions.  A point driven home by Justice Kennedy in the majority opinion, and also by Justice Kagan in her concurrence.</p>
<p>Also echoed is the basic reasoning of Obergefell v. Hodges (2015) that “under the Due Process and Equal Protections Clauses of the Fourteenth Amendment couples of the same-sex may not be deprived” of their right to marry and to share the same privileges of same-sex couples.</p>
<p>The cynical critique, however of the Court’s adherence to precedent is the fact that to a large degree precedent does not conflict with the ideological preferences of the members of the Court.   Many of the cases cited by Justice Kennedy he either authored or was member to the majority.  To those that he was not, the opinions may be linked to ideological predecessors.</p>
<p>Justice Kagan and Justice Breyer most likely voted “conservatively” due to the fact that the outcome of the case supports well established liberal precedent.  Namely in support of the neutrality of the establishment clause.  The opinion may have also persuaded their vote.  In it Justice Kennedy supports the validity of public accommodation laws protecting the civil rights of same-sex couples and people of other sexual orientations.   In the words of the Court, “It is unexceptional that Colorado law can protect gay persons, just as it can protect other classes of individuals, in acquiring whatever products and services they choose on the same terms and conditions as are offered to other members of the public (Masterpiece Cakeshop v. Colorado Civil Rights Commission, 2018)”.  It is my hypothesis that due the fact that this provision, which supports the basis of the Colorado Public Accommodation law, and the opinion in general supports a neutral application of the Establishment Clause, two liberal Justices voted in the conservative majority.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Include a reference!&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref2:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Include a reference to the definition.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref2:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Include reference to constitutional ammendment and clause&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref2:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref3:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>This sentence doesn&rsquo;t really mean anything.  Expand upon it.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>reference his claim&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Georgia Laws, p 16; Massachusetts Perpetual laws, p. 7; New Hampshire Laws, pp. 26, 27; North Carolina Laws, p. 275.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>An argument could be made that language is inherently symbolic speech, but references to contemporary works must be support the argument.   The intent behind the amendment does not seem to apply to the public exhibition of painting and sculpture.&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>Again, it is impossible to actually determine original intent.&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9">
<p>This clause importantly was written in response to the Catholic persecution of English Protestants under the reign of King James.  Under William and Mary, following the Glorious Revolution, the English Bill of Rights limited the discretion of the monarch, and secured the prevalence of the Parliament.&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10">
<p>North Carolina Laws, p. 280; Massachusetts Perpetual Laws, pp. 5-6, New Hampshire Laws, p. 23;  South Carolina Laws, App., p. 41; Virginia Religious Freedom Act, pp. 7.&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:11">
<p>Traditional is to be understood as a heterosexual relationship of members of the same race.  Nontraditional is to be anything that differs from that idea.&#160;<a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content>
			<postid> 32a5f76d6e0693af16c1a0fdf5f14ee4</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Conduct Legal Research with AI: Part 5</title>
			<link>//localhost:1313/en/posts/legal-research-part-5/</link>
			<pubDate>Sat, 21 May 2022 14:30:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/legal-research-part-5/</guid>
			<description><![CDATA[Transforming the Library of Congress results into individual json documents contaning case information.]]></description>
			<content type="html"><![CDATA[<h1 id="legal-research-with-ai-part-5">Legal Research with AI: Part 5&quot;</h1>
<p>In the previous posts in this series, I have downloaded the data required to build the neo4j graph.  In this post, I will arrange the data into a data structure that will permit me to easily create graph nodes and most importantly relationships.</p>
<h2 id="the-runner-program">The Runner Program</h2>
<p>The raw structure of the data is organized by the results of the api requests.  There are thus 80 cases per file.  I want them organized by individual cases to facilitate integration with another dataset that will be detailed in the next post.</p>
<h3 id="glob-the-input-older">Glob the input older</h3>
<p>The program below simply reads thedownloaded json data from a folder to create a list of file paths to read.</p>
<h3 id="modify-the-case-data">Modify The Case Data</h3>
<p>It then traverses that list to find the individual case data to write to file.</p>
<h3 id="add--loc_id-to-the-dictionary">Add  <code>loc_id</code> to the Dictionary</h3>
<p>For each case it create the <code>loc_id</code> key that will be used to join with another dataset.</p>
<h3 id="write-to-file">Write to File</h3>
<p>Finally, it writes the new case dictionary to file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Python" data-lang="Python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">glob</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl"><span class="c1">#from neoModelAPI import NeoNodes as nn</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_cwd</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">cwd</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">cwd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_files</span><span class="p">(</span><span class="n">cwd</span> <span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="n">input_directory</span> <span class="o">=</span> <span class="s1">&#39;loc_cases&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">cwd</span><span class="p">,</span><span class="n">input_directory</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_list</span><span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="s2">&#34;**/*.json&#34;</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="kc">True</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">file_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">load_json_data</span><span class="p">(</span><span class="n">file</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span> <span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1"># Reading from file</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">citation_output</span><span class="p">(</span><span class="n">file_list</span><span class="p">,</span><span class="n">cwd</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">outpath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">cwd</span><span class="p">,</span><span class="s1">&#39;loc_cited&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">file_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">load_json_data</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="n">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;results&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#data = create_citation(data)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">split</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span><span class="p">[</span><span class="s1">&#39;loc_id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">split</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">outfile</span> <span class="o">=</span> <span class="n">split</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;.json&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="n">outfile</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">outpath</span><span class="p">,</span><span class="n">outfile</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="n">pprint</span><span class="p">(</span><span class="n">outfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">outfile</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#neo_applified = instantiate_neo_model_api()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cwd</span> <span class="o">=</span> <span class="n">get_cwd</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_list</span> <span class="o">=</span> <span class="n">get_files</span><span class="p">(</span><span class="n">cwd</span> <span class="o">=</span> <span class="n">cwd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">output_files</span> <span class="o">=</span> <span class="n">citation_output</span><span class="p">(</span><span class="n">file_list</span><span class="p">,</span><span class="n">cwd</span><span class="p">)</span>
</span></span></code></pre></div>]]></content>
			<postid> 3cb320c8b411159d5d3ffe1a95808307</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Rice Paddy Methane Emissions Estimation: Part 1</title>
			<link>//localhost:1313/en/posts/rice-paddy-emissions-1/</link>
			<pubDate>Sat, 21 May 2022 08:30:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/rice-paddy-emissions-1/</guid>
			<description><![CDATA[Fact checking reported methane emissions proposed by the UN and Climate TRACE]]></description>
			<content type="html"><![CDATA[<h1 id="methane-emissions-estimation-data-part-1-a-comparison-between-faostat-and-university-of-malaysia-estimates">Methane Emissions Estimation Data Part 1: A Comparison between FAOSTAT and University of Malaysia Estimates</h1>
<p>This post documents the data exploration phase of a project that determines whether global methane emissions produced by rice paddies are undercounted.</p>
<p>It is fairly code python and pandas heavy.</p>
<p>The code and data exploration follows the summary below.</p>
<h2 id="inspiration-for-this-work">Inspiration for this work</h2>
<p>The University of Malaysia in partnership with Climate TRACE release a paper stating that the UN undercounts rice paddy methane emissions by about 16%.  Upon review of their claims, I decided to test the data myself across a 5 year distribution to verify that the claims hold up across multiple distributions.</p>
<h3 id="university-of-malaysia-methodological-deficiencies">University of Malaysia Methodological Deficiencies</h3>
<ul>
<li>Comparing a 2019 distribution FAOSTAT to a 2020 distribution.</li>
<li>Rounding to 4 signficant figures.</li>
<li>Testing only one year of emissions data.</li>
<li>Did not publish data to hypothesis testing to determine if emission distributions significantly vary annually and between states.</li>
<li>Relying only on satellite data may undercount hectares in cultivation at higher altitudes.</li>
</ul>
<h3 id="faostat-methodological-deficiencies">FaoStat Methodological Deficiencies</h3>
<ul>
<li>Relies upon official government statistics which can be manipulated at any point along the bureaucratic paper chain.</li>
<li>There is an incentive for certain nations to reduce their counts in order to receive international aid and to meet emissions standards.</li>
</ul>
<h3 id="university-of-malaysia-acknowledging-deficiencies-like-all-good-papers-should">University of Malaysia acknowledging deficiencies (like all good papers should)</h3>
<p>&ldquo;The difference between harvested rice cultivation area from statistical data and remote-sensing estimates can be due to two factors: (i) MODIS data which have moderate spatial resolution lead to mixed pixels, where rice fields and non-rice fields are combined. This can overestimate area, especially in lowland regions and have a low ability to detect small rice field patches in upland regions (Frolking et al 1999, Seto et al 2000); and (ii) political and policy factors (Yan et al., 2019) such as determination of the amount of subsidies for fertilizers and evaluation of achievement of government programs in the agricultural sector. Other factors that contribute to discrepancy in CH4 emission are from different emission and scale factors that are related to water regime and organic amendment. These values give high uncertainty since the availability of these data are limited and quite variable.&rdquo;</p>
<h2 id="my-initial-impressions-and-findings">My Initial Impressions and findings</h2>
<h3 id="initial">Initial</h3>
<p>The percent difference and the tonnage difference do not support each other.  I need to recalculate the totals section to ensure that we are doing things correctly.</p>
<p>I need to confirm the values, but I&rsquo;m initially impressed by the fact that the FAOSTAT data reports higher values than the Malaysia data on average.  According to the included paper this should not be the case.</p>
<h3 id="verified">Verified</h3>
<p>I calculated differences totals and means per DataFrame to ensure accuracy prior to the join.  I also dropped pre-calcuated values when joining to ensure that the aggregation algorithms to not modify the results.</p>
<p>The data is now consistent and supports the findings of the University of Malaysia Paper.  With that said it is important to note that the differences recorded are far smaller than suggested.</p>
<h2 id="import-dependencies">Import Dependencies</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">folium</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">contextily</span> <span class="k">as</span> <span class="nn">cx</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">shapely.geometry</span> <span class="kn">import</span> <span class="n">Point</span><span class="p">,</span> <span class="n">LineString</span><span class="p">,</span> <span class="n">Polygon</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scipy.spatial</span> <span class="kn">import</span> <span class="n">cKDTree</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">geopy.distance</span> <span class="kn">import</span> <span class="n">distance</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">scipy.stats</span> <span class="k">as</span> <span class="nn">stats</span>
</span></span></code></pre></div><h3 id="dependencies">Dependencies</h3>
<ul>
<li>Geopandas</li>
<li>pandas</li>
<li>openpyxl</li>
<li>Shapely</li>
<li>geopy Distance</li>
<li>numpy</li>
</ul>
<h2 id="exploration-plan">Exploration Plan</h2>
<h3 id="data-imports">Data Imports</h3>
<ul>
<li>/Users/jnapolitano/Projects/wattime-takehome/data/ch4_2015-2021.xlsx</li>
<li>/Users/jnapolitano/Projects/wattime-takehome/data/emissions_csv_fao_emiss_csv_ch4_fao_2015_2019_tonnes.xlsx</li>
</ul>
<h3 id="import-data-frames">Import Data Frames</h3>
<p>Since jupyter caches the data to the notebook json I can import the dataframes that I will be using together.</p>
<p>If I were to build automated scripts to perform the analysis I would only load the data necessary to perform a process.</p>
<h3 id="experiment-with-plots-for-each-set">Experiment with Plots for each Set</h3>
<p>I don&rsquo;t know exactly which plots I want to include in the final report.</p>
<p>I &rsquo;ll plot a few for each data set</p>
<h3 id="calculate-differences-between-the-datasets">Calculate differences between the datasets</h3>
<ul>
<li>create a differences data frame</li>
<li>write to file for use</li>
<li>plot</li>
</ul>
<h2 id="university-of-malaysia-emission-estimates">University of Malaysia Emission Estimates</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">filepath</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/wattime-takehome/wattime-takehome/data/ch4_2015-2021.xlsx&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="print-df-head">Print Df Head</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="calculate-co2-equivalency">Calculate Co2 Equivalency</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2015&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2015&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">25</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2016&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2016&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">25</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2017&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2017&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">25</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2018&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2018&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">25</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2019&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2019&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">25</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="calculate-means">Calculate Means</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="s1">&#39;mean&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">malaysia_emissions_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s1">&#39;country_name&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&#34;Total&#34;</span><span class="p">)]</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">number</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span><span class="o">.</span><span class="n">at</span><span class="p">[</span><span class="s1">&#39;mean&#39;</span><span class="p">,</span><span class="s1">&#39;country_name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;mean&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="calculate-means-and-totals-across-rows">Calculate Means and Totals Across Rows</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s2">&#34;Mean_CH4&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">mean_series</span>
</span></span><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s1">&#39;Total_CH4&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">total_series</span> 
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## the select np.number is uncecessary, but i&#39;m including anyways as it doesnt really hurt but for a small calculation penalty</span>
</span></span><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s2">&#34;Mean_CO2&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">mean_series</span>
</span></span><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s1">&#39;Total_CO2&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">total_series</span> 
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">drop</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="write-data-to-file">Write Data to File</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">outfile</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/wattime-takehome/wattime-takehome/data/TRACE_DATA.csv&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="n">outfile</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="university-of-malaysia-plots">University of Malaysia Plots</h2>
<h3 id="university-of-malaysia-bar-plot">University of Malaysia Bar Plot</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span> <span class="o">=</span> <span class="s2">&#34;barh&#34;</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="s1">&#39;country_name&#39;</span><span class="p">,</span> <span class="n">xlabel</span> <span class="o">=</span> <span class="s2">&#34;Country Name&#34;</span><span class="p">,</span> <span class="n">ylabel</span> <span class="o">=</span> <span class="s2">&#34;CH4 Tonnes&#34;</span><span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:ylabel='Country Name'&gt;
</code></pre>
<p><img src="data_exploration_files/data_exploration_28_1.png" alt="png"></p>
<h3 id="university-of-malaysia-density-plot">University of Malaysia Density Plot</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">rot</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">kind</span> <span class="o">=</span> <span class="s2">&#34;density&#34;</span><span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span> 
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:ylabel='Density'&gt;
</code></pre>
<p><img src="data_exploration_files/data_exploration_30_1.png" alt="png"></p>
<p>I did not exclude totals or mean from the dataframe, but as we can see the second hump in the density graph shows the distribution of totals annualy.  Interestingly the 2020 data is shifted further to the right than other years.  This actually questions the validity of the study promoted by the University of malaysia</p>
<h2 id="faostat-data">FAOSTAT Data</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">filepath</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/wattime-takehome/wattime-takehome/data/emissions_csv_fao_emiss_csv_ch4_fao_2015_2019_tonnes.xlsx&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="print-faostat-data">Print FAOSTAT Data</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## I didn&#39;t write the index to the csv file in the previous step.  IF time permits go back and fix this error</span>
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="change-code-to-iso3_country">Change code to iso3_country</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;code&#34;</span><span class="p">:</span> <span class="s2">&#34;iso3_country&#34;</span><span class="p">},</span> <span class="n">inplace</span> <span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;country&#34;</span><span class="p">:</span> <span class="s2">&#34;country_name&#34;</span><span class="p">},</span> <span class="n">inplace</span> <span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># The column title is not a string.  It is understood as an int or a datetime.  </span>
</span></span><span class="line"><span class="cl"><span class="c1">#faostat_emissions_df[&#39;2015&#39;]</span>
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="set-country_name-total-to-total">Set country_name total to total</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="o">.</span><span class="n">at</span><span class="p">[</span><span class="mi">23</span><span class="p">,</span><span class="s1">&#39;country_name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Total&#39;</span>
</span></span></code></pre></div><h3 id="drop-fao-country-code">Drop Fao Country Code</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">labels</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;country_fao&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="calculate-co2-equivalency-1">Calculate Co2 Equivalency</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2015&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">faostat_emissions_df</span><span class="p">[</span><span class="mi">2015</span><span class="p">]</span> <span class="o">*</span> <span class="mi">25</span>
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2016&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">faostat_emissions_df</span><span class="p">[</span><span class="mi">2016</span><span class="p">]</span> <span class="o">*</span> <span class="mi">25</span>
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2017&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">faostat_emissions_df</span><span class="p">[</span><span class="mi">2017</span><span class="p">]</span> <span class="o">*</span> <span class="mi">25</span>
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2018&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">faostat_emissions_df</span><span class="p">[</span><span class="mi">2018</span><span class="p">]</span> <span class="o">*</span> <span class="mi">25</span>
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2019&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">faostat_emissions_df</span><span class="p">[</span><span class="mi">2019</span><span class="p">]</span> <span class="o">*</span> <span class="mi">25</span>
</span></span></code></pre></div><h3 id="calculate-means-1">Calculate Means</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="s1">&#39;mean&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">faostat_emissions_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">faostat_emissions_df</span><span class="p">[</span><span class="s1">&#39;country_name&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&#34;Total&#34;</span><span class="p">)]</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">number</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="o">.</span><span class="n">at</span><span class="p">[</span><span class="s1">&#39;mean&#39;</span><span class="p">,</span><span class="s1">&#39;country_name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;mean&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#faostat_emissions_df.at[&#39;mean&#39;,&#39;country_fao&#39;] = &#39;mean&#39;</span>
</span></span></code></pre></div><h3 id="calculate-means-and-totals-across-rows-1">Calculate Means and Totals Across Rows</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="p">[</span><span class="s2">&#34;Mean_CH4&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">mean_series</span>
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="p">[</span><span class="s1">&#39;Total_CH4&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">total_series</span> 
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## the select np.number is uncecessary, but i&#39;m including anyways as it doesnt really hurt but for a small calculation penalty</span>
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="p">[</span><span class="s2">&#34;Mean_CO2&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">mean_series</span>
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="p">[</span><span class="s1">&#39;Total_CO2&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">total_series</span> 
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="faostat-data-to-file">FAOSTAT Data to File</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">outfile</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/wattime-takehome/wattime-takehome/data/FAOSTAT_DATA.csv&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="n">outfile</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="faostat-plots">FaoSTAT PLOTS</h2>
<h3 id="faostat-hectare-estimates-bar-plot">FAOSTAT Hectare Estimates Bar Plot</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span> <span class="o">=</span> <span class="s2">&#34;barh&#34;</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="s1">&#39;country_name&#39;</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">2016</span><span class="p">,</span> <span class="mi">2017</span><span class="p">,</span> <span class="mi">2018</span><span class="p">,</span> <span class="mi">2019</span><span class="p">],</span> <span class="n">xlabel</span> <span class="o">=</span> <span class="s2">&#34;Country Name&#34;</span><span class="p">,</span> <span class="n">ylabel</span> <span class="o">=</span> <span class="s2">&#34;Tonnes CH4&#34;</span><span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:ylabel='Country Name'&gt;
</code></pre>
<p><img src="data_exploration_files/data_exploration_55_1.png" alt="png"></p>
<h3 id="faostat-density-plot">FAOSTAT Density Plot</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">rot</span> <span class="o">=</span> <span class="mi">90</span><span class="p">,</span> <span class="n">kind</span> <span class="o">=</span> <span class="s2">&#34;density&#34;</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2015</span><span class="p">,</span> <span class="mi">2016</span><span class="p">,</span> <span class="mi">2017</span><span class="p">,</span> <span class="mi">2018</span><span class="p">,</span> <span class="mi">2019</span><span class="p">],</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span> 
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:ylabel='Density'&gt;
</code></pre>
<p><img src="data_exploration_files/data_exploration_57_1.png" alt="png"></p>
<p>The density plot is fairly consistent.  There is nearly no variation between nations and in total.  The 2020 data may show otherwise as the Malaysian data shows.</p>
<h2 id="join-dfs-by-iso3-country">Join Df&rsquo;s by ISO3 Country</h2>
<h3 id="drop-totals-and-means-from-the-original-df">Drop totals and means from the original df.</h3>
<p>Because I am joining on iso3 country country code if the totals and means are located at different indexes we may experience merge and calculation errors</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span> <span class="o">=</span> <span class="n">faostat_emissions_df</span><span class="p">[(</span><span class="n">faostat_emissions_df</span><span class="p">[</span><span class="s2">&#34;country_name&#34;</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&#34;Total&#34;</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">faostat_emissions_df</span><span class="p">[</span><span class="s1">&#39;country_name&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;mean&#39;</span><span class="p">)]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span> <span class="o">=</span> <span class="n">malaysia_emissions_df</span><span class="p">[(</span><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s2">&#34;country_name&#34;</span><span class="p">]</span> <span class="o">!=</span> <span class="s2">&#34;Total&#34;</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">malaysia_emissions_df</span><span class="p">[</span><span class="s1">&#39;country_name&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;mean&#39;</span><span class="p">)]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">faostat_emissions_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">malaysia_emissions_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">merged_df</span> <span class="o">=</span> <span class="n">faostat_emissions_df</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">malaysia_emissions_df</span><span class="p">,</span><span class="n">suffixes</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;_FAOSTAT&#39;</span><span class="p">,</span> <span class="s1">&#39;_TRACE&#39;</span><span class="p">),</span> <span class="n">on</span><span class="o">=</span><span class="s1">&#39;iso3_country&#39;</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="n">sort</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="dropping-2020-and-2021-from-the-data-sets">Dropping 2020 and 2021 from the data sets</h3>
<p>I will only compare data compiled from the same year.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">merged_df</span><span class="o">.</span><span class="n">drop</span><span class="p">([</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">2021</span><span class="p">,</span> <span class="s2">&#34;tCH4_2020&#34;</span><span class="p">,</span><span class="s2">&#34;tCH4_2021&#34;</span><span class="p">],</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">merged_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="calculate-difference-in-ch4-tonnes-between-the-estimates">Calculate difference in Ch4 Tonnes Between the Estimates</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Calculate Difference in tons</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_diff_2015&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="p">[</span><span class="mi">2015</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2015&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_diff_2016&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="p">[</span><span class="mi">2016</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2016&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_diff_2017&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="p">[</span><span class="mi">2017</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2017&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_diff_2018&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="p">[</span><span class="mi">2018</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2018&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_diff_2019&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="p">[</span><span class="mi">2019</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2019&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_diff_means&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Mean_CH4_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Mean_CH4_TRACE&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_diff_totals&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CH4_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CH4_TRACE&#39;</span><span class="p">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">merged_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="calculate-difference-in-c02-tonnes-between-the-estimates">Calculate difference in C02 Tonnes Between the Estimates</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Calculate Difference in tons</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_diff_2015&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2015_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2015_TRACE&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_diff_2016&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2016_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2016_TRACE&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_diff_2017&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2017_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2017_TRACE&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_diff_2018&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2018_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2018_TRACE&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_diff_2019&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2019_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2019_TRACE&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_diff_means&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Mean_CO2_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Mean_CO2_TRACE&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_diff_totals&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CO2_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CO2_TRACE&#39;</span><span class="p">]</span>
</span></span></code></pre></div><h3 id="calculating-the-ch4-percent-differences-between-the-estimates">Calculating the CH4 Percent Differences Between the Estimates</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## Calculate Percent Differnces on this data set )*100</span>
</span></span><span class="line"><span class="cl"><span class="c1"># With raw data i could have accomplished this with a groupby.aggregate(lambda x ), however the pivot tables given are not easy to apply #vectorized functions across time series</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_abs_percent_diff_2015&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="nb">abs</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2015</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2015&#39;</span><span class="p">]))</span><span class="o">/</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2015</span><span class="p">]</span> <span class="o">+</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2015&#39;</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_abs_percent_diff_2016&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="nb">abs</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2016</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2016&#39;</span><span class="p">]))</span><span class="o">/</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2016</span><span class="p">]</span> <span class="o">+</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2016&#39;</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">)))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_abs_percent_diff_2017&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="nb">abs</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2017</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2017&#39;</span><span class="p">]))</span><span class="o">/</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2017</span><span class="p">]</span> <span class="o">+</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2017&#39;</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_abs_percent_diff_2018&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nb">abs</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2018</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2018&#39;</span><span class="p">]))</span><span class="o">/</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2018</span><span class="p">]</span> <span class="o">+</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2018&#39;</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_abs_percent_diff_2019&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nb">abs</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2019</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2019&#39;</span><span class="p">]))</span><span class="o">/</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2019</span><span class="p">]</span> <span class="o">+</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2019&#39;</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_abs_percent_diff_means&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nb">abs</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Mean_CH4_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Mean_CH4_TRACE&#39;</span><span class="p">]))</span><span class="o">/</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Mean_CH4_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Mean_CH4_TRACE&#39;</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_abs_percent_diff_totals&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nb">abs</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CH4_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CH4_TRACE&#39;</span><span class="p">]))</span><span class="o">/</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CH4_TRACE&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CH4_FAOSTAT&#39;</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_relative_percent_diff_2015&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2015</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2015&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2015</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_relative_percent_diff_2016&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2016</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2016&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2016</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_relative_percent_diff_2017&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2017</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2017&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2017</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_relative_percent_diff_2018&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2018</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2018&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2018</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_relative_percent_diff_2019&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2019</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCH4_2019&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="mi">2019</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_relative_percent_diff_means&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Mean_CH4_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Mean_CH4_TRACE&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="s2">&#34;Mean_CH4_FAOSTAT&#34;</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CH4_relative_percent_diff_totals&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CH4_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CH4_TRACE&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="s2">&#34;Total_CH4_FAOSTAT&#34;</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>
</span></span></code></pre></div><h3 id="calculate-co2-differences">Calculate CO2 Differences</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## Calculate Percent Differnces on this data set )*100</span>
</span></span><span class="line"><span class="cl"><span class="c1"># With raw data i could have accomplished this with a groupby.aggregate(lambda x ), however the pivot tables given are not easy to apply #vectorized functions across time series</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_abs_percent_diff_2015&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nb">abs</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2015_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2015_TRACE&#39;</span><span class="p">]))</span><span class="o">/</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2015_TRACE&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2015_FAOSTAT&#39;</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_abs_percent_diff_2016&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="nb">abs</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2016_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2016_TRACE&#39;</span><span class="p">]))</span><span class="o">/</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2016_TRACE&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2016_FAOSTAT&#39;</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_abs_percent_diff_2017&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="nb">abs</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2017_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2017_TRACE&#39;</span><span class="p">]))</span><span class="o">/</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2017_TRACE&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2017_FAOSTAT&#39;</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_abs_percent_diff_2018&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="nb">abs</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2018_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2018_TRACE&#39;</span><span class="p">]))</span><span class="o">/</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2018_TRACE&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2018_FAOSTAT&#39;</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_abs_percent_diff_2019&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="nb">abs</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2019_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2019_TRACE&#39;</span><span class="p">]))</span><span class="o">/</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2019_TRACE&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2019_FAOSTAT&#39;</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_abs_percent_diff_means&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="nb">abs</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Mean_CO2_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Mean_CO2_TRACE&#39;</span><span class="p">]))</span><span class="o">/</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Mean_CO2_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Mean_CO2_TRACE&#39;</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_abs_percent_diff_totals&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="nb">abs</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CO2_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CO2_TRACE&#39;</span><span class="p">]))</span><span class="o">/</span><span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CO2_TRACE&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CO2_FAOSTAT&#39;</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_relative_percent_diff_2015&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2015_FAOSTAT&#39;</span><span class="p">]</span>  <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2015_TRACE&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2015_FAOSTAT&#39;</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_relative_percent_diff_2016&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2016_FAOSTAT&#39;</span><span class="p">]</span>  <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2016_TRACE&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2016_FAOSTAT&#39;</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_relative_percent_diff_2017&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2017_FAOSTAT&#39;</span><span class="p">]</span>  <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2017_TRACE&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2017_FAOSTAT&#39;</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_relative_percent_diff_2018&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2018_FAOSTAT&#39;</span><span class="p">]</span>  <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2018_TRACE&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2018_FAOSTAT&#39;</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_relative_percent_diff_2019&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2019_FAOSTAT&#39;</span><span class="p">]</span>  <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2019_TRACE&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;tCO2_2019_FAOSTAT&#39;</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_relative_percent_diff_means&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s2">&#34;Mean_CO2_FAOSTAT&#34;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Mean_CO2_TRACE&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="s2">&#34;Mean_CO2_FAOSTAT&#34;</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;CO2_relative_percent_diff_totals&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CO2_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;Total_CO2_TRACE&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">merged_df</span><span class="p">[</span><span class="s2">&#34;Total_CO2_FAOSTAT&#34;</span><span class="p">]))</span><span class="o">*</span><span class="mi">100</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">merged_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="recalculate-means">Recalculate Means</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">merged_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="s1">&#39;mean&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">number</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">merged_df</span><span class="o">.</span><span class="n">at</span><span class="p">[</span><span class="s1">&#39;mean&#39;</span><span class="p">,</span><span class="s1">&#39;country_name_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;mean&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="o">.</span><span class="n">at</span><span class="p">[</span><span class="s1">&#39;mean&#39;</span><span class="p">,</span><span class="s1">&#39;country_name_TRACE&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;mean&#39;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">merged_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="recalculate-totals">Recalculate Totals</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">merged_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="s1">&#39;total&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">merged_df</span><span class="p">[</span><span class="n">merged_df</span><span class="p">[</span><span class="s1">&#39;country_name_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;mean&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">select_dtypes</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">number</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">merged_df</span><span class="o">.</span><span class="n">at</span><span class="p">[</span><span class="s1">&#39;total&#39;</span><span class="p">,</span><span class="s1">&#39;country_name_FAOSTAT&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;total&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="o">.</span><span class="n">at</span><span class="p">[</span><span class="s1">&#39;total&#39;</span><span class="p">,</span><span class="s1">&#39;country_name_TRACE&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;total&#39;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">merged_df</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">drop</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">merged_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="merged-data-to-file">Merged Data to File</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">outfile</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/wattime-takehome/wattime-takehome/data/MERGED_DATA.csv&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">merged_df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="n">outfile</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="co2-difference-plots">CO2 Difference Plots</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">merged_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span> <span class="o">=</span> <span class="s2">&#34;barh&#34;</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="s1">&#39;country_name_FAOSTAT&#39;</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;CO2_diff_2015&#34;</span><span class="p">,</span> <span class="s2">&#34;CO2_diff_2016&#34;</span><span class="p">,</span>	<span class="s2">&#34;CO2_diff_2017&#34;</span><span class="p">,</span> <span class="s2">&#34;CO2_diff_2018&#34;</span><span class="p">,</span> <span class="s2">&#34;CO2_diff_2019&#34;</span><span class="p">],</span> <span class="n">xlabel</span> <span class="o">=</span> <span class="s2">&#34;Country Name&#34;</span><span class="p">,</span> <span class="n">ylabel</span> <span class="o">=</span> <span class="s2">&#34;Tonnes CH4&#34;</span><span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:ylabel='Country Name'&gt;
</code></pre>
<p><img src="data_exploration_files/data_exploration_92_1.png" alt="png"></p>
<h3 id="percent-difference-plot">Percent Difference Plot</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">merged_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span> <span class="o">=</span> <span class="s2">&#34;barh&#34;</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="s1">&#39;country_name_FAOSTAT&#39;</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;CO2_relative_percent_diff_2015&#34;</span><span class="p">,</span> <span class="s2">&#34;CO2_relative_percent_diff_2016&#34;</span><span class="p">,</span>	<span class="s2">&#34;CO2_relative_percent_diff_2017&#34;</span><span class="p">,</span> <span class="s2">&#34;CO2_relative_percent_diff_2018&#34;</span><span class="p">,</span> <span class="s2">&#34;CO2_relative_percent_diff_2019&#34;</span><span class="p">],</span> <span class="n">xlabel</span> <span class="o">=</span> <span class="s2">&#34;Country Name&#34;</span><span class="p">,</span> <span class="n">ylabel</span> <span class="o">=</span> <span class="s2">&#34;Tonnes CH4&#34;</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:ylabel='Country Name'&gt;
</code></pre>
<p><img src="data_exploration_files/data_exploration_94_1.png" alt="png"></p>
]]></content>
			<postid> 477064bf1a183c84a108497c0b1d6787</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Conduct Legal Research with AI: Part 4</title>
			<link>//localhost:1313/en/posts/legal-research-part-4/</link>
			<pubDate>Thu, 19 May 2022 22:30:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/legal-research-part-4/</guid>
			<description><![CDATA[Importing case variables and established relationships to the graph.]]></description>
			<content type="html"><![CDATA[<h1 id="conduct-legal-research-with-ai-part-4">Conduct Legal Research with AI Part 4</h1>
<p>This is the fourth post in a series documenting the process of building an ml pipeline used to train models to predict the outcomes of Supreme Court cases.</p>
<p>You can find the others at:</p>
<ul>
<li>Part 1: <a href="https://blog.jnapolitano.io/neo4j_integration/">blog.jnapolitano.io/neo4j_integration/</a></li>
<li>Part 2: <a href="https://blog.jnapolitano.io/constitution_to_neo/">blog.jnapolitano.io/constitution_to_neo/</a></li>
<li>Part 3: <a href="https://blog.jnapolitano.io/ai-proof-of-concept/">blog.jnapolitano.io/ai-proof-of-concept/</a></li>
</ul>
<h2 id="modeling-the-supreme-court">Modeling the Supreme Court</h2>
<p>Thankfully, much of the ground work has been done by contributors to <a href="http://scdb.wustl.edu/documentation.php">The Washington University of St. Louis Law School Supreme Court Database</a></p>
<p>Unfortunately, The Supreme Court Database is limited in its scope. My approach extends their work by  creating a graph database.</p>
<p>I have chosen to model the data in a graph database with a Person, Object, Event, Location (POLE) schema.  This will permit me to relate cases, justices, subjects, objects, ideas, and events to one another to train ML models to automate much of the legal research pipeline.</p>
<p>The models could be ported to work with any body of jurisprudence.</p>
<h2 id="the-case-class">The Case Class</h2>
<p>In this post, I publish only the Case schema that will be used to relate cases to other objects for a machine learning algorithm to predict the outcomes, subjects, and legal provisions of court cases.</p>
<p>A detailed report documenting each variable will be produced in the future when I publish the database.  For the time being, the Case class below should suitably demonstrate the foundation of the database.</p>
<p>I will continue to publish the remaining classes as they are completed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Case</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#####Media########</span>
</span></span><span class="line"><span class="cl">    <span class="n">pdf</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#### Identification Variables####</span>
</span></span><span class="line"><span class="cl">    <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">group</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">loc_title</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">url</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">shelf_id</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">usCite</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">caseId</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">    <span class="n">caseName</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">scdb_docket_id</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">scdb_vote_id</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">scdb_issues_id</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">supCite</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">lawEdCite</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">lexisCite</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">dockNumb</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">######background Variables########</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">petitioner</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Petitioner&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_PETITIONER&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">petitionState</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;State&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_PETITIONER&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">respondent</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Respondent&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_RESPONDENT&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">respondentState</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;State&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_RESPONDENT&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">jurisdiction</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Jurisdiction&#39;</span><span class="p">,</span> <span class="s1">&#39;JURISDICTION&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">adminAction</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Admin&#39;</span><span class="p">,</span> <span class="s1">&#39;ACTION&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">threeJudgeFdc</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">origin</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;USCOURT&#39;</span><span class="p">,</span> <span class="s1">&#39;ORIGIN&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">origin_state</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;State&#39;</span><span class="p">,</span> <span class="s1">&#39;ORIGIN&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">source</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Source&#39;</span><span class="p">,</span> <span class="s1">&#39;SOURCE&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">source_state</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;State&#39;</span><span class="p">,</span> <span class="s1">&#39;SOURCE&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">lc_disagreement</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">certReason</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;CertReason&#39;</span><span class="p">,</span> <span class="s1">&#39;REASON&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">lc_disposition</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Disposition&#39;</span><span class="p">,</span> <span class="s1">&#39;LC_DISPOSITION&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">lc_direction</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Direction&#39;</span><span class="p">,</span> <span class="s1">&#39;LC_DIRECTION&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#####3 Chronological #####</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># From Spaethe</span>
</span></span><span class="line"><span class="cl">    <span class="n">dateArgument</span> <span class="o">=</span> <span class="n">DateProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">dateDecision</span> <span class="o">=</span> <span class="n">DateProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">dateReargue</span> <span class="o">=</span> <span class="n">DateProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># From LOC</span>
</span></span><span class="line"><span class="cl">    <span class="n">date</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">dates</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">term</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Term&#39;</span><span class="p">,</span> <span class="s1">&#39;TERM_OF&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">natCourt</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Natcourt&#39;</span><span class="p">,</span><span class="s1">&#39;NAT_COURT&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">chief</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Justice&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_CHIEF&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">######Substantive#####</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">subject</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">decisionDirection</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Direction&#39;</span><span class="p">,</span> <span class="s1">&#39;SUP_COURT_MAJORITY_DIRECTION&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">decisionDirectionDissent</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Direction&#39;</span><span class="p">,</span> <span class="s1">&#39;SUP_COURT_DISSENT_DIRECTION&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">spaethIssue</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;SpaethIssue&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_SPAETH_ISSUE&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">spaethIssueArea</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;SpaethIssueArea&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_SPAETH_ISSUE_AREA&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">subject_relationship</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Subject&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_CASE_OF&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">article</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Case&#34;</span><span class="p">,</span> <span class="s1">&#39;IS_ARTICLE_OF&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">clause</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Clause&#34;</span><span class="p">,</span> <span class="s1">&#39;IS_CLAUSE_OF&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">section</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Section&#34;</span><span class="p">,</span> <span class="s1">&#39;IS_SECTION_OF&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">sub_clause</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Subclause&#34;</span><span class="p">,</span> <span class="s1">&#39;IS_SUB_CLAUSE_OF&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">major_case_topic</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Subject&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_MAJOR_TOPIC&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">authority</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Authority&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_AUTHORITY&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">legalProvision</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;legalProvision&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_PROVISION&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">lawType</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;lawType&#39;</span><span class="p">,</span> <span class="s1">&#39;lawType&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">law</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Law&#39;</span><span class="p">,</span> <span class="s1">&#39;SUPPORTING_LAW&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">    <span class="c1">######Outcome Variables#####</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">decisionType</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;DecisionType&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_DECISION_TYPE&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">declarationUnconstitutional</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Constitutional&#39;</span><span class="p">,</span><span class="s1">&#39;UNCONSTITUTIONAL&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">delcarationConstitutional</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Constitutional&#39;</span><span class="p">,</span> <span class="s2">&#34;CONSTITUTIONAL&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">disposition</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Disposition&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_DISPOSITION&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">winningParty</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Party&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_WINNER&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">FormalAlterationOfPrecedent</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">alteredPrecedent</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Case&#34;</span><span class="p">,</span> <span class="s1">&#39;Altered_Precedent&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">## Voting and Opinion Variables</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># will account for all types of votes a node for each outcome</span>
</span></span><span class="line"><span class="cl">    <span class="n">vote</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Vote&#39;</span><span class="p">,</span> <span class="s1">&#39;OUTCOME&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">majOpinWriter</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Justice&#39;</span><span class="p">,</span> <span class="s1">&#39;WROTE_MAJORITY_OPINION&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">majOpinWriter</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Justice&#39;</span><span class="p">,</span> <span class="s2">&#34;ASSIGNED_MAJORITY_OPINION&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">affirmative_vote</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Justice&#39;</span><span class="p">,</span> <span class="s2">&#34;AFFIRMATE_VOTE&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">negative_vote</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Justice&#39;</span><span class="p">,</span> <span class="s2">&#34;NEGATIVE_VOTE&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">conservative_vote</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Justice&#39;</span><span class="p">,</span> <span class="s1">&#39;CONSERVATIVE&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">liberal_vote</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Justice&#39;</span><span class="p">,</span> <span class="s2">&#34;LIBERAL&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">majority_vote</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Justice&#39;</span><span class="p">,</span> <span class="s1">&#39;MAJORITY_VOTE&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">miniority_vote</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Justice&#39;</span><span class="p">,</span><span class="s1">&#39;MINORITY_VOTE&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">wrote_an_opinion</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Justice&#39;</span><span class="p">,</span> <span class="s1">&#39;WROTE_AN_OPINION&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">co_authored_opinion</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Justice&#39;</span><span class="p">,</span> <span class="s2">&#34;COAUTHORED_OPINION&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">agreed_with_concurrence</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Justice&#39;</span><span class="p">,</span> <span class="s1">&#39;AGREED_WITH_CONCURRENCE&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">agreed_with_dissent</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Justice&#39;</span><span class="p">,</span> <span class="s1">&#39;AGREED_WITH_CONCURRENCE&#39;</span><span class="p">)</span>
</span></span></code></pre></div>]]></content>
			<postid> 9f5aaaa103ede6048db01cc188d7d733</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Conduct Legal Research with AI: Part 3</title>
			<link>//localhost:1313/en/posts/legal-research-part-3/</link>
			<pubDate>Wed, 18 May 2022 14:40:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/legal-research-part-3/</guid>
			<description><![CDATA[Testing TensorFlow models against the SCDB data set.]]></description>
			<content type="html"><![CDATA[<h1 id="conduct-legal-research-with-ai-part-3">Conduct Legal Research with AI: Part 3</h1>
<p>This is the third post in a series documenting the process of building an ml pipeline that will be used to train models to predict the outcomes of Supreme Court Cases.</p>
<p>You can find the others at:</p>
<ul>
<li><a href="https://blog.jnapolitano.io/neo4j_integration/">blog.jnapolitano.io/neo4j_integration/</a></li>
<li><a href="https://blog.jnapolitano.io/constitution_to_neo/">blog.jnapolitano.io/constitution_to_neo/</a></li>
</ul>
<h2 id="introduction">Introduction</h2>
<p>In this post, I will be testing a sample TensorFlow pipeline against the <a href="http://scdb.wustl.edu/">Supreme Court Database</a> maintained by the Washington University Law School in order to build a proof of concept model for a Supreme Court Graph Analysis project.</p>
<h2 id="the-data-set">The Data Set</h2>
<p>The data set is fairly limited. There are only about 250 issue areas to train against. It also does not include doctrinal trees to train an algorithm to predict when the court will break from precedent.</p>
<p>The data records primarily the voting behavior of justices, the policy direction of the outcome, and the political ideology score of the outcome.</p>
<p>Policy direction and political ideology are factors coded by individuals that may be prone to error an bias. In my analysis I will test against the findings of this model to determine which factors are most powerful.</p>
<h2 id="the-model">The Model</h2>
<p>I tested against case centric and justice centric data orientations.</p>
<h3 id="case-centric-model">Case Centric Model</h3>
<p>The first is case centric.  The power of this model is fairly limited, as it attempts to discern the outcome of a case from the aggregate behavior of the current justices on the bench.  It essentially creates a score that is modified by each case outcome to determine if the court will vote conservatively or liberally towards a case of regarding a specific issue area.  It is important to note that the database limits each case to one overarching issue area.</p>
<h4 id="case-centric-training-features">Case Centric Training Features</h4>
<ul>
<li>issue</li>
<li>issueArea</li>
<li>naturalCourt</li>
<li>petitioner</li>
<li>petitionerState</li>
<li>respondent</li>
<li>jurisdiction</li>
<li>adminAction</li>
<li>adminActionState</li>
<li>threeJudgeFdc</li>
<li>caseOrigin</li>
<li>caseOriginState</li>
<li>respondentState</li>
<li>caseSource</li>
<li>caseSourceState</li>
<li>lawType</li>
<li>lawSupp</li>
</ul>
<h4 id="case-centric-results">Case Centric Results</h4>
<p>The models were able to predict the outcomes about 75 percent of the time following 1,000 epochs of training.  It is likely that factors other than previous voting behavior determine the outcome of the case.</p>
<h3 id="justice-centric-model">Justice Centric Model</h3>
<p>The second is justice centric.  The predictive power of this model, should in theory be greater as it attempts to determine the likely vote of an individual justice against an issue area.  Again this is limited as only the overarching issue area is available in the data.  It may very well prove that justices may favor free speech in most cases, except when the military is the target.  The model could not predict that, because the data is limited.</p>
<h4 id="justice-centric-training-features">Justice Centric Training Features</h4>
<ul>
<li>justice</li>
<li>issue</li>
<li>issueArea</li>
<li>lawType</li>
<li>direction</li>
<li>petitioner</li>
<li>naturalCourt</li>
<li>petitionerState</li>
<li>respondent</li>
<li>respondentState</li>
<li>jurisdiction</li>
<li>caseOrigin</li>
<li>caseOriginState</li>
<li>caseSource</li>
<li>caseSourceState</li>
<li>certReason</li>
<li>lawSupp</li>
</ul>
<h4 id="justice-centric-results">Justice Centric Results</h4>
<p>The justice centric pipeline results in accuracy exceeding 82 percent.  This is better, but a model that could consider more factors and issue areas would likely improve the results.</p>
<h2 id="next-steps">Next Steps</h2>
<p>I will integrate the models to my neo4j data set.  As of now, the graph database exceeds 50,000 individuals nodes and over 400,000 relationships.  It will allow me to train an algorithm that can determine a justices attitude towards, cases, clauses, sentences, states, petitioners, and any other feature integrated into the dataset.</p>
<h2 id="the-code">The Code</h2>
<h3 id="case-centric-training-pipeline">Case Centric Training Pipeline</h3>
<p>I&rsquo;ve included the entire model below.  Review my <a href="https://docs.jnapolitano.io/parts/ml-ai/tensorflow/project-supcourt-tensorflow/docs/SupremeCourtPredictionsCase/index.html">documentation site</a> for more detail.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Python" data-lang="Python"><span class="line"><span class="cl"><span class="c1">#supremeCourtPrediction.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#a program that uses the segal and spaeth dataset to predict the outcomes of cases</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="nn">tf</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">math</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">shap</span>
</span></span><span class="line"><span class="cl"><span class="n">shap</span><span class="o">.</span><span class="n">initjs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">csv</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">datetime</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tensorflow</span> <span class="kn">import</span> <span class="n">feature_column</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tensorflow.keras</span> <span class="kn">import</span> <span class="n">layers</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">permutations</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_environmental_variables</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">cwd</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">log_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cwd</span><span class="p">,</span><span class="s2">&#34;logs/fit/&#34;</span><span class="p">)</span> <span class="o">+</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&#34;%Y%m</span><span class="si">%d</span><span class="s2">-%H%M%S&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">cwd</span><span class="p">,</span> <span class="n">log_dir</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">load_data</span><span class="p">(</span><span class="n">cwd</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cwd</span><span class="p">,</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="s1">&#39;citation.csv&#39;</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="n">drop_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cwd</span><span class="p">,</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="s1">&#39;features&#39;</span><span class="p">,</span><span class="s1">&#39;drop&#39;</span><span class="p">,</span><span class="s1">&#39;drop.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(path)</span>
</span></span><span class="line"><span class="cl">    <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span> <span class="s1">&#39;unicode_escape&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(dataframe.head())</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">drop_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">cnt</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">fp</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#print(&#34;Dropping {} from dataframe&#34;.format(line))</span>
</span></span><span class="line"><span class="cl">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s2">&#34;&#39;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">dataframe</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">line</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">dataframe</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">dataframe</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#dataframe.issue = dataframe.astype({&#39;issue&#39;: &#39;str&#39;})</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#dataframe[issue] = dataframe[issue].astype(str)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(dataframe)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(dataframe.head())</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">dataframe</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">split_datframe</span><span class="p">(</span><span class="n">dataframe</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">train</span><span class="p">,</span> <span class="n">test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">dataframe</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">train</span><span class="p">,</span> <span class="n">val</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">train</span><span class="p">),</span> <span class="s1">&#39;train examples&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">val</span><span class="p">),</span> <span class="s1">&#39;validation examples&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">test</span><span class="p">),</span> <span class="s1">&#39;test examples&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">train</span><span class="p">,</span> <span class="n">test</span><span class="p">,</span> <span class="n">val</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># A utility method to create a tf.data dataset from a Pandas Dataframe</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">df_to_dataset</span><span class="p">(</span><span class="n">dataframe</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">labels</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;declarationUncon&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ds</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">Dataset</span><span class="o">.</span><span class="n">from_tensor_slices</span><span class="p">((</span><span class="nb">dict</span><span class="p">(</span><span class="n">dataframe</span><span class="p">),</span> <span class="n">labels</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">shuffle</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span> <span class="o">=</span> <span class="n">ds</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">buffer_size</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">dataframe</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">ds</span> <span class="o">=</span> <span class="n">ds</span><span class="o">.</span><span class="n">batch</span><span class="p">(</span><span class="n">batch_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">ds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ds</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_input_pipeline</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">test</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_ds</span> <span class="o">=</span> <span class="n">df_to_dataset</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">val_ds</span> <span class="o">=</span> <span class="n">df_to_dataset</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">test_ds</span> <span class="o">=</span> <span class="n">df_to_dataset</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">train_ds</span><span class="p">,</span> <span class="n">val_ds</span><span class="p">,</span> <span class="n">test_ds</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_feature_layer</span><span class="p">(</span><span class="n">cwd</span><span class="p">):</span> <span class="c1">#select the columns for analysis from dataset</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cwd</span><span class="p">,</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="s1">&#39;features&#39;</span><span class="p">,</span><span class="s1">&#39;use&#39;</span><span class="p">,</span><span class="s1">&#39;features.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">dict_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cwd</span><span class="p">,</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="s1">&#39;features&#39;</span><span class="p">,</span><span class="s1">&#39;use&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_columns</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">#embedded columns</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">feature_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">cnt</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">fp</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#print(&#34;Adding {} to features&#34;.format(line))</span>
</span></span><span class="line"><span class="cl">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s2">&#34;&#39;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span>   
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">indicator</span> <span class="o">=</span> <span class="n">feature_column</span><span class="o">.</span><span class="n">numeric_column</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1">#feature_column.categorical_column_with_vocabulary_file(</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#            key = line, vocabulary_file = os.path.join(dict_path,&#34;{}.txt&#34;.format(line)), default_value=0)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">indicator</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">feature_columns</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">indicator</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">#feature_columns.append(feature_column.embedding_column(indicator, dimension=8))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">crossed_feature</span> <span class="o">=</span> <span class="n">feature_column</span><span class="o">.</span><span class="n">crossed_column</span><span class="p">([</span><span class="s1">&#39;issue&#39;</span><span class="p">,</span> <span class="s1">&#39;issueArea&#39;</span><span class="p">,</span> <span class="s1">&#39;naturalCourt&#39;</span><span class="p">],</span> <span class="n">hash_bucket_size</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">crossed_feature</span> <span class="o">=</span> <span class="n">feature_column</span><span class="o">.</span><span class="n">indicator_column</span><span class="p">(</span><span class="n">crossed_feature</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_columns</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">crossed_feature</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">crossed_feature</span> <span class="o">=</span> <span class="n">feature_column</span><span class="o">.</span><span class="n">crossed_column</span><span class="p">([</span><span class="s1">&#39;issue&#39;</span><span class="p">,</span> <span class="s1">&#39;naturalCourt&#39;</span><span class="p">],</span> <span class="n">hash_bucket_size</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">crossed_feature</span> <span class="o">=</span> <span class="n">feature_column</span><span class="o">.</span><span class="n">indicator_column</span><span class="p">(</span><span class="n">crossed_feature</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_columns</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">crossed_feature</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">crossed_feature</span> <span class="o">=</span> <span class="n">feature_column</span><span class="o">.</span><span class="n">crossed_column</span><span class="p">([</span><span class="s1">&#39;issueArea&#39;</span><span class="p">,</span> <span class="s1">&#39;naturalCourt&#39;</span><span class="p">],</span><span class="n">hash_bucket_size</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">crossed_feature</span> <span class="o">=</span> <span class="n">feature_column</span><span class="o">.</span><span class="n">indicator_column</span><span class="p">(</span><span class="n">crossed_feature</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_columns</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">crossed_feature</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">   <span class="c1"># court_buckets = feature_column.bucketized_column(naturalCourt, boundaries=[18, 25, 30, 35, 40, 45, 50, 55, 60, 65])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#print(feature_columns)</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_layer</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">DenseFeatures</span><span class="p">(</span><span class="n">feature_columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#for item in feature_columns:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#    print(item)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#    print(&#34;\n&#34;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">feature_layer</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl">    <span class="c1">#crossed cols</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#categorical_columns </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">understand_input_pipeline</span><span class="p">(</span><span class="n">train_ds</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">feature_batch</span><span class="p">,</span> <span class="n">label_batch</span> <span class="ow">in</span> <span class="n">train_ds</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Every feature:&#39;</span><span class="p">,</span> <span class="nb">list</span><span class="p">(</span><span class="n">feature_batch</span><span class="o">.</span><span class="n">keys</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#print(&#39;A batch of ages:&#39;, feature_batch[&#39;age&#39;])</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;A batch of targets:&#39;</span><span class="p">,</span> <span class="n">label_batch</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_model</span><span class="p">(</span><span class="n">log_dir</span><span class="p">,</span><span class="n">feature_layer</span><span class="p">,</span> <span class="n">train_ds</span><span class="p">,</span> <span class="n">val_ds</span><span class="p">,</span> <span class="n">epochs</span> <span class="o">=</span> <span class="mi">5</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">model</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">Sequential</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="n">feature_layer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">layers</span><span class="o">.</span><span class="n">Dense</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">layers</span><span class="o">.</span><span class="n">Dense</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">layers</span><span class="o">.</span><span class="n">Dense</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span><span class="s1">&#39;adam&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">loss</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">losses</span><span class="o">.</span><span class="n">BinaryCrossentropy</span><span class="p">(</span><span class="n">from_logits</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;accuracy&#39;</span><span class="p">,</span> <span class="s1">&#39;mae&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">history</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">train_ds</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">validation_data</span><span class="o">=</span><span class="n">val_ds</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">epochs</span><span class="o">=</span><span class="n">epochs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">loss</span><span class="p">,</span> <span class="n">accuracy</span><span class="p">,</span><span class="n">mae</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">evaluate</span><span class="p">(</span><span class="n">test_ds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Accuracy&#34;</span><span class="p">,</span> <span class="n">accuracy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">summary</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">model</span><span class="p">,</span><span class="n">history</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">plot_history</span><span class="p">(</span><span class="n">history</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">hist</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">history</span><span class="o">.</span><span class="n">history</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">hist</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">hist</span><span class="p">[</span><span class="s1">&#39;epoch&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">history</span><span class="o">.</span><span class="n">epoch</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Epoch&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Mean Absolute Error&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">hist</span><span class="p">[</span><span class="s1">&#39;epoch&#39;</span><span class="p">],</span> <span class="n">hist</span><span class="p">[</span><span class="s1">&#39;mae&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Train Error&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">hist</span><span class="p">[</span><span class="s1">&#39;epoch&#39;</span><span class="p">],</span> <span class="n">hist</span><span class="p">[</span><span class="s1">&#39;val_mae&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="n">label</span> <span class="o">=</span> <span class="s1">&#39;Val Error&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">explain_kernal</span><span class="p">(</span><span class="n">df_train</span><span class="p">,</span><span class="n">model</span><span class="p">,</span><span class="n">train_ds</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># KernelExplainer is a general approach that can work with any ML framework</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Its inputs are the predictions and training data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Summarize the training set to accelerate analysis</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_train_summary</span> <span class="o">=</span> <span class="n">shap</span><span class="o">.</span><span class="n">kmeans</span><span class="p">(</span><span class="n">df_train</span><span class="o">.</span><span class="n">values</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Instantiate an explainer with the model predictions and training data summary</span>
</span></span><span class="line"><span class="cl">    <span class="n">explainer</span> <span class="o">=</span> <span class="n">shap</span><span class="o">.</span><span class="n">KernelExplainer</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">,</span> <span class="n">df_train</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Extract Shapley values from the explainer</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#shap_values = explainer.shap_values(df_train.values)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">cwd</span><span class="p">,</span> <span class="n">log_dir</span> <span class="o">=</span> <span class="n">get_environmental_variables</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(cwd)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df</span> <span class="o">=</span> <span class="n">load_data</span><span class="p">(</span><span class="n">cwd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">train</span><span class="p">,</span><span class="n">test</span><span class="p">,</span><span class="n">val</span> <span class="o">=</span> <span class="n">split_datframe</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">dataset</span> <span class="o">=</span> <span class="n">df_to_dataset</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_ds</span><span class="p">,</span> <span class="n">val_ds</span><span class="p">,</span> <span class="n">test_ds</span> <span class="o">=</span> <span class="n">get_input_pipeline</span><span class="p">(</span><span class="n">train</span><span class="p">,</span><span class="n">test</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">understand_input_pipeline</span><span class="p">(</span><span class="n">train_ds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_layer</span> <span class="o">=</span> <span class="n">get_feature_layer</span><span class="p">(</span><span class="n">cwd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="p">,</span> <span class="n">model_history</span> <span class="o">=</span> <span class="n">create_model</span><span class="p">(</span><span class="n">log_dir</span><span class="p">,</span><span class="n">feature_layer</span><span class="p">,</span> <span class="n">train_ds</span><span class="p">,</span> <span class="n">val_ds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plot_history</span><span class="p">(</span><span class="n">model_history</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(model.predict(train_ds))</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(model.predict)</span>
</span></span><span class="line"><span class="cl">    <span class="n">explain_kernal</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="n">model</span><span class="p">,</span><span class="n">train_ds</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="the-justice-centric-training-pipeline">The Justice Centric Training Pipeline</h3>
<p>The entire pipeline is included below.  Review the <a href="https://docs.jnapolitano.io/parts/ml-ai/tensorflow/project-supcourt-tensorflow/docs/SupremeCourtPredictionsJustice/index.html">documentation</a> for greater detail.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#supremeCourtPrediction.py</span>
</span></span><span class="line"><span class="cl"><span class="c1">#a program that uses the segal and spaeth dataset to predict the outcomes of cases</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="nn">tf</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">math</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">shap</span>
</span></span><span class="line"><span class="cl"><span class="n">shap</span><span class="o">.</span><span class="n">initjs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">csv</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">datetime</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tensorflow</span> <span class="kn">import</span> <span class="n">feature_column</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tensorflow.keras</span> <span class="kn">import</span> <span class="n">layers</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">permutations</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">combinations_with_replacement</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_environmental_variables</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">cwd</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">log_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cwd</span><span class="p">,</span><span class="s2">&#34;logs/fit/&#34;</span><span class="p">)</span> <span class="o">+</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&#34;%Y%m</span><span class="si">%d</span><span class="s2">-%H%M%S&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">cwd</span><span class="p">,</span> <span class="n">log_dir</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">load_data</span><span class="p">(</span><span class="n">cwd</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cwd</span><span class="p">,</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="s1">&#39;justice.csv&#39;</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="n">drop_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cwd</span><span class="p">,</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="s1">&#39;features&#39;</span><span class="p">,</span><span class="s1">&#39;drop&#39;</span><span class="p">,</span><span class="s1">&#39;drop.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">target_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cwd</span><span class="p">,</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="s1">&#39;features&#39;</span><span class="p">,</span><span class="s1">&#39;targets.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">data_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">dataframe</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span> <span class="s1">&#39;unicode_escape&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(dataframe.head())</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">drop_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">cnt</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">fp</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#print(&#34;Dropping {} from dataframe&#34;.format(line))</span>
</span></span><span class="line"><span class="cl">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s2">&#34;&#39;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">dataframe</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">line</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">dataframe</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">dataframe</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#dataframe.issue = dataframe.astype({&#39;issue&#39;: &#39;str&#39;})</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#dataframe[issue] = dataframe[issue].astype(str)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(dataframe)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(dataframe.head())</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">dataframe</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">split_datframe</span><span class="p">(</span><span class="n">dataframe</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">train</span><span class="p">,</span> <span class="n">test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">dataframe</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">train</span><span class="p">,</span> <span class="n">val</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">train</span><span class="p">),</span> <span class="s1">&#39;train examples&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">val</span><span class="p">),</span> <span class="s1">&#39;validation examples&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">test</span><span class="p">),</span> <span class="s1">&#39;test examples&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">train</span><span class="p">,</span> <span class="n">test</span><span class="p">,</span> <span class="n">val</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># A utility method to create a tf.data dataset from a Pandas Dataframe</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">df_to_dataset</span><span class="p">(</span><span class="n">dataframe</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">dataframe</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">labels</span> <span class="o">=</span> <span class="n">dataframe</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;vote&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ds</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">Dataset</span><span class="o">.</span><span class="n">from_tensor_slices</span><span class="p">((</span><span class="nb">dict</span><span class="p">(</span><span class="n">dataframe</span><span class="p">),</span> <span class="n">labels</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">shuffle</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">ds</span> <span class="o">=</span> <span class="n">ds</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">buffer_size</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">dataframe</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">ds</span> <span class="o">=</span> <span class="n">ds</span><span class="o">.</span><span class="n">batch</span><span class="p">(</span><span class="n">batch_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">ds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ds</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_input_pipeline</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">test</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_ds</span> <span class="o">=</span> <span class="n">df_to_dataset</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">val_ds</span> <span class="o">=</span> <span class="n">df_to_dataset</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">test_ds</span> <span class="o">=</span> <span class="n">df_to_dataset</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">train_ds</span><span class="p">,</span> <span class="n">val_ds</span><span class="p">,</span> <span class="n">test_ds</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_feature_layer</span><span class="p">(</span><span class="n">cwd</span><span class="p">):</span> <span class="c1">#select the columns for analysis from dataset</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cwd</span><span class="p">,</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="s1">&#39;features&#39;</span><span class="p">,</span><span class="s1">&#39;use&#39;</span><span class="p">,</span><span class="s1">&#39;features.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">dict_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cwd</span><span class="p">,</span><span class="s1">&#39;data&#39;</span><span class="p">,</span><span class="s1">&#39;features&#39;</span><span class="p">,</span><span class="s1">&#39;use&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_columns</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#embedded columns</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">feature_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">cnt</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">fp</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#print(&#34;Adding {} to features&#34;.format(line))</span>
</span></span><span class="line"><span class="cl">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s2">&#34;&#39;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span>   
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">feature_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">indicator</span> <span class="o">=</span> <span class="n">feature_column</span><span class="o">.</span><span class="n">numeric_column</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1">#feature_column.categorical_column_with_vocabulary_file(</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#            key = line, vocabulary_file = os.path.join(dict_path,&#34;{}.txt&#34;.format(line)), default_value=0)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">indicator</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">feature_columns</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">indicator</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">#feature_columns.append(feature_column.embedding_column(indicator, dimension=8))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">feature_comb</span> <span class="o">=</span> <span class="n">combinations_with_replacement</span><span class="p">(</span><span class="n">feature_list</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="n">lst</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">feature_comb</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">limit</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">feature_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">k</span> <span class="o">=</span> <span class="n">limit</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">lookup</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">limit</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">lookup</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">k</span>
</span></span><span class="line"><span class="cl">        <span class="n">k</span> <span class="o">=</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lookup</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">one</span><span class="p">,</span> <span class="n">two</span> <span class="o">=</span> <span class="n">lst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">crossed_feature</span> <span class="o">=</span> <span class="n">feature_column</span><span class="o">.</span><span class="n">crossed_column</span><span class="p">([</span><span class="n">one</span><span class="p">,</span> <span class="n">two</span><span class="p">],</span> <span class="n">hash_bucket_size</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">crossed_feature</span> <span class="o">=</span> <span class="n">feature_column</span><span class="o">.</span><span class="n">indicator_column</span><span class="p">(</span><span class="n">crossed_feature</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">feature_columns</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">crossed_feature</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    crossed_feature = feature_column.crossed_column([&#39;issue&#39;, &#39;naturalCourt&#39;], hash_bucket_size=1000)
</span></span></span><span class="line"><span class="cl"><span class="s2">    crossed_feature = feature_column.indicator_column(crossed_feature)
</span></span></span><span class="line"><span class="cl"><span class="s2">    feature_columns.append(crossed_feature)
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    crossed_feature = feature_column.crossed_column([&#39;issueArea&#39;, &#39;naturalCourt&#39;],hash_bucket_size=1000)
</span></span></span><span class="line"><span class="cl"><span class="s2">    crossed_feature = feature_column.indicator_column(crossed_feature)
</span></span></span><span class="line"><span class="cl"><span class="s2">    feature_columns.append(crossed_feature)
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">   <span class="c1"># court_buckets = feature_column.bucketized_column(naturalCourt, boundaries=[18, 25, 30, 35, 40, 45, 50, 55, 60, 65])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#print(feature_columns)</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_layer</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">layers</span><span class="o">.</span><span class="n">DenseFeatures</span><span class="p">(</span><span class="n">feature_columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#for item in feature_columns:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#    print(item)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#    print(&#34;\n&#34;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">feature_layer</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl">    <span class="c1">#crossed cols</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#categorical_columns </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">understand_input_pipeline</span><span class="p">(</span><span class="n">train_ds</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">feature_batch</span><span class="p">,</span> <span class="n">label_batch</span> <span class="ow">in</span> <span class="n">train_ds</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Every feature:&#39;</span><span class="p">,</span> <span class="nb">list</span><span class="p">(</span><span class="n">feature_batch</span><span class="o">.</span><span class="n">keys</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#print(&#39;A batch of ages:&#39;, feature_batch[&#39;age&#39;])</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;A batch of targets:&#39;</span><span class="p">,</span> <span class="n">label_batch</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_model</span><span class="p">(</span><span class="n">log_dir</span><span class="p">,</span><span class="n">feature_layer</span><span class="p">,</span> <span class="n">train_ds</span><span class="p">,</span> <span class="n">val_ds</span><span class="p">,</span> <span class="n">epochs</span> <span class="o">=</span> <span class="mi">8</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">model</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">Sequential</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="n">feature_layer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">layers</span><span class="o">.</span><span class="n">Dense</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">layers</span><span class="o">.</span><span class="n">Dense</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">layers</span><span class="o">.</span><span class="n">Dense</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span><span class="s1">&#39;adam&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">loss</span><span class="o">=</span><span class="n">tf</span><span class="o">.</span><span class="n">keras</span><span class="o">.</span><span class="n">losses</span><span class="o">.</span><span class="n">BinaryCrossentropy</span><span class="p">(</span><span class="n">from_logits</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;accuracy&#39;</span><span class="p">,</span> <span class="s1">&#39;mae&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">history</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">train_ds</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">validation_data</span><span class="o">=</span><span class="n">val_ds</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">epochs</span><span class="o">=</span><span class="n">epochs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">loss</span><span class="p">,</span> <span class="n">accuracy</span><span class="p">,</span><span class="n">mae</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">evaluate</span><span class="p">(</span><span class="n">test_ds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Accuracy&#34;</span><span class="p">,</span> <span class="n">accuracy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">summary</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">model</span><span class="p">,</span><span class="n">history</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">plot_history</span><span class="p">(</span><span class="n">history</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">hist</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">history</span><span class="o">.</span><span class="n">history</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">hist</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">hist</span><span class="p">[</span><span class="s1">&#39;epoch&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">history</span><span class="o">.</span><span class="n">epoch</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Epoch&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Mean Absolute Error&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">hist</span><span class="p">[</span><span class="s1">&#39;epoch&#39;</span><span class="p">],</span> <span class="n">hist</span><span class="p">[</span><span class="s1">&#39;mae&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Train Error&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">hist</span><span class="p">[</span><span class="s1">&#39;epoch&#39;</span><span class="p">],</span> <span class="n">hist</span><span class="p">[</span><span class="s1">&#39;val_mae&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="n">label</span> <span class="o">=</span> <span class="s1">&#39;Val Error&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">explain_kernal</span><span class="p">(</span><span class="n">model</span><span class="p">,</span><span class="n">train_ds</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">train_ds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># KernelExplainer is a general approach that can work with any ML framework</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Its inputs are the predictions and training data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Summarize the training set to accelerate analysis</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_train_summary</span> <span class="o">=</span> <span class="n">shap</span><span class="o">.</span><span class="n">kmeans</span><span class="p">(</span><span class="n">train_ds</span><span class="o">.</span><span class="n">values</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(df_train_summary)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#model.predict(df_train_summary)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Instantiate an explainer with the model predictions and training data summary</span>
</span></span><span class="line"><span class="cl">    <span class="n">explainer</span> <span class="o">=</span> <span class="n">shap</span><span class="o">.</span><span class="n">KernelExplainer</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">predict</span><span class="p">,</span> <span class="n">train_ds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Extract Shapley values from the explainer</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#shap_values = explainer.shap_values(df_train.values)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">cwd</span><span class="p">,</span> <span class="n">log_dir</span> <span class="o">=</span> <span class="n">get_environmental_variables</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">cwd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">df</span> <span class="o">=</span> <span class="n">load_data</span><span class="p">(</span><span class="n">cwd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">train</span><span class="p">,</span><span class="n">test</span><span class="p">,</span><span class="n">val</span> <span class="o">=</span> <span class="n">split_datframe</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">dataset</span> <span class="o">=</span> <span class="n">df_to_dataset</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_ds</span><span class="p">,</span> <span class="n">val_ds</span><span class="p">,</span> <span class="n">test_ds</span> <span class="o">=</span> <span class="n">get_input_pipeline</span><span class="p">(</span><span class="n">train</span><span class="p">,</span><span class="n">test</span><span class="p">,</span><span class="n">val</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">understand_input_pipeline</span><span class="p">(</span><span class="n">train_ds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">feature_layer</span> <span class="o">=</span> <span class="n">get_feature_layer</span><span class="p">(</span><span class="n">cwd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="p">,</span> <span class="n">model_history</span> <span class="o">=</span> <span class="n">create_model</span><span class="p">(</span><span class="n">log_dir</span><span class="p">,</span><span class="n">feature_layer</span><span class="p">,</span> <span class="n">train_ds</span><span class="p">,</span> <span class="n">val_ds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#plot_history(model_history)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(model.predict(train_ds))</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(model.predict)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#explain_kernal(model,train_ds)</span>
</span></span></code></pre></div>]]></content>
			<postid> b5f3ceb4a57b8625893a7e9dfeed9f2d</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Conduct Legal Research with AI: Part 2</title>
			<link>//localhost:1313/en/posts/legal-reserch-part-2/</link>
			<pubDate>Tue, 17 May 2022 18:40:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/legal-reserch-part-2/</guid>
			<description><![CDATA[Documenting classes and an application to integrate the US Constitution into my Neo4j DB]]></description>
			<content type="html"><![CDATA[<h1 id="integrating-the-constitution-to-neo4j">Integrating the Constitution to Neo4j</h1>
<p>I am currenlty building a graph database of Supreme Court cases in neo4j to model the behavior and decison making of the court.</p>
<p>In this post, I include the classes that I will be using to create individual nodes for the articles, sections, clauses, and subclauses of the Consititution.</p>
<p>Later, these will be related to cases and subjecst in order to train a tensorflow algorithm to recommend case law by issue area and to predict the outcome of cases.</p>
<h2 id="workflow">Workflow</h2>
<p>The basic workflow requires creating a node and then submitting it to the neo4j db.   My previous posts have documented this process in detail.  Review <a href="https://blog.jnapolitano.io/neo4j_integration/">blog.jnapolitano.io/neo4j_integration/</a> for more information.</p>
<h2 id="neomodel-api-classes">Neomodel Api Classes</h2>
<p>The neomodel classes below generate the nodes to be integrated into the database.</p>
<h3 id="article-class">Article Class</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Article</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uuid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">topic</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">citation</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">clause</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Clause&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_ARTICLE_OF&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sub_clause</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Subclause&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_ARTICLE_OF&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Case&#34;</span><span class="p">,</span> <span class="s1">&#39;IS_ARTICLE_OF&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="section-class">Section Class</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Section</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uuid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">topic</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">article</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Article&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_SECTION_OF&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">citation</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">clause</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Clause&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_SECTION_OF&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sub_clause</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Subclause&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_SECTION_OF&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Case&#34;</span><span class="p">,</span> <span class="s1">&#39;IS_SECTION_OF&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="clause-class">Clause Class</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Clause</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uuid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">topic</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">citation</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">article</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Article&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_CLAUSE_OF&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sibling_clause</span><span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Clause&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_CLAUSE_OF&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sub_clause</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Subclause&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_CLAUSE_OF&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Case&#34;</span><span class="p">,</span> <span class="s1">&#39;IS_CLAUSE_OF&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="subclause-class">Subclause Class</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Subclause</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uuid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">topic</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">citation</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">article</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Article&#34;</span><span class="p">,</span> <span class="s2">&#34;&#39;IS_SUBCLAUSE_OF&#39;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">clause</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Article&#34;</span><span class="p">,</span> <span class="s2">&#34;&#39;IS_SUBCLAUSE_OF&#39;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sibling_clause</span><span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Clause&#34;</span><span class="p">,</span> <span class="s2">&#34;&#39;IS_SUBCLAUSE_OF&#39;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Case&#34;</span><span class="p">,</span> <span class="s1">&#39;IS_SUBCLAUSE_OF&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#sub_clause = Relationship(&#34;Subclause&#34;, &#34;IS_SUBCLAUSE_OF&#34;)</span>
</span></span></code></pre></div><h2 id="sample-application">Sample Application</h2>
<p>The application below creates a dataframe with node objects that will be uploaded to the neo4j database.  In order to accomplish an upload the .save() function must be called on the object.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">platform</span> <span class="kn">import</span> <span class="n">node</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl"><span class="c1">#from neomodel import (config, StructuredNode, StringProperty, IntegerProperty,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#    UniqueIdProperty, RelationshipTo, BooleanProperty, EmailProperty, Relationship,db)</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="c1">#import NeoNodes as nn</span>
</span></span><span class="line"><span class="cl"><span class="c1">#import GoogleServices</span>
</span></span><span class="line"><span class="cl"><span class="c1">#import sparkAPI as spark</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">neoModelAPI</span> <span class="k">as</span> <span class="nn">neo</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">glob</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">shutil</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">instantiate_neo_model_api</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">uri</span> <span class="o">=</span> <span class="s2">&#34;7a92f171.databases.neo4j.io&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">user</span> <span class="o">=</span> <span class="s2">&#34;neo4j&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">psw</span> <span class="o">=</span> <span class="s1">&#39;RF4Gr2IJTNhHlW6HOrLDqz_I2E2Upyh7o8paTwfnCxg&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">instantiate_neo_model_session</span><span class="p">(</span><span class="n">uri</span><span class="o">=</span><span class="n">uri</span><span class="p">,</span><span class="n">user</span><span class="o">=</span><span class="n">user</span><span class="p">,</span><span class="n">psw</span><span class="o">=</span><span class="n">psw</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_cwd</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">cwd</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">cwd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_files</span><span class="p">(</span><span class="n">cwd</span> <span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="n">input_directory</span> <span class="o">=</span> <span class="s1">&#39;article_data&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">cwd</span><span class="p">,</span><span class="n">input_directory</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(path)</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_list</span><span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="s2">&#34;**/*.csv&#34;</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="kc">True</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">file_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_df</span><span class="p">(</span><span class="n">file_list</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">a_file</span> <span class="ow">in</span> <span class="n">file_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">a_file</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">df</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span>
</span></span><span class="line"><span class="cl">       
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_transaction_df</span><span class="p">(</span><span class="n">df</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(justice_df)</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(df.columns)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#   df.apply(lambda x: print(x), axis =1)</span>
</span></span><span class="line"><span class="cl">        <span class="n">df</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_section_node</span><span class="p">(</span><span class="n">name</span><span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;section&#39;</span><span class="p">],</span>  
</span></span><span class="line"><span class="cl">        <span class="n">topic</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;topic&#39;</span><span class="p">],</span> 
</span></span><span class="line"><span class="cl">        <span class="n">citation</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;citation&#39;</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl">        <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="k">raise</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">write_transaction_to_file</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">cwd</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span><span class="n">import_directory</span> <span class="o">=</span> <span class="s1">&#39;merge_articles&#39;</span><span class="p">,</span> <span class="n">file_name</span> <span class="o">=</span> <span class="s1">&#39;article_transaction_df&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">outfile</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">cwd</span><span class="p">,</span><span class="n">import_directory</span><span class="p">,</span><span class="n">file_name</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(outfile)</span>
</span></span><span class="line"><span class="cl">        <span class="n">df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="n">outfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">outfile</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">send_closing_message</span><span class="p">(</span><span class="n">df</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span> <span class="n">outfile</span><span class="o">=</span> <span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">size</span> <span class="o">=</span> <span class="n">shutil</span><span class="o">.</span><span class="n">get_terminal_size</span><span class="p">((</span><span class="mi">80</span><span class="p">,</span> <span class="mi">20</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">columns</span> <span class="o">=</span> <span class="n">size</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">seperator</span> <span class="o">=</span> <span class="s2">&#34;*&#34;</span> <span class="o">*</span> <span class="n">columns</span>
</span></span><span class="line"><span class="cl">    <span class="n">df_message</span> <span class="o">=</span> <span class="s2">&#34;Your Final df looks like: &#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">outfile_message</span> <span class="o">=</span> <span class="s2">&#34;You will find the data at: </span><span class="si">{}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">outfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">seperator</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">df_message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">seperator</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">outfile_message</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#neo_applified = instantiate_neo_model_api()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cwd</span> <span class="o">=</span> <span class="n">get_cwd</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_list</span> <span class="o">=</span> <span class="n">get_files</span><span class="p">(</span><span class="n">cwd</span> <span class="o">=</span> <span class="n">cwd</span><span class="p">,</span> <span class="n">input_directory</span> <span class="o">=</span> <span class="s1">&#39;sections_data&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(file_list)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#master_subject_table = create_master_subject_table()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#json_pipeline(file_list=file_list, master_subject_table=master_subject_table)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span> <span class="o">=</span> <span class="n">get_df</span><span class="p">(</span><span class="n">file_list</span> <span class="o">=</span> <span class="n">file_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span> <span class="o">=</span> <span class="n">get_transaction_df</span><span class="p">(</span><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">outfile</span> <span class="o">=</span> <span class="n">write_transaction_to_file</span><span class="p">(</span><span class="n">df</span> <span class="o">=</span> <span class="n">df</span> <span class="p">,</span> <span class="n">cwd</span> <span class="o">=</span> <span class="n">cwd</span><span class="p">,</span> <span class="n">file_name</span> <span class="o">=</span> <span class="s1">&#39;sections_transaction_df.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">messaged</span> <span class="o">=</span> <span class="n">send_closing_message</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">outfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(justice_df)</span>
</span></span></code></pre></div>]]></content>
			<postid> 5c42ac4525fd6ecc725586606ddd9e5a</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Conduct Legal Research with AI: Part 1</title>
			<link>//localhost:1313/en/posts/legal-research-part-1/</link>
			<pubDate>Mon, 16 May 2022 14:40:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/legal-research-part-1/</guid>
			<description><![CDATA[Integrate JSON data from a rest API into your Neo4j Stack]]></description>
			<content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In a previous <a href="https://blog.jnapolitano.io/loc_crawler/">post</a>, I detailed the process of crawling the Library of Congress API to generate json files that could be intergrated into you DB of choice.</p>
<p>In this discussion, we will integrate JSON data into a Neo4j graph database.</p>
<h2 id="overview">Overview</h2>
<p>The process is fairly straightforward.  The most difficult part is wrangling your json data into the right format for integration.</p>
<p>The main function first instantiates the database config informormation.  It then gets the cwd from a context manager.  We then import the files to be integrated.  A master subject table is created to record only unique subjects to avoid duplicates.  Finally, a json pipeline extracts the data from json, transforms it to integrate into neo4j, and finally we upload using the neomodels api.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">neo_applified</span> <span class="o">=</span> <span class="n">instantiate_neo_model_api</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cwd</span> <span class="o">=</span> <span class="n">get_cwd</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_list</span> <span class="o">=</span> <span class="n">get_files</span><span class="p">(</span><span class="n">cwd</span> <span class="o">=</span> <span class="n">cwd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_subject_table</span> <span class="o">=</span> <span class="n">create_master_subject_table</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">json_pipeline</span><span class="p">(</span><span class="n">file_list</span><span class="o">=</span><span class="n">file_list</span><span class="p">,</span> <span class="n">master_subject_table</span><span class="o">=</span><span class="n">master_subject_table</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="instantiate-neo-model-api">Instantiate Neo Model Api</h2>
<p>I extended the neo model api with a few helper functions.  The repo is found at <a href="https://github.com/justin-napolitano/neo4jAPI">https://github.com/justin-napolitano/neo4jAPI</a>.</p>
<p>You can also review the snapshot below.</p>
<p>We will be calling the initation function to set the config information, update, create Case, and Create Subject classes during this review.</p>
<p>create subject calls the custom subject class and returns an object that can later be integrated into the db with the .save() function.</p>
<p>Create case does exactly the same.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">date</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">shelve</span> <span class="kn">import</span> <span class="n">Shelf</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">neomodel</span> <span class="kn">import</span> <span class="p">(</span><span class="n">config</span><span class="p">,</span> <span class="n">StructuredNode</span><span class="p">,</span> <span class="n">StringProperty</span><span class="p">,</span> <span class="n">IntegerProperty</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">UniqueIdProperty</span><span class="p">,</span> <span class="n">RelationshipTo</span><span class="p">,</span> <span class="n">BooleanProperty</span><span class="p">,</span> <span class="n">EmailProperty</span><span class="p">,</span> <span class="n">Relationship</span><span class="p">,</span> <span class="n">db</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">neoAPI</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">uri</span><span class="p">,</span><span class="n">user</span><span class="p">,</span><span class="n">psw</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">db_init</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">instantiate_neo_model_session</span><span class="p">(</span><span class="n">uri</span><span class="p">,</span><span class="n">user</span><span class="p">,</span><span class="n">psw</span><span class="p">)</span>    
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">instantiate_neo_model_session</span><span class="p">(</span><span class="n">uri</span><span class="p">,</span><span class="n">user</span><span class="p">,</span><span class="n">psw</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">#config.DATABASE_URL = &#39;neo4j+s://{}:{}@{}&#39;.format(user, psw, uri)</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="n">DATABASE_URL</span> <span class="o">=</span><span class="s1">&#39;bolt://neo4j:beautiful@localhost:7687&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#config.DATABASE_URL = uri</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">standard_query</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">results</span><span class="p">,</span> <span class="n">meta</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">cypher_query</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">people</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span><span class="o">.</span><span class="n">inflate</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">results</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_case_node</span><span class="p">(</span><span class="n">date</span><span class="p">,</span> <span class="n">dates</span><span class="p">,</span> <span class="n">group</span><span class="p">,</span><span class="n">name</span><span class="p">,</span> <span class="n">pdf</span><span class="p">,</span> <span class="n">shelf_id</span><span class="p">,</span> <span class="n">subject</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">subject_relationship</span> <span class="o">=</span> <span class="kc">True</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Case</span><span class="p">(</span><span class="n">date</span><span class="o">=</span><span class="n">date</span><span class="p">,</span> <span class="n">dates</span><span class="o">=</span><span class="n">dates</span><span class="p">,</span> <span class="n">group</span><span class="o">=</span><span class="n">group</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span> <span class="n">pdf</span><span class="o">=</span><span class="n">pdf</span><span class="p">,</span> <span class="n">shelf_id</span><span class="o">=</span><span class="n">shelf_id</span><span class="p">,</span> <span class="n">subject</span><span class="o">=</span><span class="n">subject</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">,</span> <span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_city_node</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">City</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_country_node</span><span class="p">(</span><span class="n">code</span><span class="p">,</span><span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Country</span><span class="p">(</span><span class="n">code</span> <span class="o">=</span> <span class="n">code</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_state_node</span><span class="p">(</span><span class="n">code</span><span class="p">,</span><span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">State</span><span class="p">(</span><span class="n">code</span> <span class="o">=</span> <span class="n">code</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_realtor_search_url_node</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Realtor_Search_URL</span><span class="p">(</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="p">,</span> <span class="n">is_root</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">is_sibling</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">is_parent</span><span class="o">=</span> <span class="kc">False</span><span class="p">,</span> <span class="n">is_child</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span> <span class="n">searched</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_root_node</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;realtor.com&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Root</span><span class="p">(</span><span class="n">is_root</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">,</span><span class="n">is_parent</span> <span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">is_sibling</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span> <span class="n">is_child</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span> <span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_child_node</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;realtor.com&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Child</span><span class="p">(</span><span class="n">is_root</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">,</span><span class="n">is_parent</span> <span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">is_sibling</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span> <span class="n">is_child</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span> <span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_parent_node</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;realtor.com&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Parent</span><span class="p">(</span><span class="n">is_root</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">,</span><span class="n">is_parent</span> <span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">is_sibling</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span> <span class="n">is_child</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span> <span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_sibling_node</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;realtor.com&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Sibling</span><span class="p">(</span><span class="n">is_root</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">,</span><span class="n">is_parent</span> <span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">is_sibling</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span> <span class="n">is_child</span> <span class="o">=</span> <span class="kc">False</span><span class="p">,</span> <span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_relationship</span><span class="p">(</span><span class="n">source</span><span class="p">,</span><span class="n">target</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">rel</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">rel</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">#print(&#34;{}&#34;+&#34;.connect&#34; + &#34;{}&#34;.format(source,target))</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_subject_node</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Subject</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">db</span><span class="o">.</span><span class="n">transaction</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">obj</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Subject</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uuid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Case</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">date</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">dates</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">group</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pdf</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="n">shelf_id</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">subject</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#primary_topic = StringProperty(unique_index=True, required=True)</span>
</span></span><span class="line"><span class="cl">    <span class="n">title</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">subject_relationship</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Subject&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_SUBJECT&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Processed</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">NotProcessed</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">City</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">state</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;State&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_STATE_OF&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">country</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Country&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_COUNTRY_OF&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Country</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">code</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">State</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">code</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">country</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Country&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_COUNTRY_OF&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Root</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_root</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_parent</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_sibling</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_child</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">processed</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Processed&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_PROCESSED&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">NotProcessed</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;NotProcessed&#34;</span><span class="p">,</span> <span class="s2">&#34;NOT_PROCESSED&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sibling</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Sibling&#34;</span><span class="p">,</span><span class="s2">&#34;IS_SIBLING&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">child</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Child&#34;</span><span class="p">,</span><span class="s2">&#34;IS_CHILD&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parent</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Parent&#34;</span><span class="p">,</span><span class="s2">&#34;IS_PARENT&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">root</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Root&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_ROOT&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_root</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_parent</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_sibling</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_child</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">processed</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Processed&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_PROCESSED&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">NotProcessed</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;NotProcessed&#34;</span><span class="p">,</span> <span class="s2">&#34;NOT_PROCESSED&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sibling</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Sibling&#34;</span><span class="p">,</span><span class="s2">&#34;IS_SIBLING&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">child</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Child&#34;</span><span class="p">,</span><span class="s2">&#34;IS_CHILD&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parent</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Parent&#34;</span><span class="p">,</span><span class="s2">&#34;IS_PARENT&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">root</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Root&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_ROOT&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Parent</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_root</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_parent</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_sibling</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_child</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">processed</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Processed&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_PROCESSED&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">NotProcessed</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;NotProcessed&#34;</span><span class="p">,</span> <span class="s2">&#34;NOT_PROCESSED&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sibling</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Sibling&#34;</span><span class="p">,</span><span class="s2">&#34;IS_SIBLING&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">child</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Child&#34;</span><span class="p">,</span><span class="s2">&#34;IS_CHILD&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parent</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Parent&#34;</span><span class="p">,</span><span class="s2">&#34;IS_PARENT&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">root</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Root&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_ROOT&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Sibling</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_root</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_parent</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_sibling</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_child</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">processed</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Processed&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_PROCESSED&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">NotProcessed</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;NotProcessed&#34;</span><span class="p">,</span> <span class="s2">&#34;NOT_PROCESSED&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sibling</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Sibling&#34;</span><span class="p">,</span><span class="s2">&#34;IS_SIBLING&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">child</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Child&#34;</span><span class="p">,</span><span class="s2">&#34;IS_CHILD&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parent</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Parent&#34;</span><span class="p">,</span><span class="s2">&#34;IS_PARENT&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">root</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Root&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_ROOT&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Realtor_com</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_realtor_com</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Realtor_Search_URL</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">searched</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_root</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_child</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_parent</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">is_sibling</span> <span class="o">=</span> <span class="n">BooleanProperty</span><span class="p">(</span><span class="n">unique_index</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#state = Relationship(&#39;State&#39;, &#39;OF&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="n">state</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;State&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_STATE_OF&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">city</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;City&#39;</span><span class="p">,</span> <span class="s1">&#39;IS_CITY_OF&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">root</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Root&#39;</span><span class="p">,</span><span class="s1">&#39;IS_ROOT&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">child</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Child&#39;</span><span class="p">,</span><span class="s2">&#34;IS_CHILD&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parent</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Parent&#39;</span><span class="p">,</span> <span class="s2">&#34;IS_PARENT&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sibling</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Sibling&#39;</span><span class="p">,</span> <span class="s2">&#34;IS_SIBLING&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">realtor_com</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s1">&#39;Realtor_com&#39;</span><span class="p">,</span> <span class="s2">&#34;IS_REALTOR.COM_URL&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">processed</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Processed&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_PROCESSED&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">NotProcessed</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;NotProcessed&#34;</span><span class="p">,</span> <span class="s2">&#34;NOT_PROCESSED&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">full_name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">email</span> <span class="o">=</span> <span class="n">EmailProperty</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="get-files">Get Files</h2>
<p>The get_files function returns a list of files within the input directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_files</span><span class="p">(</span><span class="n">cwd</span> <span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="n">input_directory</span> <span class="o">=</span> <span class="s1">&#39;input&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">cwd</span><span class="p">,</span><span class="n">input_directory</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_list</span><span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="s2">&#34;**/*.json&#34;</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="kc">True</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">file_list</span>
</span></span></code></pre></div><h2 id="create-master-subject-file">Create Master Subject File</h2>
<p>Create maseter subject table generates an empty dataframe that will record every unique subject experienced in the data.</p>
<p>I will improve upon this later, by uploading a master file that will be saved following each modification.  This would enable resuming the process following an error or fault.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_master_subject_table</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">table</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">table</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">]</span><span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span>
</span></span><span class="line"><span class="cl">    <span class="n">table</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span><span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span>
</span></span><span class="line"><span class="cl">    <span class="n">table</span><span class="p">[</span><span class="s1">&#39;submitted&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">(</span><span class="n">table</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="json-pipeline-function">Json Pipeline function</h2>
<p>The json pipeline function is the runner for the etl job.  It loads each file into dataframe, manipulates the data accordingly, and updates the neo4j database.</p>
<p>When I refactor the code, I will most likely create an object that calls static functions to generate then desired output.</p>
<p>I may also seperate the case, subject, and relationship pipeline into seperate classes in order to avoid shadowing functions within functions.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">json_pipeline</span><span class="p">(</span><span class="n">file_list</span><span class="p">,</span> <span class="n">master_subject_table</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">case_counter</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">file_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">load_json_data</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="n">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;results&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(data)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(data[0])</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">#filtered_data = filter_json_data(json_data = data, filter = filter)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Creating the case nodes transaction nodes and df</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">clean_json_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">case_data</span> <span class="o">=</span> <span class="n">stringify_json_values</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">case_data</span> <span class="o">=</span> <span class="n">pandify_case_data</span><span class="p">(</span><span class="n">case_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">case_data</span> <span class="o">=</span> <span class="n">nodify_case_data</span><span class="p">(</span><span class="n">case_data</span> <span class="o">=</span> <span class="n">case_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># Creating the subject nodes transaction nodes and df</span>
</span></span><span class="line"><span class="cl">        <span class="n">subject_list</span> <span class="o">=</span> <span class="n">slice_subject_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">subject_list</span> <span class="o">=</span> <span class="n">identify_unique_subjects</span><span class="p">(</span><span class="n">subject_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">subject_lookup_table</span> <span class="o">=</span> <span class="n">create_subject_lookup_table</span><span class="p">(</span><span class="n">subject_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">master_subject_table</span> <span class="o">=</span> <span class="n">integrate_to_master_table</span><span class="p">(</span><span class="n">subject_lookup_table</span><span class="p">,</span><span class="n">master_subject_table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(master_subject_table.duplicated())</span>
</span></span><span class="line"><span class="cl">        <span class="n">case_counter</span> <span class="o">=</span> <span class="n">case_counter</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">case_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">master_subject_table</span> <span class="o">=</span> <span class="n">nodify_subjects</span><span class="p">(</span><span class="n">master_subject_table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(case_data)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(master_subject_table[&#39;transaction&#39;])</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#lets save data to the database</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">master_subject_table</span> <span class="o">=</span> <span class="n">submit_subjects_to_db</span><span class="p">(</span><span class="n">master_subject_table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">case_data</span> <span class="o">=</span> <span class="n">submit_cases_to_db</span><span class="p">(</span><span class="n">case_data</span> <span class="o">=</span> <span class="n">case_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Create Relationships</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">relationship_list</span><span class="o">=</span> <span class="n">create_relationship_table</span><span class="p">(</span><span class="n">case_data</span><span class="o">=</span><span class="n">case_data</span><span class="p">,</span> <span class="n">master_subject_table</span><span class="o">=</span><span class="n">master_subject_table</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="case-pipeline">Case Pipeline</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Creating the case nodes transaction nodes and df</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">clean_json_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">case_data</span> <span class="o">=</span> <span class="n">stringify_json_values</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">case_data</span> <span class="o">=</span> <span class="n">pandify_case_data</span><span class="p">(</span><span class="n">case_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">case_data</span> <span class="o">=</span> <span class="n">nodify_case_data</span><span class="p">(</span><span class="n">case_data</span> <span class="o">=</span> <span class="n">case_data</span><span class="p">)</span>
</span></span></code></pre></div><p>To create the case nodes four functions are called.</p>
<h4 id="clean-json-data">Clean Json Data</h4>
<p>The first is clean_json_data which is actually unnecessary.  The only operation that is required is moving the pdf froma list to a dicktionary key.  It should and will be refactored.  As it stands now, I am leaving iut as an artifact of a previous workflow.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">clean_json_data</span><span class="p">(</span><span class="n">filtered_data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Select the keys that I want from the dictionary</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># filter appropriatly into a df </span>
</span></span><span class="line"><span class="cl">    <span class="c1"># write df to file</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(type(filtered_data))</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(filtered_data)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">filtered_data</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(data)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#creat a dictionary of columns and values for each row.  Combine them all into a df when we are done</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># each dictionary must be a row.... which makes perfect sense, but they can not be nested... </span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">resources</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;resources&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">index</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">language</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;language&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">online_format</span><span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;online_format&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">original_format</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;original_format&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">kind</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">image_url</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;image_url&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">hassegments</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;hassegments&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">extract_timestamp</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;extract_timestamp&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">timestampe</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;timestamp&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">mimetype</span><span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;mime_type&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">pdf</span> <span class="o">=</span> <span class="n">resources</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;pdf&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">            <span class="n">pdf</span> <span class="o">=</span> <span class="s2">&#34;noPdf&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">[</span><span class="s2">&#34;pdf&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pdf</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">[</span><span class="s1">&#39;search_index&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">index</span>
</span></span><span class="line"><span class="cl">    
</span></span></code></pre></div><h4 id="stringify-json-data">Stringify Json Data</h4>
<p>The Second is Stringify_json_data.  The imporatance of this function is that it creates strings from lists in order to properly integrate into the neo4j databse.  Iterables are permitted, however they can not be searched.  For my use case, I decided to create csv strings instead that can later be parsed if necessary.</p>
<p>This function also moves the subject list to a dedicated key in the dictionary.  This is important because it is used to generate the subject tables.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">stringify_json_values</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nb">dict</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">subject_list</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="nb">dict</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="nb">dict</span><span class="p">[</span><span class="n">key</span><span class="p">])</span> <span class="o">==</span> <span class="nb">list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">tmp_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="p">(</span><span class="nb">dict</span><span class="p">[</span><span class="n">key</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">                    <span class="n">item</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">,</span> <span class="s2">&#34;-&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">tmp_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nb">dict</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="nb">dict</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;,&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">dict</span><span class="p">[</span><span class="n">key</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;subject_list&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">subject_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">data</span>
</span></span></code></pre></div><h4 id="pandify-case-data">Pandify Case Data</h4>
<p>The next function creates a pandas dataframe from a list of dictionaries.  Thankfully this is easy to accommplish.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">pandify_case_data</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#case_df = pd.concat(data, sort=False)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="p">[</span><span class="s1">&#39;submitted&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df</span>
</span></span></code></pre></div><h4 id="nodify-case-data">Nodify Case Data</h4>
<p>Nodify creates transaction objects that can be saved to the neo4j databse.  I call the neomodel api to generate the results and save them into a dataframe that is used to apply the upload with a lambda function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">nodify_case_data</span><span class="p">(</span><span class="n">case_data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#non_submitted_nodes = case_data[case_data.notna()]</span>
</span></span><span class="line"><span class="cl">    <span class="n">non_submitted_nodes</span> <span class="o">=</span> <span class="n">case_data</span><span class="p">[</span><span class="n">case_data</span><span class="o">.</span><span class="n">notna</span><span class="p">()</span><span class="o">.</span><span class="n">any</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(non_submitted_nodes)</span>
</span></span><span class="line"><span class="cl">    <span class="n">case_nodes</span> <span class="o">=</span> <span class="n">non_submitted_nodes</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span><span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_case_node</span><span class="p">(</span><span class="n">date</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">],</span> <span class="n">dates</span><span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;dates&#39;</span><span class="p">],</span><span class="n">group</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;group&#39;</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="n">x</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">],</span> <span class="n">pdf</span><span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;pdf&#39;</span><span class="p">],</span> <span class="n">shelf_id</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;shelf_id&#39;</span><span class="p">],</span> <span class="n">subject</span><span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">],</span> <span class="n">title</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">],</span> <span class="n">url</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;url&#39;</span><span class="p">],</span> <span class="n">subject_relationship</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">case_data</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">case_nodes</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">case_data</span>
</span></span></code></pre></div><h3 id="the-subject-pipeline">The Subject Pipeline</h3>
<p>The subject pipeline slices the subject data from the current search result page.</p>
<p>It then identifies the unique subjects</p>
<p>The subject_lookup_table is a dataframe containing the subjects returned by subject list.  They are unique only to the result page.</p>
<p>The master_subject_table is then updated by the integrate_to_master_table function that identifes new subjects to integrate into the master table.</p>
<p>finally, the nodify subject function creates transaction objects to be uploaded to the neo4j db.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">  <span class="c1"># Creating the subject nodes transaction nodes and df</span>
</span></span><span class="line"><span class="cl">    <span class="n">subject_list</span> <span class="o">=</span> <span class="n">slice_subject_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">subject_list</span> <span class="o">=</span> <span class="n">identify_unique_subjects</span><span class="p">(</span><span class="n">subject_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">subject_lookup_table</span> <span class="o">=</span> <span class="n">create_subject_lookup_table</span><span class="p">(</span><span class="n">subject_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_subject_table</span> <span class="o">=</span> <span class="n">integrate_to_master_table</span><span class="p">(</span><span class="n">subject_lookup_table</span><span class="p">,</span><span class="n">master_subject_table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(master_subject_table.duplicated())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">master_subject_table</span> <span class="o">=</span> <span class="n">nodify_subjects</span><span class="p">(</span><span class="n">master_subject_table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span></code></pre></div><h4 id="slice_subject_data">slice_subject_data</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">slice_subject_data</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">subject_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="k">case</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">subject_list</span> <span class="o">=</span> <span class="n">subject_list</span> <span class="o">+</span> <span class="k">case</span><span class="p">[</span><span class="s1">&#39;subject_list&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(subject_list)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">subject_list</span>
</span></span></code></pre></div><h4 id="identify-unique-subjects">Identify Unique Subjects</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">identify_unique_subjects</span><span class="p">(</span><span class="n">subject_list</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># insert the list to the set</span>
</span></span><span class="line"><span class="cl">    <span class="n">list_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">subject_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># convert the set to the list</span>
</span></span><span class="line"><span class="cl">    <span class="n">unique_list</span> <span class="o">=</span> <span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">list_set</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">unique_list</span>
</span></span></code></pre></div><h4 id="create-subject-lookup-table">Create Subject Lookup Table</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_subject_lookup_table</span><span class="p">(</span><span class="n">subject_list</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">lookup_table</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">subject_list</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">lookup_table</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span>
</span></span><span class="line"><span class="cl">    <span class="n">lookup_table</span><span class="p">[</span><span class="s1">&#39;submitted&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">lookup_table</span>
</span></span></code></pre></div><h4 id="nodify-subject">Nodify Subject</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">nodify_subjects</span><span class="p">(</span><span class="n">master_subject_table</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">non_submitted_nodes</span> <span class="o">=</span> <span class="n">master_subject_table</span><span class="p">[</span><span class="n">master_subject_table</span><span class="o">.</span><span class="n">isna</span><span class="p">()</span><span class="o">.</span><span class="n">any</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#df[df.isna().any(axis=1)]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(non_submitted_nodes)</span>
</span></span><span class="line"><span class="cl">    <span class="n">non_submitted_nodes</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">non_submitted_nodes</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span><span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_subject_node</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_subject_table</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">non_submitted_nodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">master_subject_table</span>
</span></span></code></pre></div><h3 id="uploading-case-and-subject-data">Uploading Case and Subject data</h3>
<p>With the transaction object dataframes created, we can then update the data to the database.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">master_subject_table</span> <span class="o">=</span> <span class="n">submit_subjects_to_db</span><span class="p">(</span><span class="n">master_subject_table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">case_data</span> <span class="o">=</span> <span class="n">submit_cases_to_db</span><span class="p">(</span><span class="n">case_data</span> <span class="o">=</span> <span class="n">case_data</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="submit-subjects">Submit Subjects</h4>
<p>This function selects the subject nodes from the master table that have not been uploaded to the neo4j database.</p>
<p>It identifies na in the submitted collumn in order to slice non-submitted nodes.</p>
<p>If that table can be created we upload all of the df with the update function from the neoapi.  It simply calls the db and calls save() on the object.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">submit_subjects_to_db</span><span class="p">(</span><span class="n">master_subject_table</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#unsubmitted = master_subject_table[master_subject_table.notna()]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(master_subject_table)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#non_submitted_nodes=master_subject_table[[master_subject_table[&#39;submitted&#39;] == np.nan]]</span>
</span></span><span class="line"><span class="cl">    <span class="n">non_submitted_nodes</span> <span class="o">=</span> <span class="n">master_subject_table</span><span class="p">[</span><span class="n">master_subject_table</span><span class="p">[</span><span class="s1">&#39;submitted&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">isna</span><span class="p">()]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(non_submitted_nodes)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">non_submitted_nodes</span><span class="o">.</span><span class="n">empty</span><span class="p">:</span>   
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">master_subject_table</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">         <span class="c1">#pprint(non_submitted_nodes)</span>
</span></span><span class="line"><span class="cl">        <span class="n">non_submitted_nodes</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">non_submitted_nodes</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">non_submitted_nodes</span><span class="p">[</span><span class="s1">&#39;submitted&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">#test = non_submitted_nodes.iloc[32][&#39;transaction&#39;]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#return_obj = neo.neoAPI.update(test)</span>
</span></span><span class="line"><span class="cl">        <span class="n">master_subject_table</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">non_submitted_nodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(master_subject_table)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">master_subject_table</span>
</span></span></code></pre></div><h4 id="submit-cases">Submit Cases</h4>
<p>Initially i had copy and pasted the subject submission function. I realized that the checks were unnecessary.   I am assuming that each result is unique.  Therefore, every case is uploaded.  If it proves that there are duplicates in the database, the neo4j cypher language would permit me to prune those duplicate edges.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">submit_cases_to_db</span><span class="p">(</span><span class="n">case_data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#unsubmitted = master_subject_table[master_subject_table.notna()]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">### in theory none of the cases wouldhave been submitted becasue i am pulling them from file.  There is no need to check.. Just submit</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#non_submitted_nodes = case_data[case_data[&#39;submitted&#39;].isna()].copy()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(non_submitted_nodes)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">##pprint(non_submitted_nodes)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#if non_submitted_nodes.empty:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#    return case_data</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#else:</span>
</span></span><span class="line"><span class="cl">    <span class="n">case_data</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">case_data</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#Assume all are submitted..</span>
</span></span><span class="line"><span class="cl">    <span class="n">case_data</span><span class="p">[</span><span class="s1">&#39;submitted&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#test = non_submitted_nodes.iloc[32][&#39;transaction&#39;]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#return_obj = neo.neoAPI.update(test)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#case_data.update(non_submitted_nodes)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">case_data</span>
</span></span></code></pre></div><h3 id="submit-the-relationships">Submit the Relationships</h3>
<p>The final step is to relate the cases to the subject nodes.</p>
<pre tabindex="0"><code>relationship_list= create_relationship_table(case_data=case_data, master_subject_table=master_subject_table)
</code></pre><p>This is accomplished by calling the relationship function declared in the Case class declared in the neomodel api.</p>
<p>View the reference below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Case</span><span class="p">(</span><span class="n">StructuredNode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">uid</span> <span class="o">=</span> <span class="n">UniqueIdProperty</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">date</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">dates</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">group</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pdf</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="n">shelf_id</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">subject</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#primary_topic = StringProperty(unique_index=True, required=True)</span>
</span></span><span class="line"><span class="cl">    <span class="n">title</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span> <span class="o">=</span> <span class="n">StringProperty</span><span class="p">(</span><span class="n">unique_index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">subject_relationship</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="s2">&#34;Subject&#34;</span><span class="p">,</span> <span class="s2">&#34;IS_SUBJECT&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="create-relationship-table">Create Relationship Table</h4>
<p>To create the relationships the case_data and the master_subject_table are necessary.</p>
<p>for every case a relationship is created to every subject within its subject list.</p>
<p>It is important to note, that in order for this function to work correctly, the cases and subjects must first be submitted to the database.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_relationship_table</span><span class="p">(</span><span class="n">case_data</span><span class="p">,</span> <span class="n">master_subject_table</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(case_data[])</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#test = master_subject_table[&#39;subject&#39;]</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># select </span>
</span></span><span class="line"><span class="cl">    <span class="n">relationship_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">case_data</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="n">unique_dataframe</span> <span class="o">=</span> <span class="p">(</span><span class="n">master_subject_table</span><span class="p">[</span><span class="n">master_subject_table</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">isin</span><span class="p">(</span><span class="n">case_data</span><span class="p">[</span><span class="s1">&#39;subject_list&#39;</span><span class="p">][</span><span class="n">row</span><span class="p">])])</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(unique_dataframe)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">subject_row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">unique_dataframe</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="o">=</span> <span class="n">case_data</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">subject</span> <span class="o">=</span> <span class="n">unique_dataframe</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">subject_row</span><span class="p">][</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#create relationship</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#pprint(case)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#pprint(subject)</span>
</span></span><span class="line"><span class="cl">            <span class="n">relationship</span> <span class="o">=</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_relationship</span><span class="p">(</span><span class="k">case</span><span class="o">.</span><span class="n">subject_relationship</span><span class="p">,</span><span class="n">subject</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#pprint(relationship)</span>
</span></span><span class="line"><span class="cl">            <span class="n">relationship_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">relationship</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">relationship_list</span>
</span></span></code></pre></div><h2 id="putting-everything-together">Putting Everything Together</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#realtor_graph.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#from neo4j_connect_2 import NeoSandboxApp</span>
</span></span><span class="line"><span class="cl"><span class="c1">#import neo4j_connect_2 as neo</span>
</span></span><span class="line"><span class="cl"><span class="c1">#import GoogleServices as google</span>
</span></span><span class="line"><span class="cl"><span class="c1">#from pyspark.sql import SparkSession</span>
</span></span><span class="line"><span class="cl"><span class="c1">#from pyspark.sql.functions import struct</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cgitb</span> <span class="kn">import</span> <span class="n">lookup</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">code</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dbm</span> <span class="kn">import</span> <span class="n">dumb</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">doctest</span> <span class="kn">import</span> <span class="n">master</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">hmac</span> <span class="kn">import</span> <span class="n">trans_36</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">mimetypes</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">platform</span> <span class="kn">import</span> <span class="n">node</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pty</span> <span class="kn">import</span> <span class="n">master_open</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">re</span> <span class="kn">import</span> <span class="n">sub</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">unittest.util</span> <span class="kn">import</span> <span class="n">unorderable_list_difference</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">urllib.parse</span> <span class="kn">import</span> <span class="n">non_hierarchical</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">neomodel</span> <span class="kn">import</span> <span class="p">(</span><span class="n">config</span><span class="p">,</span> <span class="n">StructuredNode</span><span class="p">,</span> <span class="n">StringProperty</span><span class="p">,</span> <span class="n">IntegerProperty</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">UniqueIdProperty</span><span class="p">,</span> <span class="n">RelationshipTo</span><span class="p">,</span> <span class="n">BooleanProperty</span><span class="p">,</span> <span class="n">EmailProperty</span><span class="p">,</span> <span class="n">Relationship</span><span class="p">,</span><span class="n">db</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="c1">#import NeoNodes as nn</span>
</span></span><span class="line"><span class="cl"><span class="c1">#import GoogleServices</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">neo4jClasses</span>
</span></span><span class="line"><span class="cl"><span class="c1">#import sparkAPI as spark</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">neoModelAPI</span> <span class="k">as</span> <span class="nn">neo</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">glob</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="c1">#from neoModelAPI import NeoNodes as nn</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">DataUploadFunctions</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">upload_df</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">df</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#df.apply(lambda x: pprint(str(x) + str(type(x))))</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">node_list</span> <span class="o">=</span>  <span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(node_list)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>  <span class="n">node_list</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">map_to_df</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">,</span><span class="n">lookup_value</span> <span class="p">:</span><span class="nb">str</span><span class="p">,</span> <span class="n">lookup_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">df1</span><span class="p">[</span><span class="n">lookup_value</span><span class="p">]</span> <span class="o">=</span> <span class="n">df1</span><span class="p">[</span><span class="n">lookup_key</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(df1.columns)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(df1)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">val</span>  <span class="o">=</span> <span class="n">df1</span><span class="p">[</span><span class="n">lookup_value</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">df2</span><span class="p">[</span><span class="n">lookup_key</span><span class="p">],</span>  <span class="n">df2</span><span class="p">[</span><span class="n">lookup_value</span><span class="p">])))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">val</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">set_relationships</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">source_node</span><span class="p">,</span> <span class="n">target_node</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(self.df.columns)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(source_node)</span>
</span></span><span class="line"><span class="cl">        <span class="n">rel</span> <span class="o">=</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_relationship</span><span class="p">(</span><span class="n">source</span> <span class="o">=</span> <span class="n">source_node</span> <span class="p">,</span><span class="n">target</span> <span class="o">=</span> <span class="n">target_node</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">rel</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">DataPipelineFunctions</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">write_df_to_csv</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">df</span><span class="p">,</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">cwd</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">cwd</span><span class="p">,</span><span class="n">path</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span><span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_city_nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">df</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">city_nodes</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;city_name&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span><span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_city_node</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">city_nodes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_url_nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">df</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">url_nodes</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;root_realtor_url&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span><span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_realtor_search_url_node</span><span class="p">(</span><span class="n">url</span><span class="o">=</span> <span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">url_nodes</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_root_nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">df</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">root_nodes</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">&#39;root_realtor_url&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span><span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_root_node</span><span class="p">(</span><span class="n">url</span><span class="o">=</span> <span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">root_nodes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_country_nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">df</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">country_nodes</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span><span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_country_node</span><span class="p">(</span><span class="n">code</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">country_code</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">country_name</span><span class="p">),</span><span class="n">axis</span> <span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">country_nodes</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">return_unique_country_df</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">df</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;country_name&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">df</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">difference</span><span class="p">([</span><span class="s1">&#39;country_node&#39;</span><span class="p">,</span><span class="s1">&#39;state_node&#39;</span><span class="p">,</span><span class="s1">&#39;country_name&#39;</span><span class="p">,</span> <span class="s1">&#39;country_code&#39;</span><span class="p">,</span><span class="s1">&#39;state_name&#39;</span><span class="p">]),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(df)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">df</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_state_nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">df</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">state_nodes</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span><span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_state_node</span><span class="p">(</span><span class="n">code</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">state_code</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">state_name</span><span class="p">),</span><span class="n">axis</span> <span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">state_nodes</span>    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">return_unique_state_df</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">df</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;state_name&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">df</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">difference</span><span class="p">([</span><span class="s1">&#39;state_node&#39;</span><span class="p">,</span><span class="s1">&#39;country_node&#39;</span><span class="p">,</span><span class="s1">&#39;country_code&#39;</span><span class="p">,</span><span class="s1">&#39;state_name&#39;</span><span class="p">,</span><span class="s1">&#39;country_name&#39;</span><span class="p">,</span><span class="s1">&#39;state_code&#39;</span><span class="p">]),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(df)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">df</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">rename_columns</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">df</span><span class="p">,</span> <span class="n">mapper</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;city&#39;</span><span class="p">:</span> <span class="s1">&#39;city_name&#39;</span><span class="p">,</span> <span class="s1">&#39;state&#39;</span><span class="p">:</span> <span class="s1">&#39;state_code&#39;</span><span class="p">,</span><span class="s1">&#39;realtor_url&#39;</span><span class="p">:</span> <span class="s1">&#39;root_realtor_url&#39;</span><span class="p">}):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">df</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="n">mapper</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">add_country_code</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">country_code</span> <span class="o">=</span> <span class="s2">&#34;USA&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">country_code</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">add_country_name</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">country_name</span> <span class="o">=</span> <span class="s2">&#34;United States of America&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">country_name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">upload_df</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">df</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#df.apply(lambda x: pprint(str(x) + str(type(x))))</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">node_list</span> <span class="o">=</span>  <span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">pprint</span><span class="p">(</span><span class="n">node_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>  <span class="n">node_list</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#df[&#39;server_node&#39;] =  node_list</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(df)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">set_url_relationships</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(self.df.columns)</span>
</span></span><span class="line"><span class="cl">        <span class="n">update_list</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_relationship</span><span class="p">(</span><span class="n">source</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">url_node</span><span class="o">.</span><span class="n">city</span><span class="p">,</span><span class="n">target</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">city_node</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">pprint</span><span class="p">(</span><span class="n">update_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">update_list</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#rel = self.df.url.connect(self.df.city)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">set_city_relationships</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(self.df.columns)</span>
</span></span><span class="line"><span class="cl">        <span class="n">update_list</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_relationship</span><span class="p">(</span><span class="n">source</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">city_node</span><span class="o">.</span><span class="n">country</span><span class="p">,</span><span class="n">target</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">country_node</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">update_list</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_relationship</span><span class="p">(</span><span class="n">source</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">city_node</span><span class="o">.</span><span class="n">state</span><span class="p">,</span><span class="n">target</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">state_node</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">pprint</span><span class="p">(</span><span class="n">update_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#rel = self.df.url.connect(self.df.city)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">set_state_relationships</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(self.df.columns)</span>
</span></span><span class="line"><span class="cl">        <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_relationship</span><span class="p">(</span><span class="n">source</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unique_state_nodes</span><span class="o">.</span><span class="n">state_node</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">country</span><span class="p">,</span><span class="n">target</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">unique_state_nodes</span><span class="o">.</span><span class="n">country_node</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#update_list = self.unique_state_nodes.apply(lambda x: neo.neoAPI.create_relationship(source = x.state_node.country,target = x.country_node.name), axis=1)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(update_list)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#rel = self.df.url.connect(self.df.city)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">group_by_state</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">grouped</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s2">&#34;state_name&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">load_data_to_pandas_df</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">file_path</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">file_path</span> <span class="o">!=</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">with</span> <span class="nb">open</span> <span class="p">(</span><span class="n">file_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_json</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">df</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">nodify_city_column</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;city_node&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;city&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_city_node</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(df.city_nodes)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">nodify_states_column</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">unique_states</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">df</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;state&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(state_dict)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">unique_states</span><span class="p">[</span><span class="s1">&#39;state_node&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">unique_states</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_state_node</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">state_name</span><span class="p">,</span> <span class="n">code</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">state</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(unique_states)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#self.df[&#39;state_nodes&#39;] = unique_states[&#39;state_nodes&#39;] where unique_states[state_name] = self.df_stateName</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">df</span><span class="p">[</span><span class="s2">&#34;state_node&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;state_name&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#self.df[&#39;state_node&#39;] =</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(self.df[&#39;state_name&#39;].map(unique_states))</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;state_node&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;state_node&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">unique_states</span><span class="o">.</span><span class="n">state_name</span><span class="p">,</span>  <span class="n">unique_states</span><span class="o">.</span><span class="n">state_node</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(self.df)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl">        <span class="c1">#mask = dfd[&#39;a&#39;].str.startswith(&#39;o&#39;)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">#self.df[&#39;state_nodes&#39;] = self.df.apply(lambda x: neo.create_state_node(name = x.state_name, code = x.state) if x not in states_dict else states_dict[x], axis=1)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">nodify_url_column</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;url_node&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;realtor_url&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_url_node</span><span class="p">(</span><span class="n">url</span> <span class="o">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">searched</span><span class="o">=</span> <span class="kc">False</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_cwd</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">cwd</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">cwd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_files</span><span class="p">(</span><span class="n">cwd</span> <span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="n">input_directory</span> <span class="o">=</span> <span class="s1">&#39;input&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">cwd</span><span class="p">,</span><span class="n">input_directory</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_list</span><span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="s2">&#34;**/*.json&#34;</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="kc">True</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">file_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">instantiate_neo_model_api</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">uri</span> <span class="o">=</span> <span class="s2">&#34;7a92f171.databases.neo4j.io&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">user</span> <span class="o">=</span> <span class="s2">&#34;neo4j&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">psw</span> <span class="o">=</span> <span class="s1">&#39;RF4Gr2IJTNhHlW6HOrLDqz_I2E2Upyh7o8paTwfnCxg&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">instantiate_neo_model_session</span><span class="p">(</span><span class="n">uri</span><span class="o">=</span><span class="n">uri</span><span class="p">,</span><span class="n">user</span><span class="o">=</span><span class="n">user</span><span class="p">,</span><span class="n">psw</span><span class="o">=</span><span class="n">psw</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">prepare_data_pipeline</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">pipeline_functions</span> <span class="o">=</span> <span class="n">DataPipelineFunctions</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_df</span> <span class="o">=</span> <span class="n">pipeline_functions</span><span class="o">.</span><span class="n">load_data_to_pandas_df</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_df</span><span class="p">[</span><span class="s1">&#39;country_name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pipeline_functions</span><span class="o">.</span><span class="n">add_country_name</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_df</span><span class="p">[</span><span class="s1">&#39;country_code&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pipeline_functions</span><span class="o">.</span><span class="n">add_country_code</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_df</span> <span class="o">=</span> <span class="n">pipeline_functions</span><span class="o">.</span><span class="n">rename_columns</span><span class="p">(</span><span class="n">master_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_df</span><span class="p">[</span><span class="s1">&#39;city_node&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pipeline_functions</span><span class="o">.</span><span class="n">create_city_nodes</span><span class="p">(</span><span class="n">master_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_df</span><span class="p">[</span><span class="s1">&#39;url_node&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pipeline_functions</span><span class="o">.</span><span class="n">create_url_nodes</span><span class="p">(</span><span class="n">master_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_df</span><span class="p">[</span><span class="s1">&#39;root_node&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pipeline_functions</span><span class="o">.</span><span class="n">create_root_nodes</span><span class="p">(</span><span class="n">master_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">master_df_path</span> <span class="o">=</span> <span class="n">pipeline_functions</span><span class="o">.</span><span class="n">write_df_to_csv</span><span class="p">(</span><span class="n">master_df</span><span class="p">,</span><span class="s1">&#39;master_df.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">state_df</span> <span class="o">=</span> <span class="n">pipeline_functions</span><span class="o">.</span><span class="n">return_unique_state_df</span><span class="p">(</span><span class="n">master_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">state_df</span><span class="p">[</span><span class="s1">&#39;state_node&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pipeline_functions</span><span class="o">.</span><span class="n">create_state_nodes</span><span class="p">(</span><span class="n">state_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">state_df_path</span> <span class="o">=</span> <span class="n">pipeline_functions</span><span class="o">.</span><span class="n">write_df_to_csv</span><span class="p">(</span><span class="n">state_df</span><span class="p">,</span><span class="s1">&#39;state_df.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">country_df</span> <span class="o">=</span> <span class="n">pipeline_functions</span><span class="o">.</span><span class="n">return_unique_country_df</span><span class="p">(</span><span class="n">master_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">country_df</span><span class="p">[</span><span class="s1">&#39;country_node&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pipeline_functions</span><span class="o">.</span><span class="n">create_country_nodes</span><span class="p">(</span><span class="n">country_df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">country_df_path</span> <span class="o">=</span> <span class="n">pipeline_functions</span><span class="o">.</span><span class="n">write_df_to_csv</span><span class="p">(</span><span class="n">country_df</span><span class="p">,</span><span class="s1">&#39;country.csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#upload nodes</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span><span class="s2">&#34;master_df&#34;</span> <span class="p">:</span> <span class="n">master_df</span><span class="p">,</span> <span class="s1">&#39;state_df&#39;</span> <span class="p">:</span> <span class="n">state_df</span><span class="p">,</span> <span class="s1">&#39;country_df&#39;</span><span class="p">:</span> <span class="n">country_df</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">load_json_data</span><span class="p">(</span><span class="n">file</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span> <span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1"># Reading from file</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">json_pipeline</span><span class="p">(</span><span class="n">file_list</span><span class="p">,</span> <span class="n">master_subject_table</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">case_counter</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">file_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">load_json_data</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="n">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;results&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(data)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(data[0])</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">#filtered_data = filter_json_data(json_data = data, filter = filter)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Creating the case nodes transaction nodes and df</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">clean_json_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">case_data</span> <span class="o">=</span> <span class="n">stringify_json_values</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">case_data</span> <span class="o">=</span> <span class="n">pandify_case_data</span><span class="p">(</span><span class="n">case_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">case_data</span> <span class="o">=</span> <span class="n">nodify_case_data</span><span class="p">(</span><span class="n">case_data</span> <span class="o">=</span> <span class="n">case_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># Creating the subject nodes transaction nodes and df</span>
</span></span><span class="line"><span class="cl">        <span class="n">subject_list</span> <span class="o">=</span> <span class="n">slice_subject_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">subject_list</span> <span class="o">=</span> <span class="n">identify_unique_subjects</span><span class="p">(</span><span class="n">subject_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">subject_lookup_table</span> <span class="o">=</span> <span class="n">create_subject_lookup_table</span><span class="p">(</span><span class="n">subject_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">master_subject_table</span> <span class="o">=</span> <span class="n">integrate_to_master_table</span><span class="p">(</span><span class="n">subject_lookup_table</span><span class="p">,</span><span class="n">master_subject_table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(master_subject_table.duplicated())</span>
</span></span><span class="line"><span class="cl">        <span class="n">case_counter</span> <span class="o">=</span> <span class="n">case_counter</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">case_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">master_subject_table</span> <span class="o">=</span> <span class="n">nodify_subjects</span><span class="p">(</span><span class="n">master_subject_table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(case_data)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(master_subject_table[&#39;transaction&#39;])</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#lets save data to the database</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">master_subject_table</span> <span class="o">=</span> <span class="n">submit_subjects_to_db</span><span class="p">(</span><span class="n">master_subject_table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">case_data</span> <span class="o">=</span> <span class="n">submit_cases_to_db</span><span class="p">(</span><span class="n">case_data</span> <span class="o">=</span> <span class="n">case_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Create Relationships</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">relationship_list</span><span class="o">=</span> <span class="n">create_relationship_table</span><span class="p">(</span><span class="n">case_data</span><span class="o">=</span><span class="n">case_data</span><span class="p">,</span> <span class="n">master_subject_table</span><span class="o">=</span><span class="n">master_subject_table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">submit_cases_to_db</span><span class="p">(</span><span class="n">case_data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#unsubmitted = master_subject_table[master_subject_table.notna()]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">### in theory none of the cases wouldhave been submitted becasue i am pulling them from file.  There is no need to check.. Just submit</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#non_submitted_nodes = case_data[case_data[&#39;submitted&#39;].isna()].copy()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(non_submitted_nodes)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">##pprint(non_submitted_nodes)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#if non_submitted_nodes.empty:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#    return case_data</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#else:</span>
</span></span><span class="line"><span class="cl">    <span class="n">case_data</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">case_data</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#Assume all are submitted..</span>
</span></span><span class="line"><span class="cl">    <span class="n">case_data</span><span class="p">[</span><span class="s1">&#39;submitted&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#test = non_submitted_nodes.iloc[32][&#39;transaction&#39;]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#return_obj = neo.neoAPI.update(test)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#case_data.update(non_submitted_nodes)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">case_data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#Relationships must need to be created following saving to the df</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#relationships = create_relationship_table(case_data, master_subject_table)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">submit_subjects_to_db</span><span class="p">(</span><span class="n">master_subject_table</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#unsubmitted = master_subject_table[master_subject_table.notna()]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(master_subject_table)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#non_submitted_nodes=master_subject_table[[master_subject_table[&#39;submitted&#39;] == np.nan]]</span>
</span></span><span class="line"><span class="cl">    <span class="n">non_submitted_nodes</span> <span class="o">=</span> <span class="n">master_subject_table</span><span class="p">[</span><span class="n">master_subject_table</span><span class="p">[</span><span class="s1">&#39;submitted&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">isna</span><span class="p">()]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(non_submitted_nodes)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">non_submitted_nodes</span><span class="o">.</span><span class="n">empty</span><span class="p">:</span>   
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">master_subject_table</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">         <span class="c1">#pprint(non_submitted_nodes)</span>
</span></span><span class="line"><span class="cl">        <span class="n">non_submitted_nodes</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">non_submitted_nodes</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">non_submitted_nodes</span><span class="p">[</span><span class="s1">&#39;submitted&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">#test = non_submitted_nodes.iloc[32][&#39;transaction&#39;]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#return_obj = neo.neoAPI.update(test)</span>
</span></span><span class="line"><span class="cl">        <span class="n">master_subject_table</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">non_submitted_nodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(master_subject_table)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">master_subject_table</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">tester</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s2">&#34;Hello Dolly&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_relationship_table</span><span class="p">(</span><span class="n">case_data</span><span class="p">,</span> <span class="n">master_subject_table</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(case_data[])</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#test = master_subject_table[&#39;subject&#39;]</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># select </span>
</span></span><span class="line"><span class="cl">    <span class="n">relationship_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">case_data</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="n">unique_dataframe</span> <span class="o">=</span> <span class="p">(</span><span class="n">master_subject_table</span><span class="p">[</span><span class="n">master_subject_table</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">isin</span><span class="p">(</span><span class="n">case_data</span><span class="p">[</span><span class="s1">&#39;subject_list&#39;</span><span class="p">][</span><span class="n">row</span><span class="p">])])</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(unique_dataframe)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">subject_row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">unique_dataframe</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="o">=</span> <span class="n">case_data</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">subject</span> <span class="o">=</span> <span class="n">unique_dataframe</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">subject_row</span><span class="p">][</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#create relationship</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#pprint(case)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#pprint(subject)</span>
</span></span><span class="line"><span class="cl">            <span class="n">relationship</span> <span class="o">=</span> <span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_relationship</span><span class="p">(</span><span class="k">case</span><span class="o">.</span><span class="n">subject_relationship</span><span class="p">,</span><span class="n">subject</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#pprint(relationship)</span>
</span></span><span class="line"><span class="cl">            <span class="n">relationship_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">relationship</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">relationship_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="c1">#create relationship between the case and each uid in the unique_data_frame_transaction_list </span>
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">unique_dataframe</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">## Creating the realation table</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Thoughts</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># pass subject and case table</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># case_subject list collumn</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># where that list is in the master table</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#return  the subjects </span>
</span></span><span class="line"><span class="cl">    <span class="c1"># make a connection to between each subject and the case in the returned tableuid in the table</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># return a transaction list </span>
</span></span><span class="line"><span class="cl">    <span class="c1"># with the list commit a transaction for eachn </span>
</span></span><span class="line"><span class="cl">    <span class="c1">#</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#case_data= filter_case_data(data)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">nodify_case_data</span><span class="p">(</span><span class="n">case_data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#non_submitted_nodes = case_data[case_data.notna()]</span>
</span></span><span class="line"><span class="cl">    <span class="n">non_submitted_nodes</span> <span class="o">=</span> <span class="n">case_data</span><span class="p">[</span><span class="n">case_data</span><span class="o">.</span><span class="n">notna</span><span class="p">()</span><span class="o">.</span><span class="n">any</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(non_submitted_nodes)</span>
</span></span><span class="line"><span class="cl">    <span class="n">case_nodes</span> <span class="o">=</span> <span class="n">non_submitted_nodes</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span><span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_case_node</span><span class="p">(</span><span class="n">date</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">],</span> <span class="n">dates</span><span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;dates&#39;</span><span class="p">],</span><span class="n">group</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;group&#39;</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="n">x</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">],</span> <span class="n">pdf</span><span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;pdf&#39;</span><span class="p">],</span> <span class="n">shelf_id</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;shelf_id&#39;</span><span class="p">],</span> <span class="n">subject</span><span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">],</span> <span class="n">title</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">],</span> <span class="n">url</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;url&#39;</span><span class="p">],</span> <span class="n">subject_relationship</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">case_data</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">case_nodes</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">case_data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">filter_case_data</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">pprint</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">nodify_subjects</span><span class="p">(</span><span class="n">master_subject_table</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">non_submitted_nodes</span> <span class="o">=</span> <span class="n">master_subject_table</span><span class="p">[</span><span class="n">master_subject_table</span><span class="o">.</span><span class="n">isna</span><span class="p">()</span><span class="o">.</span><span class="n">any</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#df[df.isna().any(axis=1)]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(non_submitted_nodes)</span>
</span></span><span class="line"><span class="cl">    <span class="n">non_submitted_nodes</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">non_submitted_nodes</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span><span class="n">neo</span><span class="o">.</span><span class="n">neoAPI</span><span class="o">.</span><span class="n">create_subject_node</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_subject_table</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">non_submitted_nodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">master_subject_table</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">integrate_to_master_table</span><span class="p">(</span><span class="n">subject_lookup_table</span><span class="p">,</span> <span class="n">master_subject_table</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#check_if subject in list is in subject of the table</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># if so drop it from the temp table</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># append what is left to the master table </span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(subject_lookup_table)</span>
</span></span><span class="line"><span class="cl">    <span class="n">test</span> <span class="o">=</span> <span class="n">master_subject_table</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">unique_dataframe</span> <span class="o">=</span> <span class="p">(</span><span class="n">subject_lookup_table</span><span class="p">[</span><span class="o">~</span><span class="n">subject_lookup_table</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">isin</span><span class="p">(</span><span class="n">test</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(unique_dataframe)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#duplicate_list = (master_subject_table[~master_subject_table[&#39;subject&#39;].isin(subject_lookup_table[&#39;subject&#39;])])</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_subject_table</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">master_subject_table</span><span class="p">,</span><span class="n">unique_dataframe</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#master_subject_table.update(unique_dataframe)</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_subject_table</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(master_subject_table)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(master_subject_table.duplicated())</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">master_subject_table</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_subject_lookup_table</span><span class="p">(</span><span class="n">subject_list</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">lookup_table</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">subject_list</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">lookup_table</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span>
</span></span><span class="line"><span class="cl">    <span class="n">lookup_table</span><span class="p">[</span><span class="s1">&#39;submitted&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">lookup_table</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">identify_unique_subjects</span><span class="p">(</span><span class="n">subject_list</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># insert the list to the set</span>
</span></span><span class="line"><span class="cl">    <span class="n">list_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">subject_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># convert the set to the list</span>
</span></span><span class="line"><span class="cl">    <span class="n">unique_list</span> <span class="o">=</span> <span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">list_set</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">unique_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">slice_subject_data</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">subject_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="k">case</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">subject_list</span> <span class="o">=</span> <span class="n">subject_list</span> <span class="o">+</span> <span class="k">case</span><span class="p">[</span><span class="s1">&#39;subject_list&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(subject_list)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">subject_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">pandify_case_data</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#case_df = pd.concat(data, sort=False)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="p">[</span><span class="s1">&#39;submitted&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">df</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">stringify_json_values</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nb">dict</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">subject_list</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="nb">dict</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="nb">dict</span><span class="p">[</span><span class="n">key</span><span class="p">])</span> <span class="o">==</span> <span class="nb">list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">tmp_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="p">(</span><span class="nb">dict</span><span class="p">[</span><span class="n">key</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">                    <span class="n">item</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">,</span> <span class="s2">&#34;-&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">tmp_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nb">dict</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="nb">dict</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;,&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">dict</span><span class="p">[</span><span class="n">key</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="nb">dict</span><span class="p">[</span><span class="s1">&#39;subject_list&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">subject_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(data)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">clean_json_data</span><span class="p">(</span><span class="n">filtered_data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Select the keys that I want from the dictionary</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># filter appropriatly into a df </span>
</span></span><span class="line"><span class="cl">    <span class="c1"># write df to file</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#print(type(filtered_data))</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(filtered_data)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">filtered_data</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(data)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#creat a dictionary of columns and values for each row.  Combine them all into a df when we are done</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># each dictionary must be a row.... which makes perfect sense, but they can not be nested... </span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">resources</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;resources&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">index</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">language</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;language&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">online_format</span><span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;online_format&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">original_format</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;original_format&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">kind</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">image_url</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;image_url&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">hassegments</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;hassegments&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">extract_timestamp</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;extract_timestamp&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">timestampe</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;timestamp&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">mimetype</span><span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;mime_type&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">pdf</span> <span class="o">=</span> <span class="n">resources</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;pdf&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">            <span class="n">pdf</span> <span class="o">=</span> <span class="s2">&#34;noPdf&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">[</span><span class="s2">&#34;pdf&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pdf</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">[</span><span class="s1">&#39;search_index&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">index</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># convert to strings maybe move into another function to be called.  Actually will definitely move to a nother function </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">filtered_data</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#uid = UniqueIdProperty()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">##date = date</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#dates = dates</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#group = group</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#id = id </span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pdf = pdf </span>
</span></span><span class="line"><span class="cl">    <span class="c1">#shelf_id = shelf_id</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#subject = subject</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#primary_topic = primary_topic</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#title = title</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#url = url</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#description = description</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#source_collection = source_collection</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">filter_json_data</span><span class="p">(</span><span class="n">json_data</span><span class="p">,</span> <span class="nb">filter</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Using dict()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Extracting specific keys from dictionary</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">filter</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;contributor&#39;</span><span class="p">,</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="s1">&#39;dates&#39;</span><span class="p">,</span> <span class="s1">&#39;digitized&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">res</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">((</span><span class="n">k</span><span class="p">,</span> <span class="n">json_data</span><span class="p">[</span><span class="n">k</span><span class="p">])</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">filter</span> <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">json_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">res</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_master_subject_table</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">table</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">table</span><span class="p">[</span><span class="s1">&#39;subject&#39;</span><span class="p">]</span><span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span>
</span></span><span class="line"><span class="cl">    <span class="n">table</span><span class="p">[</span><span class="s1">&#39;transaction&#39;</span><span class="p">]</span><span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span>
</span></span><span class="line"><span class="cl">    <span class="n">table</span><span class="p">[</span><span class="s1">&#39;submitted&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">(</span><span class="n">table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">neo_applified</span> <span class="o">=</span> <span class="n">instantiate_neo_model_api</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cwd</span> <span class="o">=</span> <span class="n">get_cwd</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_list</span> <span class="o">=</span> <span class="n">get_files</span><span class="p">(</span><span class="n">cwd</span> <span class="o">=</span> <span class="n">cwd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">master_subject_table</span> <span class="o">=</span> <span class="n">create_master_subject_table</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">json_pipeline</span><span class="p">(</span><span class="n">file_list</span><span class="o">=</span><span class="n">file_list</span><span class="p">,</span> <span class="n">master_subject_table</span><span class="o">=</span><span class="n">master_subject_table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">#neo_sandbox_app = instantiate_neo_sandbox_app()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#google_creds = load_google_creds()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#sheets_app = instantiate_sheets_app(google_creds.credentials)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#drive_app = instantiate_drive_app(google_creds.credentials)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#googleAPI = instantiate_google_API()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#sparkAPI = instantiate_spark_API()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#neoAPI = NeoAPI()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#nodified_df = pandas_functions.nodify_dataframe()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#test()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#google_api = googleServices.GoogleAPI()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">###neo_model_api = instantiate_neo_model_api()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">###df_pipeline_dictionary = prepare_data_pipeline()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#final_df_dictionary = upload_data_pipeline_to_neo(df_pipeline_dictionary)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#for k,v in final_df_dictionary.items():</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#    cwd = os.getcwd()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#    path = str(k) +&#34;Final&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#    path = os.sep.join([cwd,path])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     <span class="c1">#   with open(path, &#34;w&#34;) as file:</span>
</span></span><span class="line"><span class="cl">     <span class="c1">#       v.to_csv(path, index=False)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#prepared_dfs = prepare_pandas_df()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(prepared_df)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#upload_df_to_db(df = prepared_df, neo_model_api = neo_model_api)</span>
</span></span></code></pre></div>]]></content>
			<postid> 195b62a4cb89d78174066484e6330741</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Conduct Legal Research with AI: Part 0</title>
			<link>//localhost:1313/en/posts/legal-research-part-0/</link>
			<pubDate>Mon, 16 May 2022 13:40:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/legal-research-part-0/</guid>
			<description><![CDATA[Crawl the Library of Congress API to automate your next research project.]]></description>
			<content type="html"><![CDATA[<h1 id="crawling-the-library-of-congress-api">Crawling the Library of Congress API</h1>
<h2 id="introduction">Introduction</h2>
<p>The United States Library of Congress maintains a rest api for developers to crawl their collections.  It is an open source tool that anyone can access in order to conduct research. Check out the documenation at <a href="https://libraryofcongress.github.io/data-exploration/">https://libraryofcongress.github.io/data-exploration/</a>.</p>
<h2 id="creating-a-crawler">Creating a crawler</h2>
<p>I took the approach of writing a generator that produces a search result page object that can be operated upon with each iteration.</p>
<p>The first step is to create a search result page object.</p>
<p>The code below documents the search_result page.  It contains a number of helper functions to convert the nodes within the result to json or graphml.  The code can also be used to generate a networkx in memory graph.</p>
<h3 id="the-search-result-object">The Search Result Object</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">search_results_page</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">base_url</span> <span class="o">=</span> <span class="s2">&#34;https://www.loc.gov/collections&#34;</span><span class="p">,</span><span class="n">collection</span> <span class="o">=</span> <span class="s2">&#34;united-states-reports&#34;</span><span class="p">,</span><span class="n">json_parameter</span> <span class="o">=</span> <span class="s2">&#34;fo=json&#34;</span><span class="p">,</span><span class="n">results_per_page</span> <span class="o">=</span> <span class="s2">&#34;c=79&#34;</span><span class="p">,</span><span class="n">query_param</span> <span class="o">=</span> <span class="s2">&#34;?&#34;</span><span class="p">,</span><span class="n">page_param</span> <span class="o">=</span><span class="s2">&#34;sp=&#34;</span><span class="p">,</span><span class="n">page_num</span> <span class="o">=</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(num_columns)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">search_url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_search_url</span><span class="p">(</span><span class="n">base_url</span><span class="p">,</span><span class="n">collection</span><span class="p">,</span><span class="n">json_parameter</span><span class="p">,</span><span class="n">results_per_page</span><span class="p">,</span><span class="n">query_param</span><span class="p">,</span><span class="n">page_param</span><span class="p">,</span><span class="n">page_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">request_data</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">response_json</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">response_to_json</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#self.soup_html = self.html_parse()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">next_url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_next_url</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">page_num</span> <span class="o">=</span> <span class="n">page_num</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">to_json</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">file_name</span> <span class="o">=</span> <span class="s1">&#39;result_&#39;</span><span class="p">,</span><span class="n">file_num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">extension</span> <span class="o">=</span><span class="s2">&#34;.json&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">file_name</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">file_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">output_name</span> <span class="o">+</span> <span class="n">extension</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">output_name</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">response_json</span><span class="p">,</span> <span class="n">outfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">to_pandas</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">df</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">to_pandas_edgelist</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">to_csv</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">file_name</span> <span class="o">=</span> <span class="s1">&#39;result_&#39;</span><span class="p">,</span><span class="n">file_num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">extension</span> <span class="o">=</span><span class="s2">&#34;.csv&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">file_name</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">file_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">output_name</span> <span class="o">+</span> <span class="n">extension</span>
</span></span><span class="line"><span class="cl">        <span class="n">df</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">to_pandas</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="n">output_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">write_graphml</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">file_name</span> <span class="o">=</span> <span class="s1">&#39;result_&#39;</span><span class="p">,</span> <span class="n">file_num</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">extension</span> <span class="o">=</span> <span class="s2">&#34;.graphml&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">file_name</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">file_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">output_name</span> <span class="o">+</span> <span class="n">extension</span>
</span></span><span class="line"><span class="cl">        <span class="n">nx</span><span class="o">.</span><span class="n">write_graphml</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="p">,</span> <span class="n">output_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">write_to_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">data</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span> <span class="n">file_name</span> <span class="o">=</span> <span class="s1">&#39;result_&#39;</span><span class="p">,</span><span class="n">file_num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">extension</span> <span class="o">=</span> <span class="s2">&#34;.json&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">file_name</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">file_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">output_name</span> <span class="o">+</span> <span class="n">extension</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">output_name</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">outfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">node_gen_2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">root</span> <span class="o">=</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">node_list</span> <span class="o">=</span> <span class="p">[],</span> <span class="n">edge_list</span> <span class="o">=</span> <span class="p">[],</span> <span class="n">previous_k</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span> <span class="n">previous_edge</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span> <span class="n">graph</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#root = root </span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="ow">is</span> <span class="nb">dict</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">k</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="ow">and</span> <span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">graph</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="nb">type</span> <span class="o">=</span> <span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">#node_list.append((k, {&#39;type&#39; : k}))</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">#(1, 2, color=&#39;red&#39;, weight=0.84, size=300)\</span>
</span></span><span class="line"><span class="cl">                    <span class="n">graph</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="n">k</span><span class="p">,</span> <span class="n">relationship</span> <span class="o">=</span> <span class="s2">&#34;of&#34;</span><span class="p">,</span> <span class="nb">type</span> <span class="o">=</span> <span class="s2">&#34;root&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">#edge_list.append((root , k, {&#34;relationship&#34; : &#34;of&#34;}, {&#34;type&#34; : &#39;root&#39;}))</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#pprint(&#39;passing_value&#39;)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#save k</span>
</span></span><span class="line"><span class="cl">                <span class="n">previous_k</span> <span class="o">=</span> <span class="n">k</span>
</span></span><span class="line"><span class="cl">                <span class="n">previous_edge</span> <span class="o">=</span> <span class="p">(</span><span class="n">root</span> <span class="p">,</span> <span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">node_gen_2</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">,</span> <span class="n">node_list</span> <span class="o">=</span> <span class="n">node_list</span><span class="p">,</span><span class="n">edge_list</span> <span class="o">=</span> <span class="n">edge_list</span><span class="p">,</span> <span class="n">previous_k</span> <span class="o">=</span> <span class="n">k</span><span class="p">,</span> <span class="n">previous_edge</span> <span class="o">=</span> <span class="n">previous_edge</span><span class="p">,</span> <span class="n">graph</span> <span class="o">=</span> <span class="n">graph</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="ow">is</span> <span class="nb">list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#pprint(&#39;passing_data&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">node_gen_2</span><span class="p">(</span><span class="n">item</span><span class="p">,</span><span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">,</span> <span class="n">node_list</span> <span class="o">=</span> <span class="n">node_list</span><span class="p">,</span><span class="n">edge_list</span> <span class="o">=</span> <span class="n">edge_list</span><span class="p">,</span><span class="n">previous_k</span> <span class="o">=</span> <span class="n">previous_k</span><span class="p">,</span> <span class="n">previous_edge</span><span class="o">=</span> <span class="n">previous_edge</span><span class="p">,</span> <span class="n">graph</span> <span class="o">=</span> <span class="n">graph</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#create_edge to k</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#this item is no longer a dictionary or list</span>
</span></span><span class="line"><span class="cl">            <span class="n">pprint</span><span class="p">(</span><span class="s1">&#39;appending_data&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#create edge to k</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">data</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="nb">type</span> <span class="o">=</span> <span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#node_list.append((data, {&#34;type&#34; : data}))</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">previous_k</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">relationship</span> <span class="o">=</span> <span class="s2">&#34;is&#34;</span><span class="p">,</span> <span class="nb">type</span> <span class="o">=</span> <span class="n">previous_k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#edge_list.append((previous_k ,data,{&#39;relationship&#39;: &#34;is&#34;}, {&#39;type&#39; : data}))</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#edge_list.append((root,data))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#flatten(hierarchak)_dict)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">graph</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">node_runner</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">graph</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">node_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="n">edge_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#root = item[&#39;title&#39;]</span>
</span></span><span class="line"><span class="cl">            <span class="n">graph</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">node_gen_2</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> <span class="n">item</span><span class="p">,</span> <span class="n">node_list</span> <span class="o">=</span> <span class="n">node_list</span><span class="p">,</span> <span class="n">graph</span> <span class="o">=</span> <span class="n">graph</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(edge_list)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">graph</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">node_generator</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">root</span> <span class="o">=</span><span class="s1">&#39;title_testing&#39;</span><span class="p">,</span> <span class="n">node_list</span> <span class="o">=</span> <span class="p">[],</span> <span class="n">edge_list</span> <span class="o">=</span> <span class="p">[],</span> <span class="n">previous_k</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span> <span class="n">previous_edge</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(data)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="ow">is</span> <span class="nb">dict</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">k</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="ow">and</span> <span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">node_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">edge_list</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">root</span> <span class="p">,</span> <span class="n">k</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#pprint(&#39;passing_value&#39;)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#save k</span>
</span></span><span class="line"><span class="cl">                <span class="n">previous_k</span> <span class="o">=</span> <span class="n">k</span>
</span></span><span class="line"><span class="cl">                <span class="n">previous_edge</span> <span class="o">=</span> <span class="p">(</span><span class="n">root</span> <span class="p">,</span> <span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">node_generator</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">,</span> <span class="n">node_list</span> <span class="o">=</span> <span class="n">node_list</span><span class="p">,</span><span class="n">edge_list</span> <span class="o">=</span> <span class="n">edge_list</span><span class="p">,</span> <span class="n">previous_k</span> <span class="o">=</span> <span class="n">k</span><span class="p">,</span> <span class="n">previous_edge</span> <span class="o">=</span> <span class="n">previous_edge</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="ow">is</span> <span class="nb">list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#pprint(&#39;passing_data&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">node_generator</span><span class="p">(</span><span class="n">item</span><span class="p">,</span><span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">,</span> <span class="n">node_list</span> <span class="o">=</span> <span class="n">node_list</span><span class="p">,</span><span class="n">edge_list</span> <span class="o">=</span> <span class="n">edge_list</span><span class="p">,</span><span class="n">previous_k</span> <span class="o">=</span> <span class="n">previous_k</span><span class="p">,</span> <span class="n">previous_edge</span><span class="o">=</span> <span class="n">previous_edge</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#create_edge to k</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#this item is no longer a dictionary or list</span>
</span></span><span class="line"><span class="cl">            <span class="n">pprint</span><span class="p">(</span><span class="s1">&#39;appending_data&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#create edge to k</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">data</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">node_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">edge_list</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">previous_k</span> <span class="p">,</span><span class="n">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">edge_list</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">root</span><span class="p">,</span><span class="n">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#flatten(hierarchak)_dict)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">node_list</span><span class="p">,</span> <span class="n">edge_list</span> 
</span></span><span class="line"><span class="cl">        <span class="c1">#self.json_graph = self.create_json_graph()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_json_graph</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#graph = nx.Graph(self.response_json)</span>
</span></span><span class="line"><span class="cl">        <span class="n">graph</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">from_dict_of_dicts</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">response_json</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#graph = json_graph.node_link_graph(self.response_json)</span>
</span></span><span class="line"><span class="cl">        <span class="n">nx</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">graph</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">#self.node_list = self.node_generator`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_search_result_node</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">response_json_flat</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">item</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">column_lookup_table</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">column_string</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">colnum_string</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">column_lookup_table</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">colnum_string</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">num_columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">num_columns</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">continue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">append_to_data_list</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">rnge</span><span class="p">,</span><span class="n">d</span><span class="p">):</span><span class="c1">#rename to _data_list</span>
</span></span><span class="line"><span class="cl">        <span class="n">request_body</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;range&#39;</span><span class="p">:</span> <span class="n">rnge</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;majorDimension&#34;</span><span class="p">:</span> <span class="s2">&#34;COLUMNS&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;values&#34;</span><span class="p">:</span> <span class="p">[</span><span class="n">d</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">request_body</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#data_list.append(request_body_tmp)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">map_column_to_range</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">column_key</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">rnge</span> <span class="o">=</span> <span class="s2">&#34;&#39;Sheet1&#39;&#34;</span> <span class="o">+</span> <span class="s2">&#34;!&#34;</span> <span class="o">+</span> <span class="n">column_key</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">rnge</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">colnum_string</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num_columns</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(&#34;conlum_string&#34;)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(num_columns)</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="n">num_columns</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">num_columns</span><span class="p">,</span> <span class="n">remainder</span> <span class="o">=</span> <span class="nb">divmod</span><span class="p">(</span><span class="n">num_columns</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">26</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">string</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="mi">65</span> <span class="o">+</span> <span class="n">remainder</span><span class="p">)</span> <span class="o">+</span> <span class="n">string</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#pprint(string)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">map_columns_to_lookup_table</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">#print(&#39;first_map_columns_print&#39;)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#num_columns_tmp = self.num_columns</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(num_columns_tmp)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">response_json_flat</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">item</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                <span class="n">num_columns_tmp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">num_columns</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">column_lookup_table</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">#print(&#39;second_map_Columns_print&#39;)</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">#pprint(num_columns_tmp)</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">column_lookup_table</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">colnum_string</span><span class="p">(</span><span class="n">num_columns</span> <span class="o">=</span> <span class="n">num_columns_tmp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">num_columns</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">num_columns</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">       
</span></span><span class="line"><span class="cl">                    <span class="c1">#append range to request... </span>
</span></span><span class="line"><span class="cl">                    <span class="c1">#append collumn to batch lookup</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">continue</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">column_request_list_generator</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">request_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">column_lookup_table</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="n">rnge</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">map_column_to_range</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">request_body</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">append_to_data_list</span><span class="p">(</span><span class="n">rnge</span><span class="p">,</span><span class="n">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#pprint(request_body)</span>
</span></span><span class="line"><span class="cl">            <span class="n">request_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">request_body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">request_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">#return column_lookup_table</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">get_next_url</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">response_json</span><span class="p">[</span><span class="s1">&#39;pagination&#39;</span><span class="p">][</span><span class="s1">&#39;next&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_search_url</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">base_url</span><span class="p">,</span><span class="n">collection</span><span class="p">,</span><span class="n">json_parameter</span><span class="p">,</span><span class="n">results_per_page</span><span class="p">,</span><span class="n">query_param</span><span class="p">,</span><span class="n">page_param</span><span class="p">,</span><span class="n">page_num</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">url_sep</span> <span class="o">=</span><span class="s2">&#34;/&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">page_param</span> <span class="o">=</span> <span class="n">page_param</span> <span class="o">+</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">page_num</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">query</span> <span class="o">=</span> <span class="s2">&#34;&amp;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">json_parameter</span><span class="p">,</span><span class="n">results_per_page</span><span class="p">,</span><span class="n">page_param</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">query</span> <span class="o">=</span> <span class="n">query_param</span> <span class="o">+</span> <span class="n">query</span>
</span></span><span class="line"><span class="cl">        <span class="n">search_url</span> <span class="o">=</span> <span class="n">url_sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">base_url</span><span class="p">,</span><span class="n">collection</span><span class="p">,</span><span class="n">query</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(search_url)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">search_url</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">say_hello</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">pprint</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">base_url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">request_data</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span><span class="s1">&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.11 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s1">&#39;Accept-Encoding&#39;</span><span class="p">:</span> <span class="s1">&#39;identity&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">search_url</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">response_to_json</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">html_parse</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">soup</span><span class="o">=</span><span class="n">BeautifulSoup</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">,</span><span class="s1">&#39;lxml&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(soup)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">soup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">flatten_result</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">flat_result_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">response_json</span><span class="p">[</span><span class="s1">&#39;results&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">flat_json</span> <span class="o">=</span> <span class="n">flatten</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">flat_result_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">flat_json</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">flat_result_list</span>
</span></span></code></pre></div><h2 id="the-generator">The Generator</h2>
<p>The generator yields a search result page if the pagination link included in the response is valid.</p>
<p>Depending on your use case you could pass the page_num and collection you would like to crawl.</p>
<p>The api is limited to 80 results per minute.  The sleep function limits calls to the desired rate.  The amount of results returned can be passed to the search result page_object.  Review the code above to see which values can be passed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">search_result_generator</span><span class="p">(</span><span class="n">condition</span> <span class="o">=</span> <span class="kc">True</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#column_lookup_table = {}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(num_columns)</span>
</span></span><span class="line"><span class="cl">    <span class="n">page_num</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">column_lookup_table</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">condition</span> <span class="o">==</span><span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(num_columns)</span>
</span></span><span class="line"><span class="cl">        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">61</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">search_results_page_object</span> <span class="o">=</span> <span class="n">create_search_results_page_object</span><span class="p">(</span><span class="n">page_num</span> <span class="o">=</span> <span class="n">page_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">search_results_page_object</span><span class="o">.</span><span class="n">next_url</span> <span class="o">!=</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">condition</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="n">page_num</span> <span class="o">=</span> <span class="n">page_num</span> <span class="o">+</span> <span class="mi">1</span>            
</span></span><span class="line"><span class="cl">            <span class="k">yield</span> <span class="p">(</span><span class="n">search_results_page_object</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">condition</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">            <span class="k">yield</span> <span class="p">(</span><span class="n">search_results_page_object</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="the-runner-function">The Runner Function</h2>
<p>To initiate the crawl simply run the algorithm below.  It writes each result page to json.</p>
<p>As a follow up project, I will post how to integrate the data returned into a neo4j database.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">obj</span> <span class="ow">in</span> <span class="n">search_result_generator</span><span class="p">():</span>   
</span></span><span class="line"><span class="cl">        <span class="n">page_num</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="n">page_num</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">cd</span><span class="p">(</span><span class="s2">&#34;output_2&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#print(&#39;hahaha&#39;)</span>
</span></span><span class="line"><span class="cl">            <span class="n">obj</span><span class="o">.</span><span class="n">to_json</span><span class="p">(</span><span class="n">file_num</span> <span class="o">=</span> <span class="n">page_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#obj.write_graphml(file_num= page_num)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#obj.to_pandas()</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#obj.write_to_file(data = obj.dict_of_dicts, file_num = page_num)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#obj.to_csv()</span>
</span></span><span class="line"><span class="cl">        <span class="n">write_last_page_num</span><span class="p">(</span><span class="n">page_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">{}</span><span class="s2"> Search Results Crawled&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">page_num</span><span class="p">))</span>
</span></span></code></pre></div><h2 id="putting-everything-together">Putting Everything Together</h2>
<p>The code below is the entire program as it stands.  There is built in functionality to upload the results to a google sheet if that is what you desire using an extension of the google api.   That code can be found at <a href="https://github.com/justin-napolitano/GoogleAPI">https://github.com/justin-napolitano/GoogleAPI</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#library_of_congress_scraper.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">print_function</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">lxml.etree</span> <span class="k">as</span> <span class="nn">etree</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">xml.etree.ElementTree</span> <span class="k">as</span> <span class="nn">ET</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">random</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">math</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl"><span class="c1">#import load_vars as lv</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">html</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">yaml</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">yaml</span> <span class="kn">import</span> <span class="n">Loader</span><span class="p">,</span> <span class="n">Dumper</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">glob</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">datetime</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os.path</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">googleapiclient.discovery</span> <span class="kn">import</span> <span class="n">build</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">google_auth_oauthlib.flow</span> <span class="kn">import</span> <span class="n">InstalledAppFlow</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">google.auth.transport.requests</span> <span class="kn">import</span> <span class="n">Request</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">google.oauth2.credentials</span> <span class="kn">import</span> <span class="n">Credentials</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">google.oauth2</span> <span class="kn">import</span> <span class="n">service_account</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">googleapiclient.http</span> <span class="kn">import</span> <span class="n">MediaIoBaseDownload</span><span class="p">,</span> <span class="n">MediaFileUpload</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flatten_json</span> <span class="kn">import</span> <span class="n">flatten</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">networkx</span> <span class="k">as</span> <span class="nn">nx</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">networkx.readwrite</span> <span class="kn">import</span> <span class="n">json_graph</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">tracemalloc</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="c1">#from ratelimiter import RateLimiter</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">cd</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Context manager for changing the current working directory&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">newPath</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">newPath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">expanduser</span><span class="p">(</span><span class="n">newPath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">savedPath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">os</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">newPath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">etype</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">traceback</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">os</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">savedPath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">search_results_page</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">base_url</span> <span class="o">=</span> <span class="s2">&#34;https://www.loc.gov/collections&#34;</span><span class="p">,</span><span class="n">collection</span> <span class="o">=</span> <span class="s2">&#34;united-states-reports&#34;</span><span class="p">,</span><span class="n">json_parameter</span> <span class="o">=</span> <span class="s2">&#34;fo=json&#34;</span><span class="p">,</span><span class="n">results_per_page</span> <span class="o">=</span> <span class="s2">&#34;c=79&#34;</span><span class="p">,</span><span class="n">query_param</span> <span class="o">=</span> <span class="s2">&#34;?&#34;</span><span class="p">,</span><span class="n">page_param</span> <span class="o">=</span><span class="s2">&#34;sp=&#34;</span><span class="p">,</span><span class="n">page_num</span> <span class="o">=</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(num_columns)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">search_url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_search_url</span><span class="p">(</span><span class="n">base_url</span><span class="p">,</span><span class="n">collection</span><span class="p">,</span><span class="n">json_parameter</span><span class="p">,</span><span class="n">results_per_page</span><span class="p">,</span><span class="n">query_param</span><span class="p">,</span><span class="n">page_param</span><span class="p">,</span><span class="n">page_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">request_data</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">response_json</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">response_to_json</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#self.soup_html = self.html_parse()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">next_url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_next_url</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">page_num</span> <span class="o">=</span> <span class="n">page_num</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">to_json</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">file_name</span> <span class="o">=</span> <span class="s1">&#39;result_&#39;</span><span class="p">,</span><span class="n">file_num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">extension</span> <span class="o">=</span><span class="s2">&#34;.json&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">file_name</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">file_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">output_name</span> <span class="o">+</span> <span class="n">extension</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">output_name</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">response_json</span><span class="p">,</span> <span class="n">outfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">to_pandas</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">df</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">to_pandas_edgelist</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">to_csv</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">file_name</span> <span class="o">=</span> <span class="s1">&#39;result_&#39;</span><span class="p">,</span><span class="n">file_num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">extension</span> <span class="o">=</span><span class="s2">&#34;.csv&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">file_name</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">file_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">output_name</span> <span class="o">+</span> <span class="n">extension</span>
</span></span><span class="line"><span class="cl">        <span class="n">df</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">to_pandas</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="n">output_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">write_graphml</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">file_name</span> <span class="o">=</span> <span class="s1">&#39;result_&#39;</span><span class="p">,</span> <span class="n">file_num</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">extension</span> <span class="o">=</span> <span class="s2">&#34;.graphml&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">file_name</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">file_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">output_name</span> <span class="o">+</span> <span class="n">extension</span>
</span></span><span class="line"><span class="cl">        <span class="n">nx</span><span class="o">.</span><span class="n">write_graphml</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="p">,</span> <span class="n">output_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">write_to_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">data</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span> <span class="n">file_name</span> <span class="o">=</span> <span class="s1">&#39;result_&#39;</span><span class="p">,</span><span class="n">file_num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">extension</span> <span class="o">=</span> <span class="s2">&#34;.json&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">file_name</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">file_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">output_name</span> <span class="o">=</span> <span class="n">output_name</span> <span class="o">+</span> <span class="n">extension</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">output_name</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">outfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">node_gen_2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">root</span> <span class="o">=</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">node_list</span> <span class="o">=</span> <span class="p">[],</span> <span class="n">edge_list</span> <span class="o">=</span> <span class="p">[],</span> <span class="n">previous_k</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span> <span class="n">previous_edge</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span> <span class="n">graph</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#root = root </span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="ow">is</span> <span class="nb">dict</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">k</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="ow">and</span> <span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">graph</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="nb">type</span> <span class="o">=</span> <span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">#node_list.append((k, {&#39;type&#39; : k}))</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">#(1, 2, color=&#39;red&#39;, weight=0.84, size=300)\</span>
</span></span><span class="line"><span class="cl">                    <span class="n">graph</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">root</span><span class="p">,</span><span class="n">k</span><span class="p">,</span> <span class="n">relationship</span> <span class="o">=</span> <span class="s2">&#34;of&#34;</span><span class="p">,</span> <span class="nb">type</span> <span class="o">=</span> <span class="s2">&#34;root&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">#edge_list.append((root , k, {&#34;relationship&#34; : &#34;of&#34;}, {&#34;type&#34; : &#39;root&#39;}))</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#pprint(&#39;passing_value&#39;)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#save k</span>
</span></span><span class="line"><span class="cl">                <span class="n">previous_k</span> <span class="o">=</span> <span class="n">k</span>
</span></span><span class="line"><span class="cl">                <span class="n">previous_edge</span> <span class="o">=</span> <span class="p">(</span><span class="n">root</span> <span class="p">,</span> <span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">node_gen_2</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">,</span> <span class="n">node_list</span> <span class="o">=</span> <span class="n">node_list</span><span class="p">,</span><span class="n">edge_list</span> <span class="o">=</span> <span class="n">edge_list</span><span class="p">,</span> <span class="n">previous_k</span> <span class="o">=</span> <span class="n">k</span><span class="p">,</span> <span class="n">previous_edge</span> <span class="o">=</span> <span class="n">previous_edge</span><span class="p">,</span> <span class="n">graph</span> <span class="o">=</span> <span class="n">graph</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="ow">is</span> <span class="nb">list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#pprint(&#39;passing_data&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">node_gen_2</span><span class="p">(</span><span class="n">item</span><span class="p">,</span><span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">,</span> <span class="n">node_list</span> <span class="o">=</span> <span class="n">node_list</span><span class="p">,</span><span class="n">edge_list</span> <span class="o">=</span> <span class="n">edge_list</span><span class="p">,</span><span class="n">previous_k</span> <span class="o">=</span> <span class="n">previous_k</span><span class="p">,</span> <span class="n">previous_edge</span><span class="o">=</span> <span class="n">previous_edge</span><span class="p">,</span> <span class="n">graph</span> <span class="o">=</span> <span class="n">graph</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#create_edge to k</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#this item is no longer a dictionary or list</span>
</span></span><span class="line"><span class="cl">            <span class="n">pprint</span><span class="p">(</span><span class="s1">&#39;appending_data&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#create edge to k</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">data</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">add_node</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="nb">type</span> <span class="o">=</span> <span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#node_list.append((data, {&#34;type&#34; : data}))</span>
</span></span><span class="line"><span class="cl">                <span class="n">graph</span><span class="o">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">previous_k</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">relationship</span> <span class="o">=</span> <span class="s2">&#34;is&#34;</span><span class="p">,</span> <span class="nb">type</span> <span class="o">=</span> <span class="n">previous_k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#edge_list.append((previous_k ,data,{&#39;relationship&#39;: &#34;is&#34;}, {&#39;type&#39; : data}))</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#edge_list.append((root,data))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#flatten(hierarchak)_dict)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">graph</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">node_runner</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="n">graph</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">node_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="n">edge_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#root = item[&#39;title&#39;]</span>
</span></span><span class="line"><span class="cl">            <span class="n">graph</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">node_gen_2</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> <span class="n">item</span><span class="p">,</span> <span class="n">node_list</span> <span class="o">=</span> <span class="n">node_list</span><span class="p">,</span> <span class="n">graph</span> <span class="o">=</span> <span class="n">graph</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(edge_list)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">graph</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">node_generator</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">root</span> <span class="o">=</span><span class="s1">&#39;title_testing&#39;</span><span class="p">,</span> <span class="n">node_list</span> <span class="o">=</span> <span class="p">[],</span> <span class="n">edge_list</span> <span class="o">=</span> <span class="p">[],</span> <span class="n">previous_k</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span> <span class="n">previous_edge</span> <span class="o">=</span> <span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(data)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="ow">is</span> <span class="nb">dict</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">k</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="ow">and</span> <span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">node_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">edge_list</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">root</span> <span class="p">,</span> <span class="n">k</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#pprint(&#39;passing_value&#39;)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#save k</span>
</span></span><span class="line"><span class="cl">                <span class="n">previous_k</span> <span class="o">=</span> <span class="n">k</span>
</span></span><span class="line"><span class="cl">                <span class="n">previous_edge</span> <span class="o">=</span> <span class="p">(</span><span class="n">root</span> <span class="p">,</span> <span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">node_generator</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">,</span> <span class="n">node_list</span> <span class="o">=</span> <span class="n">node_list</span><span class="p">,</span><span class="n">edge_list</span> <span class="o">=</span> <span class="n">edge_list</span><span class="p">,</span> <span class="n">previous_k</span> <span class="o">=</span> <span class="n">k</span><span class="p">,</span> <span class="n">previous_edge</span> <span class="o">=</span> <span class="n">previous_edge</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="ow">is</span> <span class="nb">list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#pprint(&#39;passing_data&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">node_generator</span><span class="p">(</span><span class="n">item</span><span class="p">,</span><span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="p">,</span> <span class="n">node_list</span> <span class="o">=</span> <span class="n">node_list</span><span class="p">,</span><span class="n">edge_list</span> <span class="o">=</span> <span class="n">edge_list</span><span class="p">,</span><span class="n">previous_k</span> <span class="o">=</span> <span class="n">previous_k</span><span class="p">,</span> <span class="n">previous_edge</span><span class="o">=</span> <span class="n">previous_edge</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#create_edge to k</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#this item is no longer a dictionary or list</span>
</span></span><span class="line"><span class="cl">            <span class="n">pprint</span><span class="p">(</span><span class="s1">&#39;appending_data&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#create edge to k</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">data</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">node_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">edge_list</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">previous_k</span> <span class="p">,</span><span class="n">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">edge_list</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">root</span><span class="p">,</span><span class="n">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#flatten(hierarchak)_dict)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">node_list</span><span class="p">,</span> <span class="n">edge_list</span> 
</span></span><span class="line"><span class="cl">        <span class="c1">#self.json_graph = self.create_json_graph()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_json_graph</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#graph = nx.Graph(self.response_json)</span>
</span></span><span class="line"><span class="cl">        <span class="n">graph</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">from_dict_of_dicts</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">response_json</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#graph = json_graph.node_link_graph(self.response_json)</span>
</span></span><span class="line"><span class="cl">        <span class="n">nx</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">graph</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">#self.node_list = self.node_generator`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_search_result_node</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">response_json_flat</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">item</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">column_lookup_table</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">column_string</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">colnum_string</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">column_lookup_table</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">colnum_string</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">num_columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">num_columns</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">continue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">append_to_data_list</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">rnge</span><span class="p">,</span><span class="n">d</span><span class="p">):</span><span class="c1">#rename to _data_list</span>
</span></span><span class="line"><span class="cl">        <span class="n">request_body</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;range&#39;</span><span class="p">:</span> <span class="n">rnge</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;majorDimension&#34;</span><span class="p">:</span> <span class="s2">&#34;COLUMNS&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;values&#34;</span><span class="p">:</span> <span class="p">[</span><span class="n">d</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">request_body</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#data_list.append(request_body_tmp)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">map_column_to_range</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">column_key</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">rnge</span> <span class="o">=</span> <span class="s2">&#34;&#39;Sheet1&#39;&#34;</span> <span class="o">+</span> <span class="s2">&#34;!&#34;</span> <span class="o">+</span> <span class="n">column_key</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">rnge</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">colnum_string</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">num_columns</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(&#34;conlum_string&#34;)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(num_columns)</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="n">num_columns</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">num_columns</span><span class="p">,</span> <span class="n">remainder</span> <span class="o">=</span> <span class="nb">divmod</span><span class="p">(</span><span class="n">num_columns</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">26</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">string</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="mi">65</span> <span class="o">+</span> <span class="n">remainder</span><span class="p">)</span> <span class="o">+</span> <span class="n">string</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#pprint(string)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">map_columns_to_lookup_table</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">#print(&#39;first_map_columns_print&#39;)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#num_columns_tmp = self.num_columns</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(num_columns_tmp)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">response_json_flat</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">item</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                <span class="n">num_columns_tmp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">num_columns</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">column_lookup_table</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">#print(&#39;second_map_Columns_print&#39;)</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">#pprint(num_columns_tmp)</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">column_lookup_table</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">colnum_string</span><span class="p">(</span><span class="n">num_columns</span> <span class="o">=</span> <span class="n">num_columns_tmp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">num_columns</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">num_columns</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">       
</span></span><span class="line"><span class="cl">                    <span class="c1">#append range to request... </span>
</span></span><span class="line"><span class="cl">                    <span class="c1">#append collumn to batch lookup</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">continue</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">column_request_list_generator</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">request_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">column_lookup_table</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="n">rnge</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">map_column_to_range</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">request_body</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">append_to_data_list</span><span class="p">(</span><span class="n">rnge</span><span class="p">,</span><span class="n">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#pprint(request_body)</span>
</span></span><span class="line"><span class="cl">            <span class="n">request_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">request_body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">request_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">#return column_lookup_table</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">get_next_url</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">response_json</span><span class="p">[</span><span class="s1">&#39;pagination&#39;</span><span class="p">][</span><span class="s1">&#39;next&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_search_url</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">base_url</span><span class="p">,</span><span class="n">collection</span><span class="p">,</span><span class="n">json_parameter</span><span class="p">,</span><span class="n">results_per_page</span><span class="p">,</span><span class="n">query_param</span><span class="p">,</span><span class="n">page_param</span><span class="p">,</span><span class="n">page_num</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">url_sep</span> <span class="o">=</span><span class="s2">&#34;/&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">page_param</span> <span class="o">=</span> <span class="n">page_param</span> <span class="o">+</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">page_num</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">query</span> <span class="o">=</span> <span class="s2">&#34;&amp;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">json_parameter</span><span class="p">,</span><span class="n">results_per_page</span><span class="p">,</span><span class="n">page_param</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">query</span> <span class="o">=</span> <span class="n">query_param</span> <span class="o">+</span> <span class="n">query</span>
</span></span><span class="line"><span class="cl">        <span class="n">search_url</span> <span class="o">=</span> <span class="n">url_sep</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">base_url</span><span class="p">,</span><span class="n">collection</span><span class="p">,</span><span class="n">query</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(search_url)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">search_url</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">say_hello</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">pprint</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">base_url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">request_data</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span><span class="s1">&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.11 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s1">&#39;Accept-Encoding&#39;</span><span class="p">:</span> <span class="s1">&#39;identity&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">search_url</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">response_to_json</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">html_parse</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">soup</span><span class="o">=</span><span class="n">BeautifulSoup</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">content</span><span class="p">,</span><span class="s1">&#39;lxml&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(soup)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">soup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">flatten_result</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">flat_result_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">response_json</span><span class="p">[</span><span class="s1">&#39;results&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">flat_json</span> <span class="o">=</span> <span class="n">flatten</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">flat_result_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">flat_json</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">flat_result_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">search_result</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">dict_item</span><span class="p">,</span><span class="n">num_columns</span><span class="p">,</span><span class="n">colnum_string</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">dict_item</span><span class="o">.</span><span class="n">key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">dict_item</span><span class="o">.</span><span class="n">value</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">column_string</span> <span class="o">=</span> <span class="n">colnum_string</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">num_columns</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">range</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_column_range_string</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">request_body</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_column_request</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_column_request</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">request_body</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;range&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">range</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;majorDimension&#34;</span><span class="p">:</span> <span class="s2">&#34;COLUMNS&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;values&#34;</span><span class="p">:</span> <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">value</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">request_body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_column_range_string</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">rnge</span> <span class="o">=</span> <span class="s2">&#34;&#39;Sheet1&#39;&#34;</span> <span class="o">+</span> <span class="s2">&#34;!&#34;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">column_string</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">rnge</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">colnum_string</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num_columns</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="n">num_columns</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">num_columns</span><span class="p">,</span> <span class="n">remainder</span> <span class="o">=</span> <span class="nb">divmod</span><span class="p">(</span><span class="n">num_columns</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">26</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">string</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="mi">65</span> <span class="o">+</span> <span class="n">remainder</span><span class="p">)</span> <span class="o">+</span> <span class="n">string</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">google_drive</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">creds</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">service</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_drive_service</span><span class="p">(</span><span class="n">creds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">pprint</span><span class="p">(</span><span class="s2">&#34;hello I exist&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">get_drive_service</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">creds</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Shows basic usage of the Drive v3 API.
</span></span></span><span class="line"><span class="cl"><span class="s2">        Prints the names and ids of the first 10 files the user has access to.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">SCOPES</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#creds = None</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># The file token.json stores the user&#39;s access and refresh tokens, and is</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># created automatically when the authorization flow completes for the first</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># time.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">service</span> <span class="o">=</span> <span class="n">build</span><span class="p">(</span><span class="s1">&#39;drive&#39;</span><span class="p">,</span> <span class="s1">&#39;v3&#39;</span><span class="p">,</span> <span class="n">credentials</span><span class="o">=</span><span class="n">creds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Call the Drive v3 API</span>
</span></span><span class="line"><span class="cl">        <span class="n">results</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="n">files</span><span class="p">()</span><span class="o">.</span><span class="n">list</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">pageSize</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">fields</span><span class="o">=</span><span class="s2">&#34;nextPageToken, files(id, name)&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">execute</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">items</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;files&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">items</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;No files found.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Files:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">items</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;</span><span class="si">{0}</span><span class="s1"> (</span><span class="si">{1}</span><span class="s1">)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="n">item</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">service</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create_folder</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">title</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">drive_service</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">service</span>
</span></span><span class="line"><span class="cl">        <span class="n">file_metadata</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">title</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;mimeType&#39;</span><span class="p">:</span> <span class="s1">&#39;application/vnd.google-apps.folder&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">file</span> <span class="o">=</span> <span class="n">drive_service</span><span class="o">.</span><span class="n">files</span><span class="p">()</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">body</span><span class="o">=</span><span class="n">file_metadata</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                            <span class="n">fields</span><span class="o">=</span><span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">execute</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Folder ID: </span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="n">file</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">add_spreadsheet_to_folder</span><span class="p">(</span><span class="bp">self</span> <span class="p">,</span><span class="n">folder_id</span><span class="p">,</span><span class="n">title</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">drive_service</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">service</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="n">file_metadata</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;</span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">title</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;parents&#39;</span><span class="p">:</span> <span class="p">[</span><span class="n">folder_id</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;mimeType&#39;</span><span class="p">:</span> <span class="s1">&#39;application/vnd.google-apps.spreadsheet&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">res</span> <span class="o">=</span> <span class="n">drive_service</span><span class="o">.</span><span class="n">files</span><span class="p">()</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">body</span><span class="o">=</span><span class="n">file_metadata</span><span class="p">)</span><span class="o">.</span><span class="n">execute</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#print(res)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">res</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">google_sheet</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">creds</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">service</span> <span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">get_sheet_service</span><span class="p">(</span><span class="n">creds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">get_sheet_service</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">creds</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">service</span> <span class="o">=</span> <span class="n">build</span><span class="p">(</span><span class="s1">&#39;sheets&#39;</span><span class="p">,</span> <span class="s1">&#39;v4&#39;</span><span class="p">,</span> <span class="n">credentials</span><span class="o">=</span><span class="n">creds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="n">spreadsheets</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">google_creds</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">creds_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">creds</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_creds</span><span class="p">(</span><span class="n">creds_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">get_creds</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">creds_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">creds</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># The file token.json stores the user&#39;s access and refresh tokens, and is</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># created automatically when the authorization flow completes for the first</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># time.</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="s1">&#39;token.json&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">creds</span> <span class="o">=</span> <span class="n">Credentials</span><span class="o">.</span><span class="n">from_authorized_user_file</span><span class="p">(</span><span class="s1">&#39;token.json&#39;</span><span class="p">,</span> <span class="n">SCOPES</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># If there are no (valid) credentials available, let the user log in.</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">creds</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">creds</span><span class="o">.</span><span class="n">valid</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">creds</span> <span class="ow">and</span> <span class="n">creds</span><span class="o">.</span><span class="n">expired</span> <span class="ow">and</span> <span class="n">creds</span><span class="o">.</span><span class="n">refresh_token</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">creds</span><span class="o">.</span><span class="n">refresh</span><span class="p">(</span><span class="n">Request</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;no creds&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">creds</span> <span class="o">=</span> <span class="n">service_account</span><span class="o">.</span><span class="n">Credentials</span><span class="o">.</span><span class="n">from_service_account_file</span><span class="p">(</span><span class="n">creds_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#creds = ServiceAccountCredentials.from_json_keyfile_name(&#39;add_json_file_here.json&#39;, SCOPES)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#flow = InstalledAppFlow.from_client_secrets_file(</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#    &#39;credentials.json&#39;, SCOPES)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">#creds = flow.run_local_server(port=0)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Save the credentials for the next run</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#with open(&#39;token.json&#39;, &#39;w&#39;) as token:</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#    token.write(creds.to_json())</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">creds</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">config</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">file_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#self.yaml_stream = file(&#34;config.yaml&#34;, &#39;r&#39;)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">load_config</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">load_config</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">file_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#print(&#34;test&#34;)</span>
</span></span><span class="line"><span class="cl">        <span class="n">stream</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span><span class="n">Loader</span> <span class="o">=</span> <span class="n">Loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(data)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_google_credentials_object</span><span class="p">(</span><span class="n">creds_path</span> <span class="o">=</span> <span class="s1">&#39;credentials.json&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">google_credentials_object</span> <span class="o">=</span> <span class="n">google_creds</span><span class="p">(</span><span class="n">creds_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">google_credentials_object</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_config_object</span><span class="p">(</span><span class="n">file_path</span> <span class="o">=</span> <span class="s1">&#39;config.yaml&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">config_object</span> <span class="o">=</span> <span class="n">config</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">config_object</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">search_result_generator</span><span class="p">(</span><span class="n">condition</span> <span class="o">=</span> <span class="kc">True</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#column_lookup_table = {}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(num_columns)</span>
</span></span><span class="line"><span class="cl">    <span class="n">page_num</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">column_lookup_table</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">condition</span> <span class="o">==</span><span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#pprint(num_columns)</span>
</span></span><span class="line"><span class="cl">        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">61</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">search_results_page_object</span> <span class="o">=</span> <span class="n">create_search_results_page_object</span><span class="p">(</span><span class="n">page_num</span> <span class="o">=</span> <span class="n">page_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">search_results_page_object</span><span class="o">.</span><span class="n">next_url</span> <span class="o">!=</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">condition</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="n">page_num</span> <span class="o">=</span> <span class="n">page_num</span> <span class="o">+</span> <span class="mi">1</span>            
</span></span><span class="line"><span class="cl">            <span class="k">yield</span> <span class="p">(</span><span class="n">search_results_page_object</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">condition</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">            <span class="k">yield</span> <span class="p">(</span><span class="n">search_results_page_object</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_search_results_page_object</span><span class="p">(</span><span class="n">base_url</span> <span class="o">=</span> <span class="s2">&#34;https://www.loc.gov/collections&#34;</span><span class="p">,</span><span class="n">collection</span> <span class="o">=</span> <span class="s2">&#34;united-states-reports&#34;</span><span class="p">,</span><span class="n">json_parameter</span> <span class="o">=</span> <span class="s2">&#34;fo=json&#34;</span><span class="p">,</span><span class="n">results_per_page</span> <span class="o">=</span> <span class="s2">&#34;c=70&#34;</span><span class="p">,</span><span class="n">query_param</span> <span class="o">=</span> <span class="s2">&#34;?&#34;</span><span class="p">,</span><span class="n">page_param</span> <span class="o">=</span><span class="s2">&#34;sp=&#34;</span><span class="p">,</span><span class="n">page_num</span> <span class="o">=</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#search = search_results(base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(search.search_url)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#pprint(num_columns)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">search_results_page</span><span class="p">(</span><span class="n">base_url</span><span class="p">,</span><span class="n">collection</span><span class="p">,</span><span class="n">json_parameter</span><span class="p">,</span><span class="n">results_per_page</span><span class="p">,</span><span class="n">query_param</span><span class="p">,</span><span class="n">page_param</span><span class="p">,</span><span class="n">page_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_google_drive_object</span><span class="p">(</span><span class="n">google_creds</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">drive_service_object</span> <span class="o">=</span> <span class="n">google_drive</span><span class="p">(</span><span class="n">google_creds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">drive_service_object</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_google_sheet_object</span><span class="p">(</span><span class="n">google_creds</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">sheet_service_object</span> <span class="o">=</span> <span class="n">google_sheet</span><span class="p">(</span><span class="n">google_creds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sheet_service_object</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_new_google_sheet</span><span class="p">(</span><span class="n">google_drive_object</span><span class="p">,</span><span class="n">folder_id</span><span class="p">,</span><span class="n">title</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">sheet_meta_data</span> <span class="o">=</span> <span class="n">google_drive_object</span><span class="o">.</span><span class="n">add_spreadsheet_to_folder</span><span class="p">(</span><span class="n">folder_id</span><span class="p">,</span> <span class="n">title</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sheet_meta_data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">flatten_result</span><span class="p">(</span><span class="n">result_json</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">flat_json</span> <span class="o">=</span> <span class="n">flatten</span><span class="p">(</span><span class="n">result_json</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">flat_json</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">write_last_page_num</span><span class="p">(</span><span class="n">page_num</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;last_page_num.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">page_num</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">tracemalloc</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#rate_limiter = RateLimiter(max_calls=1, period=60)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#cd to output</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#result = create_search_results_page_object()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#with cd(&#34;output&#34;):</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#    result.write_to_file(data = result.dict_of_dicts, file_num = 1)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">obj</span> <span class="ow">in</span> <span class="n">search_result_generator</span><span class="p">():</span>   
</span></span><span class="line"><span class="cl">        <span class="n">page_num</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="n">page_num</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">cd</span><span class="p">(</span><span class="s2">&#34;output_2&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#print(&#39;hahaha&#39;)</span>
</span></span><span class="line"><span class="cl">            <span class="n">obj</span><span class="o">.</span><span class="n">to_json</span><span class="p">(</span><span class="n">file_num</span> <span class="o">=</span> <span class="n">page_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#obj.write_graphml(file_num= page_num)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#obj.to_pandas()</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#obj.write_to_file(data = obj.dict_of_dicts, file_num = page_num)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#obj.to_csv()</span>
</span></span><span class="line"><span class="cl">        <span class="n">write_last_page_num</span><span class="p">(</span><span class="n">page_num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">{}</span><span class="s2"> Search Results Crawled&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">page_num</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">snapshot</span> <span class="o">=</span> <span class="n">tracemalloc</span><span class="o">.</span><span class="n">take_snapshot</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">top_stats</span> <span class="o">=</span> <span class="n">snapshot</span><span class="o">.</span><span class="n">statistics</span><span class="p">(</span><span class="s1">&#39;lineno&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;[ Top 10 ]&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">stat</span> <span class="ow">in</span> <span class="n">top_stats</span><span class="p">[:</span><span class="mi">10</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">stat</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span></code></pre></div>]]></content>
			<postid> 4be1e9ba594e3327f7e5a515c1f03950</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Feasibility of Transatlantic Carbon Shipping</title>
			<link>//localhost:1313/en/posts/feasibility_study_shipping_carbon/</link>
			<pubDate>Sat, 07 May 2022 18:40:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/feasibility_study_shipping_carbon/</guid>
			<description><![CDATA[A feasibility study of shipping carbon from Europe to the United States]]></description>
			<content type="html"><![CDATA[<h1 id="feasibility-of-shipping-carbon-across-the-atlantic">Feasibility of Shipping Carbon Across the Atlantic</h1>
<h2 id="methodology">Methodology</h2>
<p>Please review the my <a href="https://blog.jnapolitano.io/carbon-shipping-projections/">previous post</a> which details the design of my model.</p>
<p>The major difference in this report is the sampling of the mean price per voyage.</p>
<p>The conversion error has been corrected.</p>
<h2 id="findings">Findings</h2>
<h3 id="distance-of-transport">Distance of Transport</h3>
<p>The standard deviation in mean price per voyage was found to be less than 0.  This suggests that the distance of travel within Europe is marginal.  The major obstacle is crossing the Atlantic to access the Gulf of Mexico.  It is possible that an import/export port located in the Chesapeake, New England, Willmington, or Savannah could reduce the cost of navigating through the Caribbean to access Gulf based ports.</p>
<p>This would present a secondary problem piping the co2 to the interior of the Country to access the spent wells located in the Rust Belt.</p>
<h3 id="price-of-transport">Price of Transport</h3>
<p>The price of transport is fixed at $12.00 USD per 100 km per tonne as suggested by this <a href="https://ieaghg.org/docs/General_Docs/Reports/PH4-30%20Ship%20Transport.pdf">source</a>.  A rough estimate for the total cost per tonne from London to Houston is about USD $936.00. For reference the cost to transport standard freight from China to the United States ranges from $5,000 to $8,000 USD in total per tonne; or $5.00 to $8.00 USD per kilo in total.</p>
<h3 id="industrial-applications">Industrial Applications</h3>
<p>Another study must be completed to calculate value of super critical CO2 to industrial applications in order to attempt to justify shipping CO2 such large distances.  Shipping large quantities of CO2 to  store is most likely unreasonable, however, at only about $316,665 USD average cost per voyage it is a reasonable figure if proper incentives are in place.</p>
<h3 id="carbon-storage">Carbon Storage</h3>
<p>Based on this model, it is somewhat reasonable to transport CO2, especially if the US incentivises companies that do so.  Nonetheless, at $50-$60 carbon tax credits per tonne captured (verify this data), it would be unfeasible to account for the estimated 936 per tonne cost of shipping across the Atlantic under current programs.</p>
<h2 id="limitations-of-the-model">Limitations of the Model</h2>
<h3 id="accounting-for-the-return-trip-to-port">Accounting for the Return Trip to Port</h3>
<p>It is important to note that I did not account for the differential costs for the return trip to a european port.  Though, the cost of shipping per ton was fixed at 12.00 USD, doubling distance of travel may double pricing. That said, it would be unlikely for ships to return to port empty. I would expect tankers to be refilled with LNG for return.  Nonetheless, this is a slight methodological issue that should be improved upon.</p>
<h3 id="cost-to-transport">Cost to Transport</h3>
<p>The cost to transport per 100 km is fixed at 12.00 USD as suggested by this <a href="https://ieaghg.org/docs/General_Docs/Reports/PH4-30%20Ship%20Transport.pdf">source</a>.  It accounts for the cost of liquification, shipping costs, and port fees.  The source however, was published in 2004.  The costs may have been reduced by technological advance and demand for super critical CO2.</p>
<h3 id="volumes-of-transport">Volumes of Transport</h3>
<p>I simply converted the volumes of standard LNG ships to liquifed CO2.  There may be data available for tankers dedicated to carbon, but I was not aware of any when performing this analysis.  Tankers may also not completely dedicate their capacity to CO2.  Armed with a proper probability distribution, I could improve the model by randomly choosing volumes based on historical data.</p>
<h2 id="conclusion">Conclusion</h2>
<p>It is unlikely that CO2 will be shipped to the United States simply for storage unless companies are incentivized to do so. A transatlantic trade may develop, but I would assume in order to meet demands for the industrial applications of super critical CO2.</p>
<h2 id="mean-voyage-data-analysis">Mean Voyage Data Analysis</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">mean_price_per_cycle_df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="calculating-the-confidence-interval-for-mean-voyage">Calculating the Confidence Interval For Mean Voyage</h3>
<p>The data is nearly normal.  I could test for normality, but that would be beyond the scope of this analysis.  Also, by design the Monte Carlo model should produce a normal distribution with sufficient samples.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">st</span><span class="o">.</span><span class="n">norm</span><span class="o">.</span><span class="n">interval</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.90</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">mean_price_per_cycle_df</span><span class="p">[</span><span class="s1">&#39;Voyage Cost USD&#39;</span><span class="p">]),</span> <span class="n">scale</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="n">sem</span><span class="p">(</span><span class="n">mean_price_per_cycle_df</span><span class="p">[</span><span class="s1">&#39;Voyage Cost USD&#39;</span><span class="p">]))</span>
</span></span></code></pre></div><pre><code>(316665.2057796428, 316665.2057796428)
</code></pre>
<p>It is safe to assume that 90 percent of the time we would see an annual cost 316,665 dollars USD with the assumptions of the model taken into account.  As the price per 100 km is fixed, the standard deviations is minimal.  The distances as well to port seem to be fairly consistent.  The cost of transport through Europe is minimal.</p>
<h3 id="histogram-of-mean-voyage-price-samples">Histogram of Mean Voyage Price Samples</h3>
<p>The price does not deviate.  It is so concentrated in fact, that I worry that the model is not correctly randomizing European ports of origin.  If the model is operating correctly, then it is apparent that the Atlantic is the only barrier to trade.  Partners such as the UK, France, Portugal, The Netherlands, Spain, or any other nation relatively close to the United States are equally unlikely.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">mean_price_per_cycle_df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">grid</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">rwidth</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                   <span class="n">color</span><span class="o">=</span><span class="s1">&#39;#607c8e&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Mean Price Distribution Per Voyage&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Mean Voyage Price USD&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Frequency&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.75</span><span class="p">)</span>
</span></span></code></pre></div><p><img src="shipping_carbon_feasibility_files/shipping_carbon_feasibility_8_0.png" alt="png"></p>
<h2 id="annual-data-analysis">Annual Data Analysis</h2>
<p>This is a reprint of the findings from <a href="https://blog.jnapolitano.io/carbon-shipping-projections/">my previous report</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">annual_price_samples_df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h2 id="calculating-the-confidence-interval">Calculating the Confidence Interval</h2>
<p>The data is nearly normal.  I could test for normality, but that would be beyond the scope of this analysis.  Also, by design the Monte Carlo model should produce a normal distribution with sufficient samples.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">st</span><span class="o">.</span><span class="n">norm</span><span class="o">.</span><span class="n">interval</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.90</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">annual_price_samples_df</span><span class="p">[</span><span class="s1">&#39;cost_in_usd&#39;</span><span class="p">]),</span> <span class="n">scale</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="n">sem</span><span class="p">(</span><span class="n">annual_price_samples_df</span><span class="p">[</span><span class="s1">&#39;cost_in_usd&#39;</span><span class="p">]))</span>
</span></span></code></pre></div><pre><code>(57355047.61667279, 57525821.6547037)
</code></pre>
<p>It is safe to assume that 90 percent of the time we would see an annual cost of 57.36 to 57.52 million dollars USD with the assumptions of the model taken into account.</p>
<h3 id="histogram-of-annual-price-distribution">Histogram of Annual Price Distribution</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">annual_price_samples_df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">grid</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">rwidth</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                   <span class="n">color</span><span class="o">=</span><span class="s1">&#39;#607c8e&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Annual Price Distribution for Shipping Carbon&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Annual Price in USD&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Frequency&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.75</span><span class="p">)</span>
</span></span></code></pre></div><p><img src="shipping_carbon_feasibility_files/shipping_carbon_feasibility_15_0.png" alt="png"></p>
<h2 id="data-imports-and-manipulation">Data Imports and Manipulation</h2>
<h3 id="the-shipping-dataframe">The Shipping Dataframe</h3>
<p>The shipping dataframe is the basis of the simulation.  It is used to tabulate total cost and to record the values of variables.</p>
<h4 id="capacity-distribution-and-number-of-ships-calculation">Capacity Distribution and Number of Ships Calculation</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Capacity range</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 40,000 m3 71,500 to 210,000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#Susanna Dorigoni, Luigi Mazzei, Federico Pontoni, and Antonio Sileo</span>
</span></span><span class="line"><span class="cl"><span class="c1">#IEFE – Centre for Research on Energy and Environmental Economics and Policy,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#Università Bocconi, Milan, Italy</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># I&#39;m sure a better report is available but this is a start</span>
</span></span><span class="line"><span class="cl"><span class="c1"># cubic meters unit</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">### a rough estimate of global suplly dedicated to co2 shipping</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># I will probably need a better metric but this is a good start that can be modified later when necessary</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ships</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">63</span><span class="o">*</span><span class="mf">.25</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ships</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">conversion_factor</span> <span class="o">=</span> <span class="mf">2.21</span><span class="o">/</span><span class="mf">2.65</span>
</span></span><span class="line"><span class="cl"><span class="n">conversion_factor</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">40000</span> <span class="o">*</span> <span class="n">conversion_factor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">210000</span> <span class="o">*</span> <span class="n">conversion_factor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">median</span> <span class="o">=</span> <span class="mi">137564</span> <span class="o">*</span> <span class="n">conversion_factor</span>
</span></span><span class="line"><span class="cl"><span class="n">standard_dev</span> <span class="o">=</span> <span class="mf">6.63</span> <span class="o">*</span> <span class="n">conversion_factor</span>  <span class="c1">#file:///Users/jnapolitano/Downloads/LNG_Shipping_a_Descriptive_Analysis.pdf</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cap_range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">lower_bound</span><span class="p">,</span> <span class="n">upper_bound</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cap_distribution</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="n">median</span> <span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">standard_dev</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">ships</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="the-shipping-df">The Shipping Df</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">shipping_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">cap_distribution</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;co2_capacity_cubic_meters&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;europe_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span><span class="p">[</span><span class="s2">&#34;us_port&#34;</span><span class="p">]</span> <span class="o">=</span><span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">]</span> <span class="o">=</span><span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;cost_per_day&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;co2_capacity_tonnes&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;co2_capacity_cubic_meters&#39;</span><span class="p">]</span><span class="o">/</span><span class="mf">544.66</span> <span class="c1">## Verify this factor.  It seems to high</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="the-european-ports-df">The European Ports Df</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">gisfilepath</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/data/energy/PORT_2013_SH/Data/PORT_PT_2013.shp&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ports_df</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="n">gisfilepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ports_df</span> <span class="o">=</span> <span class="n">ports_df</span><span class="o">.</span><span class="n">to_crs</span><span class="p">(</span><span class="n">epsg</span><span class="o">=</span><span class="mi">3857</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="filtered-wells-dataframe">Filtered Wells DataFrame</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## Importing our DataFrames</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">gisfilepath</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/data/energy/filtered-wells.geojson&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">filtered_df</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="n">gisfilepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">filtered_df</span> <span class="o">=</span> <span class="n">filtered_df</span><span class="o">.</span><span class="n">to_crs</span><span class="p">(</span><span class="n">epsg</span><span class="o">=</span><span class="mi">3857</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="getting-map-conditions-for-us-port-filtering">Getting Map Conditions for Us Port Filtering</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">map_conditions</span> <span class="o">=</span> <span class="n">filtered_df</span><span class="o">.</span><span class="n">TERMID</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
</span></span></code></pre></div><h3 id="us-ports-dataframes">US Ports Dataframes</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## Importing our DataFrames</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">gisfilepath</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/data/energy/Liquified_Natural_Gas_Import_Exports_and_Terminals.geojson&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">terminal_df</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="n">gisfilepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">terminal_df</span> <span class="o">=</span> <span class="n">terminal_df</span><span class="o">.</span><span class="n">to_crs</span><span class="p">(</span><span class="n">epsg</span><span class="o">=</span><span class="mi">3857</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">terminal_df</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">terminal_df</span><span class="p">[</span><span class="n">terminal_df</span><span class="p">[</span><span class="s1">&#39;STATUS&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;SUSPENDED&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">terminal_df</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;NAME&#34;</span><span class="p">:</span> <span class="s2">&#34;TERMINAL_NAME&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">terminal_df</span><span class="p">[</span><span class="s1">&#39;TERMINAL_GEO&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">terminal_df</span><span class="p">[</span><span class="s1">&#39;geometry&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">port_terminals_df</span> <span class="o">=</span> <span class="n">terminal_df</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s1">&#39;TERMID in @map_conditions&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">port_terminals_df</span><span class="p">[</span><span class="s1">&#39;co2_capacity_mmta&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">port_terminals_df</span><span class="p">[</span><span class="s1">&#39;CURRENTCAP&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="n">conversion_factor</span>
</span></span><span class="line"><span class="cl"><span class="n">port_terminals_df</span><span class="p">[</span><span class="s1">&#39;co2_capacity_metric_tons&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">port_terminals_df</span><span class="p">[</span><span class="s1">&#39;co2_capacity_mmta&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">1000000</span>
</span></span><span class="line"><span class="cl"><span class="n">port_terminals_df</span><span class="p">[</span><span class="s1">&#39;available&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span></code></pre></div><h2 id="random-distribution-distance-and-pricing-functions">Random Distribution, Distance and Pricing Functions</h2>
<h3 id="accounting-for-random-days-at-sea">Accounting for Random Days at Sea</h3>
<p>As days at sea is variable I created a range between 20 and 40 days to account for a round trip to every major port in Europe.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">random_day</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">lower_bound</span> <span class="o">=</span> <span class="mi">20</span>
</span></span><span class="line"><span class="cl">    <span class="n">upper_bound</span> <span class="o">=</span> <span class="mi">40</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">median</span> <span class="o">=</span> <span class="mi">30</span>
</span></span><span class="line"><span class="cl">    <span class="n">standard_dev</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">days_range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">lower_bound</span><span class="p">,</span> <span class="n">upper_bound</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">days_distribution</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="n">median</span> <span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">standard_dev</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">ships</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">days_randomized</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">days_distribution</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">days_randomized</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">int64</span><span class="p">))</span>
</span></span></code></pre></div><h3 id="accounting-for-random-european-ports">Accounting for Random European Ports</h3>
<p>I randomized the port selection process with the following function.  The data provided by EuroStat did not filter according to type of port.  Nonetheless, the distance recorded should be very similiar to those of actual LNG ports.  A better data set could be substituded directly into the function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">random_europe_port</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#select a random number along the index of the ports df.  Return the value of hte geometry at the index.  </span>
</span></span><span class="line"><span class="cl">    <span class="c1">#select indices from the dataframe that are valid.  ie capacity has not yet been met.  </span>
</span></span><span class="line"><span class="cl">    <span class="n">ports_randomized</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">ports_df</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">index_location</span> <span class="o">=</span> <span class="n">ports_randomized</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ports_df</span><span class="o">.</span><span class="n">geometry</span><span class="p">[</span><span class="n">index_location</span><span class="p">]</span>
</span></span></code></pre></div><h3 id="accounting-for-random-us-ports">Accounting for Random US Ports</h3>
<p>I was able to filter import/export ports in the United States in to a dataset of about 15.  Like the European dataset, I randomized selection.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">random_us_port</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#select a random number along the index of the ports df.  Return the value of hte geometry at the index.  </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ports_randomized</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">port_terminals_df</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">index_location</span> <span class="o">=</span> <span class="n">ports_randomized</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">port_terminals_df</span><span class="o">.</span><span class="n">geometry</span><span class="p">[</span><span class="n">index_location</span><span class="p">]</span>
</span></span></code></pre></div><h3 id="calculating-distance-between-ports">Calculating Distance Between Ports</h3>
<p>I calculated the shortest distance between ports based on their geographic locations with the shapley.distance function.  It returns distance in meters.  I divide by 1000 to convert into Km.   The algorithm could be improved by using official shipping data to randomize a distribution of distances between ports.  Unfortunately, I do not have that data available to me.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">geo_distance</span><span class="p">(</span><span class="n">dist1</span><span class="p">,</span><span class="n">dist2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># return distance in km</span>
</span></span><span class="line"><span class="cl">    <span class="n">distance</span> <span class="o">=</span> <span class="n">dist1</span><span class="o">.</span><span class="n">distance</span><span class="p">(</span><span class="n">dist2</span><span class="p">)</span><span class="o">/</span><span class="mi">1000</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">(</span><span class="n">distance</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span></code></pre></div><h3 id="calculating-price-of-transport">Calculating Price of Transport</h3>
<p>The cost of transport accounts for port fees, liquification, and transport.   Unfortunately, my data is from a paper published in 2004.  I would like to find a more recent paper.   I did not convert the value of 2004 USD to 2022 because I am not sure of the validity of the conversion factors available online.  I would need a better source to correctly model the true cost of transport.</p>
<p><a href="https://ieaghg.org/docs/General_Docs/Reports/PH4-30%20Ship%20Transport.pdf">source</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">price_to_transport</span><span class="p">(</span><span class="n">distance</span><span class="p">,</span><span class="n">tonnes</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">price</span> <span class="o">=</span> <span class="p">(</span><span class="n">distance</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span> <span class="o">*</span> <span class="mi">12</span> <span class="o">*</span> <span class="n">tonnes</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">price</span>
</span></span></code></pre></div><h3 id="calculating-cost-per-day">Calculating Cost Per Day</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">cost_per_day</span><span class="p">(</span><span class="n">price</span><span class="p">,</span><span class="n">distance</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">price</span><span class="o">/</span><span class="n">distance</span>
</span></span></code></pre></div><h2 id="costs-per-annum-algorithm">Costs Per Annum Algorithm</h2>
<p>The algorithm I used calculates the daily status of ships transporting CO2 across the Atlantic from a random European port to a random port in the United States.  It will run for 365 iterations or until the total carbon capacity of the US ports is reached.  This value could and probably should be dynamically allocated via a similiar algorithm, but I do not yet have historical probability distributions of carbon imports to determime a valid price allocation function.</p>
<p>When the daily counter reaches zero for a tanker:</p>
<ul>
<li>The capacity is refilled to full.</li>
<li>A random us port is assigned.</li>
<li>A random European port is assigned.</li>
<li>The distance between ports is calculated.</li>
<li>The cost of transport over that distance is calculated per 100 km.</li>
<li>The total shipping price of that cycle is tabulated.</li>
<li>The total tonnage of that cycle is tabulated.</li>
<li>The mean price per voyage is tabulated</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">days</span> <span class="o">=</span> <span class="mi">365</span>
</span></span><span class="line"><span class="cl"><span class="n">day_counter</span> <span class="o">=</span> <span class="mi">0</span> 
</span></span><span class="line"><span class="cl"><span class="n">carbon_total_millions_metric_tons</span> <span class="o">=</span> <span class="mi">300000000</span>
</span></span><span class="line"><span class="cl"><span class="n">total_tons_shipped</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">total_price</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_mean_price_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">days</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#deduction = capacity of empty ships</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">days</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">carbon_total_millions_metric_tons</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># must use apply to account for multiple 0 conditions.  If i simply vectorized the function across the dataframe in a single call i would assign the the same values each day </span>
</span></span><span class="line"><span class="cl">        <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;us_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">random_us_port</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;us_port&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;europe_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">random_europe_port</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;europe_port&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">geo_distance</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s1">&#39;us_port&#39;</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;europe_port&#39;</span><span class="p">])</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">price_to_transport</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">],</span><span class="n">x</span><span class="p">[</span><span class="s1">&#39;co2_capacity_tonnes&#39;</span><span class="p">])</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#calculate cost per day for fun...</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># query all that are = o.  Summate the capacities deduct the total </span>
</span></span><span class="line"><span class="cl">        <span class="n">tmp_df</span><span class="o">=</span><span class="n">shipping_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum_of_capacity</span> <span class="o">=</span> <span class="n">tmp_df</span><span class="p">[</span><span class="s1">&#39;co2_capacity_tonnes&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum_of_price</span> <span class="o">=</span> <span class="n">tmp_df</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">mean_of_price</span> <span class="o">=</span> <span class="n">tmp_df</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">cycle_mean_price_samples</span><span class="p">[</span><span class="n">day</span><span class="p">]</span> <span class="o">=</span> <span class="n">mean_of_price</span>
</span></span><span class="line"><span class="cl">        <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">random_day</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">total_tons_shipped</span> <span class="o">=</span> <span class="n">total_tons_shipped</span> <span class="o">+</span> <span class="n">sum_of_capacity</span>
</span></span><span class="line"><span class="cl">        <span class="n">total_price</span> <span class="o">=</span> <span class="n">total_price</span> <span class="o">+</span> <span class="n">sum_of_price</span>
</span></span><span class="line"><span class="cl">        <span class="n">carbon_total_millions_metric_tons</span> <span class="o">=</span> <span class="n">carbon_total_millions_metric_tons</span> <span class="o">-</span> <span class="n">sum_of_capacity</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#print(carbon_total_millions_metric_tons)</span>
</span></span><span class="line"><span class="cl">        <span class="n">day_counter</span> <span class="o">=</span> <span class="n">day_counter</span><span class="o">+</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">        <span class="k">break</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">day_counter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">total_tons_shipped</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">total_price</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#Drop the nan, ie empty samples</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_mean_price</span> <span class="o">=</span> <span class="n">cycle_mean_price_samples</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">logical_not</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">isnan</span><span class="p">(</span><span class="n">cycle_mean_price_samples</span><span class="p">))]</span>
</span></span><span class="line"><span class="cl"><span class="c1">#Calculate mean price of filling a ship (around a billion according to the data i have if filled to capacity.  Ridiculous.)</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_mean_price</span> <span class="o">=</span> <span class="n">cycle_mean_price</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">cycle_mean_price</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>365
41072.53151865029
62067313.75358563
316665.2057796429
</code></pre>
<h2 id="monte-carlo-simulation-with-500-iterations">Monte Carlo Simulation with 500 Iterations</h2>
<p>The annual rate of shipping can be variable according to shifting dynamics. I account for that by modeling the per annum algorithm 500 times.  Modeling would improve as n increases, but for the sake of time I limited the computation to 500 iterations</p>
<p>The only difference between this algorithm and the previous one is an extra for loop.  The algorithmic efficiency is surprisingly good as the I was able to vectorize tabulations with lambda functions across the dataframes.  On my laptop, I was able to complete the algorithm in about 16 minutes of run time.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nsamples</span> <span class="o">=</span> <span class="mi">500</span>
</span></span><span class="line"><span class="cl"><span class="n">price_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">nsamples</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_mean_price_annual_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">nsamples</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">sample</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">nsamples</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">days</span> <span class="o">=</span> <span class="mi">365</span>
</span></span><span class="line"><span class="cl">    <span class="n">day_counter</span> <span class="o">=</span> <span class="mi">0</span> 
</span></span><span class="line"><span class="cl">    <span class="n">carbon_total_millions_metric_tons</span> <span class="o">=</span> <span class="mi">300000000</span> <span class="c1"># could randomize.  Need a probability distribution based on historial data. </span>
</span></span><span class="line"><span class="cl">    <span class="n">total_tons_shipped</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">total_price</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_mean_price_daily_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">days</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#deduction = capacity of empty ships</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">days</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">carbon_total_millions_metric_tons</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># must use apply to account for multiple 0 conditions.  If i simply vectorized the function across the dataframe in a single call i would assign the the same values each day </span>
</span></span><span class="line"><span class="cl">            <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;us_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">random_us_port</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;us_port&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;europe_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">random_europe_port</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;europe_port&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">geo_distance</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s1">&#39;us_port&#39;</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;europe_port&#39;</span><span class="p">])</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">price_to_transport</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;co2_capacity_tonnes&#39;</span><span class="p">])</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># query all that are = o.  Summate the capacities deduct the total </span>
</span></span><span class="line"><span class="cl">            <span class="n">tmp_df</span><span class="o">=</span><span class="n">shipping_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">sum_of_capacity</span> <span class="o">=</span> <span class="n">tmp_df</span><span class="p">[</span><span class="s1">&#39;co2_capacity_tonnes&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">sum_of_price</span> <span class="o">=</span> <span class="n">tmp_df</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">mean_of_price</span> <span class="o">=</span> <span class="n">tmp_df</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">cycle_mean_price_daily_samples</span><span class="p">[</span><span class="n">day</span><span class="p">]</span> <span class="o">=</span> <span class="n">mean_of_price</span>
</span></span><span class="line"><span class="cl">            <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">random_day</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">total_tons_shipped</span> <span class="o">=</span> <span class="n">total_tons_shipped</span> <span class="o">+</span> <span class="n">sum_of_capacity</span>
</span></span><span class="line"><span class="cl">            <span class="n">total_price</span> <span class="o">=</span> <span class="n">total_price</span> <span class="o">+</span> <span class="n">sum_of_price</span>
</span></span><span class="line"><span class="cl">            <span class="n">carbon_total_millions_metric_tons</span> <span class="o">=</span> <span class="n">carbon_total_millions_metric_tons</span> <span class="o">-</span> <span class="n">sum_of_capacity</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#print(carbon_total_millions_metric_tons)</span>
</span></span><span class="line"><span class="cl">            <span class="n">day_counter</span> <span class="o">=</span> <span class="n">day_counter</span><span class="o">+</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#Drop the nan, ie empty samples</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_mean_price</span> <span class="o">=</span> <span class="n">cycle_mean_price_samples</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">logical_not</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">isnan</span><span class="p">(</span><span class="n">cycle_mean_price_samples</span><span class="p">))]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#Calculate mean price of filling a ship (around a billion according to the data i have if filled to capacity.  Ridiculous.)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_mean_price</span> <span class="o">=</span> <span class="n">cycle_mean_price</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_mean_price_annual_samples</span><span class="p">[</span><span class="n">sample</span><span class="p">]</span> <span class="o">=</span><span class="n">cycle_mean_price</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">price_samples</span><span class="p">[</span><span class="n">sample</span><span class="p">]</span> <span class="o">=</span> <span class="n">total_price</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        
</span></span></code></pre></div><h3 id="creating-the-annual-price-samples-df">Creating the Annual Price Samples DF</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">annual_price_samples_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">price_samples</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;cost_in_usd&#39;</span><span class="p">])</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">annual_price_samples_df</span><span class="p">[</span><span class="s1">&#39;cost_in_usd&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">annual_price_samples_df</span><span class="o">.</span><span class="n">cost_in_usd</span>
</span></span></code></pre></div><h3 id="creating-the-mean-price-per-round-trip-df">Creating the Mean Price Per Round Trip Df</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">mean_price_per_cycle_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">cycle_mean_price_annual_samples</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;Voyage Cost USD&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">mean_price_per_cycle_df</span><span class="p">[</span><span class="s1">&#39;Voyage Cost USD&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">mean_price_per_cycle_df</span><span class="p">[</span><span class="s1">&#39;Voyage Cost USD&#39;</span><span class="p">]</span> 
</span></span></code></pre></div><h2 id="imports">Imports</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">folium</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">contextily</span> <span class="k">as</span> <span class="nn">cx</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">rtree</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">zlib</span> <span class="kn">import</span> <span class="n">crc32</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hashlib</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">shapely.geometry</span> <span class="kn">import</span> <span class="n">Point</span><span class="p">,</span> <span class="n">LineString</span><span class="p">,</span> <span class="n">Polygon</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scipy.spatial</span> <span class="kn">import</span> <span class="n">cKDTree</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">scipy.stats</span> <span class="k">as</span> <span class="nn">st</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">shapely.geometry</span> <span class="kn">import</span> <span class="n">Point</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">haversine</span> <span class="kn">import</span> <span class="n">Unit</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">geopy.distance</span> <span class="kn">import</span> <span class="n">distance</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">warnings</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>/Users/jnapolitano/venvs/finance/lib/python3.9/site-packages/geopandas/_compat.py:111: UserWarning: The Shapely GEOS version (3.10.2-CAPI-1.16.0) is incompatible with the GEOS version PyGEOS was compiled with (3.10.1-CAPI-1.16.0). Conversions between both will be slow.
  warnings.warn(
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"></code></pre></div>]]></content>
			<postid> 3123e99b5f952de3022e704482b40f6a</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Monte Carlo Projection of the Annual Cost of Shipping Carbon from Europe to the United States</title>
			<link>//localhost:1313/en/posts/carbon-shipping-projections/</link>
			<pubDate>Sat, 07 May 2022 18:40:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/carbon-shipping-projections/</guid>
			<description><![CDATA[Monte Carlo Carbon Shipping Projections]]></description>
			<content type="html"><![CDATA[<h1 id="a-monte-carlo-projection-of-the-annual-cost-of-shipping-carbon-from-europe-to-us-ports">A Monte Carlo Projection of the Annual Cost of Shipping Carbon from Europe to US Ports</h1>
<h2 id="revision">Revision</h2>
<p>An earlier version of this report had reported values that were erroneously elevated by a decimal error in the meters to km conversion of distances between ports.  I apologize for unintentionally publishing misleading information.</p>
<p>Situations like this one, are why I always publish with code.  Transparency is the key to rigor.</p>
<h2 id="introduction">Introduction</h2>
<p>I produced an earlier <a href="https://blog.jnapolitano.io/wells-near-ports/">report</a> that identified potential ports that may be suitable terminals for carbon imports into the United States for storage or industrial applications.</p>
<p>Following that report, I became interested in what could be the annual economic value of shipping CO2.  In this report, I analyze the results of a Monte Carlo simulation I developed in Python (documented at the end of this page) that projects the annual cost of shipping carbon across the Atlantic from Europe to the United States.</p>
<h2 id="methodology">Methodology</h2>
<h3 id="modeling-dynamic-variables">Modeling Dynamic Variables</h3>
<p>To account for dynamic variables I designed a Monte Carlo simulation that randomly selected variables across normal distributions bounded by minima and maxima.</p>
<p>The current simulation includes:</p>
<ul>
<li>Variable shipping distances</li>
<li>Variable shipping capacity</li>
<li>Variable ports of origin</li>
<li>Variable terminal ports</li>
<li>Variable round trip shipping duration</li>
</ul>
<p>Fixed variables include:</p>
<ul>
<li>Cost of Transport per ton (though this will be converted to a random distribution as soon as I find a better data source)</li>
</ul>
<h3 id="modeling-the-shipping-infrastructure">Modeling the Shipping Infrastructure</h3>
<h4 id="source">Source</h4>
<p>Susanna Dorigoni, Luigi Mazzei, Federico Pontoni, and Antonio Sileo
IEFE – Centre for Research on Energy and Environmental Economics and Policy,
Università Bocconi, Milan, Italy</p>
<h4 id="modeling-the-capacity-of-tankers">Modeling the Capacity of Tankers</h4>
<p>To complete this analysis, I converted values found for lng shipping to super critical co2.  To do this,  I converted LNG capacties to super critical Co2 with the following conversion factors:</p>
<ul>
<li>1 tonne co2 super critical = 2.64812 meter cubed super critical co</li>
<li>1 tonnes LNG = 2.21 m3 LNG (liquid)</li>
<li>1 tonne co2 super critical = 544.66 m^3 gaseous</li>
</ul>
<p>The capacity range:</p>
<ul>
<li>The lower bound of the distribution is 33358 cubic meteres</li>
<li>The upper bound is 175132</li>
<li>The median provided is 114723</li>
<li>The standard deviation is 5 (surprisingly homogeneous)</li>
</ul>
<h4 id="modeling-the-number-of-tankers">Modeling the Number of Tankers</h4>
<p>The number of tankers in the Atlantic basin dedicated to LNG transort recorded in 2008 was 63.  I calculated a rough estimate of 25 percent of these being used to transport carbon annually.  A better source is needed to accurately model.  If ships are used to transport both lng and carbon a random distribution designed according to a CO2 carrying probability distribution would suitably model the data.</p>
<p>A total of 15 tankers were modeled in this example.</p>
<h2 id="findings">Findings</h2>
<p>Carbon capture is likely a billion dollar industry at scale.</p>
<p>Across 500 iterations of modeling we see about $57.5 million dollars worth of economic activity annualy.</p>
<h3 id="the-take-away">The Take Away</h3>
<p>The Carbon capture and storage economiy is likely a billion dollar economy at scale.  In just reviewing shipping super critical CO2 from Europe to the United States, a $57.5 million USD annual industry could develop as nations move towards a net carbon zero economy.</p>
<h2 id="limitations-of-the-model">Limitations of the Model</h2>
<p>The model as it is presented in this report is unconstrained.  A more accurate portrayal of what would be possible with current systems in place could be designed with better data.  It is also important to note that I have not included incentives into the model.  It is entirely possible that government subsidies could prove the carbon shipping industry to be more expansive than presented here.</p>
<h2 id="data-analysis">Data Analysis</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">annual_price_samples_df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h2 id="calculating-the-confidence-interval">Calculating the Confidence Interval</h2>
<p>The data is nearly normal.  I could test for normality, but that would be beyond the scope of this analysis.  Also, by design the Monte Carlo model should produce a normal distribution with sufficient samples.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">st</span><span class="o">.</span><span class="n">norm</span><span class="o">.</span><span class="n">interval</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">0.90</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">annual_price_samples_df</span><span class="p">[</span><span class="s1">&#39;cost_in_usd&#39;</span><span class="p">]),</span> <span class="n">scale</span><span class="o">=</span><span class="n">st</span><span class="o">.</span><span class="n">sem</span><span class="p">(</span><span class="n">annual_price_samples_df</span><span class="p">[</span><span class="s1">&#39;cost_in_usd&#39;</span><span class="p">]))</span>
</span></span></code></pre></div><pre><code>(57355794.336350285, 57531108.50357006)
</code></pre>
<p>It is safe to assume that 90 percent of the time we would see an annual cost of $57,355,794 to $57,531,109 USD with the assumptions of the model taken into account.</p>
<h3 id="monte-carlo-histogram">Monte Carlo Histogram</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">annual_price_samples_df</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">grid</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">rwidth</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                   <span class="n">color</span><span class="o">=</span><span class="s1">&#39;#607c8e&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Annual Price Distribution for Shipping Carbon&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;Annual Price in Billions USD&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;Frequency&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.75</span><span class="p">)</span>
</span></span></code></pre></div><p><img src="shipping_projections_files/shipping_projections_10_0.png" alt="png"></p>
<h2 id="data-imports-and-manipulation">Data Imports and Manipulation</h2>
<h3 id="the-shipping-dataframe">The Shipping Dataframe</h3>
<p>The shipping dataframe is the basis of the simulation.  It is used to tabulate total cost and to record the values of variables.</p>
<h4 id="capacity-distribution-and-number-of-ships-calculation">Capacity Distribution and Number of Ships Calculation</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Capacity range</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 40,000 m3 71,500 to 210,000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#Susanna Dorigoni, Luigi Mazzei, Federico Pontoni, and Antonio Sileo</span>
</span></span><span class="line"><span class="cl"><span class="c1">#IEFE – Centre for Research on Energy and Environmental Economics and Policy,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#Università Bocconi, Milan, Italy</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># I&#39;m sure a better report is available but this is a start</span>
</span></span><span class="line"><span class="cl"><span class="c1"># cubic meters unit</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">### a rough estimate of global suplly dedicated to co2 shipping</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># I will probably need a better metric but this is a good start that can be modified later when necessary</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ships</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">63</span><span class="o">*</span><span class="mf">.25</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ships</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">conversion_factor</span> <span class="o">=</span> <span class="mf">2.21</span><span class="o">/</span><span class="mf">2.65</span>
</span></span><span class="line"><span class="cl"><span class="n">conversion_factor</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">lower_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">40000</span> <span class="o">*</span> <span class="n">conversion_factor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">upper_bound</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">210000</span> <span class="o">*</span> <span class="n">conversion_factor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">median</span> <span class="o">=</span> <span class="mi">137564</span> <span class="o">*</span> <span class="n">conversion_factor</span>
</span></span><span class="line"><span class="cl"><span class="n">standard_dev</span> <span class="o">=</span> <span class="mf">6.63</span> <span class="o">*</span> <span class="n">conversion_factor</span>  <span class="c1">#file:///Users/jnapolitano/Downloads/LNG_Shipping_a_Descriptive_Analysis.pdf</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cap_range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">lower_bound</span><span class="p">,</span> <span class="n">upper_bound</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cap_distribution</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="n">median</span> <span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">standard_dev</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">ships</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="the-shipping-df">The Shipping Df</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">shipping_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">cap_distribution</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;co2_capacity_cubic_meters&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;europe_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span><span class="p">[</span><span class="s2">&#34;us_port&#34;</span><span class="p">]</span> <span class="o">=</span><span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">]</span> <span class="o">=</span><span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;cost_per_day&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;co2_capacity_tonnes&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;co2_capacity_cubic_meters&#39;</span><span class="p">]</span><span class="o">/</span><span class="mf">544.66</span> <span class="c1">## Verify this factor.  It seems to high</span>
</span></span><span class="line"><span class="cl"><span class="n">shipping_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="the-european-ports-df">The European Ports Df</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">gisfilepath</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/data/energy/PORT_2013_SH/Data/PORT_PT_2013.shp&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ports_df</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="n">gisfilepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ports_df</span> <span class="o">=</span> <span class="n">ports_df</span><span class="o">.</span><span class="n">to_crs</span><span class="p">(</span><span class="n">epsg</span><span class="o">=</span><span class="mi">3857</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="filtered-wells-dataframe">Filtered Wells DataFrame</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## Importing our DataFrames</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">gisfilepath</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/data/energy/filtered-wells.geojson&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">filtered_df</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="n">gisfilepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">filtered_df</span> <span class="o">=</span> <span class="n">filtered_df</span><span class="o">.</span><span class="n">to_crs</span><span class="p">(</span><span class="n">epsg</span><span class="o">=</span><span class="mi">3857</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="getting-map-conditions-for-us-port-filtering">Getting Map Conditions for Us Port Filtering</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">map_conditions</span> <span class="o">=</span> <span class="n">filtered_df</span><span class="o">.</span><span class="n">TERMID</span><span class="o">.</span><span class="n">unique</span><span class="p">()</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
</span></span></code></pre></div><h3 id="us-ports-dataframes">US Ports Dataframes</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## Importing our DataFrames</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">gisfilepath</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/data/energy/Liquified_Natural_Gas_Import_Exports_and_Terminals.geojson&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">terminal_df</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="n">gisfilepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">terminal_df</span> <span class="o">=</span> <span class="n">terminal_df</span><span class="o">.</span><span class="n">to_crs</span><span class="p">(</span><span class="n">epsg</span><span class="o">=</span><span class="mi">3857</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">terminal_df</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">terminal_df</span><span class="p">[</span><span class="n">terminal_df</span><span class="p">[</span><span class="s1">&#39;STATUS&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;SUSPENDED&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">terminal_df</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;NAME&#34;</span><span class="p">:</span> <span class="s2">&#34;TERMINAL_NAME&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">terminal_df</span><span class="p">[</span><span class="s1">&#39;TERMINAL_GEO&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">terminal_df</span><span class="p">[</span><span class="s1">&#39;geometry&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">port_terminals_df</span> <span class="o">=</span> <span class="n">terminal_df</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s1">&#39;TERMID in @map_conditions&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">port_terminals_df</span><span class="p">[</span><span class="s1">&#39;co2_capacity_mmta&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">port_terminals_df</span><span class="p">[</span><span class="s1">&#39;CURRENTCAP&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="n">conversion_factor</span>
</span></span><span class="line"><span class="cl"><span class="n">port_terminals_df</span><span class="p">[</span><span class="s1">&#39;co2_capacity_metric_tons&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">port_terminals_df</span><span class="p">[</span><span class="s1">&#39;co2_capacity_mmta&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">1000000</span>
</span></span><span class="line"><span class="cl"><span class="n">port_terminals_df</span><span class="p">[</span><span class="s1">&#39;available&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span></code></pre></div><h2 id="random-distribution-distance-and-pricing-functions">Random Distribution, Distance and Pricing Functions</h2>
<h3 id="accounting-for-random-days-at-sea">Accounting for Random Days at Sea</h3>
<p>As days at sea is variable I created a range between 20 and 40 days to account for a round trip to every major port in Europe.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">random_day</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">lower_bound</span> <span class="o">=</span> <span class="mi">20</span>
</span></span><span class="line"><span class="cl">    <span class="n">upper_bound</span> <span class="o">=</span> <span class="mi">40</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">median</span> <span class="o">=</span> <span class="mi">30</span>
</span></span><span class="line"><span class="cl">    <span class="n">standard_dev</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">days_range</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="n">lower_bound</span><span class="p">,</span> <span class="n">upper_bound</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">days_distribution</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="n">median</span> <span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="n">standard_dev</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">ships</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">days_randomized</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">days_distribution</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">days_randomized</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">int64</span><span class="p">))</span>
</span></span></code></pre></div><h3 id="accounting-for-random-european-ports">Accounting for Random European Ports</h3>
<p>I randomized the port selection process with the following function.  The data provided by EuroStat did not filter according to type of port.  Nonetheless, the distance recorded should be very similiar to those of actual LNG ports.  A better data set could be substituded directly into the function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">random_europe_port</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#select a random number along the index of the ports df.  Return the value of hte geometry at the index.  </span>
</span></span><span class="line"><span class="cl">    <span class="c1">#select indices from the dataframe that are valid.  ie capacity has not yet been met.  </span>
</span></span><span class="line"><span class="cl">    <span class="n">ports_randomized</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">ports_df</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">index_location</span> <span class="o">=</span> <span class="n">ports_randomized</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ports_df</span><span class="o">.</span><span class="n">geometry</span><span class="p">[</span><span class="n">index_location</span><span class="p">]</span>
</span></span></code></pre></div><h3 id="accounting-for-random-us-ports">Accounting for Random US Ports</h3>
<p>I was able to filter import/export ports in the United States in to a dataset of about 15.  Like the European dataset, I randomized selection.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">random_us_port</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#select a random number along the index of the ports df.  Return the value of hte geometry at the index.  </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ports_randomized</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">port_terminals_df</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">index_location</span> <span class="o">=</span> <span class="n">ports_randomized</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">port_terminals_df</span><span class="o">.</span><span class="n">geometry</span><span class="p">[</span><span class="n">index_location</span><span class="p">]</span>
</span></span></code></pre></div><h3 id="calculating-distance-between-ports">Calculating Distance Between Ports</h3>
<p>I calculated the shortest distance between ports based on their geographic locations with the shapley.distance function.  It returns distance in meters.  I divide by 1000 to convert into Km.   The algorithm could be improved by using official shipping data to randomize a distribution of distances between ports.  Unfortunately, I do not have that data available to me.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">geo_distance</span><span class="p">(</span><span class="n">dist1</span><span class="p">,</span><span class="n">dist2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># return distance in km</span>
</span></span><span class="line"><span class="cl">    <span class="n">distance</span> <span class="o">=</span> <span class="n">dist1</span><span class="o">.</span><span class="n">distance</span><span class="p">(</span><span class="n">dist2</span><span class="p">)</span><span class="o">/</span><span class="mi">1000</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">(</span><span class="n">distance</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="calculating-price-of-transport">Calculating Price of Transport</h4>
<p>The cost of transport accounts for port fees, liquification, and transport.   Unfortunately, my data is from a paper published in 2004.  I would like to find a more recent paper.   I did not convert the value of 2004 USD to 2022 because I am not sure of the validity of the conversion factors available online.  I would need a better source to correctly model the true cost of transport.</p>
<p><a href="https://ieaghg.org/docs/General_Docs/Reports/PH4-30%20Ship%20Transport.pdf">source</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">price_to_transport</span><span class="p">(</span><span class="n">distance</span><span class="p">,</span><span class="n">tonnes</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">price</span> <span class="o">=</span> <span class="p">(</span><span class="n">distance</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span> <span class="o">*</span> <span class="mi">12</span> <span class="o">*</span> <span class="n">tonnes</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">price</span>
</span></span></code></pre></div><h3 id="calculating-cost-per-day">Calculating Cost Per Day</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">cost_per_day</span><span class="p">(</span><span class="n">price</span><span class="p">,</span><span class="n">distance</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">price</span><span class="o">/</span><span class="n">distance</span>
</span></span></code></pre></div><h2 id="costs-per-annum-algorithm">Costs Per Annum Algorithm</h2>
<p>The algorithm I used calculates the daily status of ships transporting CO2 across the Atlantic from a random European port to a random port in the United States.  It will run for 365 iterations or until the total carbon capacity of the US ports is reached.  This value could and probably should be dynamically allocated via a similiar algorithm, but I do not yet have historical probability distributions of carbon imports to determime a valid price allocation function.</p>
<p>When the daily counter reaches zero for a tanker:</p>
<ul>
<li>The capacity is refilled to full.</li>
<li>A random us port is assigned.</li>
<li>A random European port is assigned.</li>
<li>The distance between ports is calculated.</li>
<li>The cost of transport over that distance is calculated per 100 km.</li>
<li>The total shipping price of that cycle is tabulated.</li>
<li>The total tonnage of that cycle is tabulated.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">days</span> <span class="o">=</span> <span class="mi">365</span>
</span></span><span class="line"><span class="cl"><span class="n">day_counter</span> <span class="o">=</span> <span class="mi">0</span> 
</span></span><span class="line"><span class="cl"><span class="n">carbon_total_millions_metric_tons</span> <span class="o">=</span> <span class="mi">300000000</span>
</span></span><span class="line"><span class="cl"><span class="n">total_tons_shipped</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">total_price</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_mean_price_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">days</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#deduction = capacity of empty ships</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">days</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">carbon_total_millions_metric_tons</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># must use apply to account for multiple 0 conditions.  If i simply vectorized the function across the dataframe in a single call i would assign the the same values each day </span>
</span></span><span class="line"><span class="cl">        <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;us_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">random_us_port</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;us_port&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;europe_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">random_europe_port</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;europe_port&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">geo_distance</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s1">&#39;us_port&#39;</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;europe_port&#39;</span><span class="p">])</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">price_to_transport</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">],</span><span class="n">x</span><span class="p">[</span><span class="s1">&#39;co2_capacity_tonnes&#39;</span><span class="p">])</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#calculate cost per day for fun...</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># query all that are = o.  Summate the capacities deduct the total </span>
</span></span><span class="line"><span class="cl">        <span class="n">tmp_df</span><span class="o">=</span><span class="n">shipping_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum_of_capacity</span> <span class="o">=</span> <span class="n">tmp_df</span><span class="p">[</span><span class="s1">&#39;co2_capacity_tonnes&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum_of_price</span> <span class="o">=</span> <span class="n">tmp_df</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">mean_of_price</span> <span class="o">=</span> <span class="n">tmp_df</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">cycle_mean_price_samples</span><span class="p">[</span><span class="n">day</span><span class="p">]</span> <span class="o">=</span> <span class="n">mean_of_price</span>
</span></span><span class="line"><span class="cl">        <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">random_day</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">total_tons_shipped</span> <span class="o">=</span> <span class="n">total_tons_shipped</span> <span class="o">+</span> <span class="n">sum_of_capacity</span>
</span></span><span class="line"><span class="cl">        <span class="n">total_price</span> <span class="o">=</span> <span class="n">total_price</span> <span class="o">+</span> <span class="n">sum_of_price</span>
</span></span><span class="line"><span class="cl">        <span class="n">carbon_total_millions_metric_tons</span> <span class="o">=</span> <span class="n">carbon_total_millions_metric_tons</span> <span class="o">-</span> <span class="n">sum_of_capacity</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#print(carbon_total_millions_metric_tons)</span>
</span></span><span class="line"><span class="cl">        <span class="n">day_counter</span> <span class="o">=</span> <span class="n">day_counter</span><span class="o">+</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">        <span class="k">break</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">day_counter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">total_tons_shipped</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">total_price</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#Drop the nan, ie empty samples</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_mean_price</span> <span class="o">=</span> <span class="n">cycle_mean_price_samples</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">logical_not</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">isnan</span><span class="p">(</span><span class="n">cycle_mean_price_samples</span><span class="p">))]</span>
</span></span><span class="line"><span class="cl"><span class="c1">#Calculate mean price of filling a ship (around a billion according to the data i have if filled to capacity.  Ridiculous.)</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_mean_price</span> <span class="o">=</span> <span class="n">cycle_mean_price</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">cycle_mean_price</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>365
41073.187985943456
60039059.413350895
308098.2720296601
</code></pre>
<h2 id="monte-carlo-simulation-with-500-iterations">Monte Carlo Simulation with 500 iterations</h2>
<p>The annual rate of shipping can be variable according to shifting dynamics. I account for that by modeling the per annum algorithm 500 times.  Modeling would improve as n increases, but for the sake of time I limited the computation to 500 iterations</p>
<p>The only difference between this algorithm and the previous one is an extra for loop.  The algorithmic efficiency is surprisingly good as the I was able to vectorize tabulations with lambda functions across the dataframes.  On my laptop, I was able to complete the algorithm in about 16 minutes of run time.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nsamples</span> <span class="o">=</span> <span class="mi">500</span>
</span></span><span class="line"><span class="cl"><span class="n">price_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">nsamples</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cycle_mean_price_annual_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">nsamples</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">sample</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">nsamples</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">days</span> <span class="o">=</span> <span class="mi">365</span>
</span></span><span class="line"><span class="cl">    <span class="n">day_counter</span> <span class="o">=</span> <span class="mi">0</span> 
</span></span><span class="line"><span class="cl">    <span class="n">carbon_total_millions_metric_tons</span> <span class="o">=</span> <span class="mi">300000000</span> <span class="c1"># could randomize.  Need a probability distribution based on historial data. </span>
</span></span><span class="line"><span class="cl">    <span class="n">total_tons_shipped</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">total_price</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_mean_price_daily_samples</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="n">days</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#deduction = capacity of empty ships</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">day</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">days</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">carbon_total_millions_metric_tons</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># must use apply to account for multiple 0 conditions.  If i simply vectorized the function across the dataframe in a single call i would assign the the same values each day </span>
</span></span><span class="line"><span class="cl">            <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;us_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">random_us_port</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;us_port&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;europe_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">random_europe_port</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;europe_port&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">geo_distance</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s1">&#39;us_port&#39;</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;europe_port&#39;</span><span class="p">])</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>  <span class="n">price_to_transport</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s1">&#39;distance&#39;</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;co2_capacity_tonnes&#39;</span><span class="p">])</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># query all that are = o.  Summate the capacities deduct the total </span>
</span></span><span class="line"><span class="cl">            <span class="n">tmp_df</span><span class="o">=</span><span class="n">shipping_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">sum_of_capacity</span> <span class="o">=</span> <span class="n">tmp_df</span><span class="p">[</span><span class="s1">&#39;co2_capacity_tonnes&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">sum_of_price</span> <span class="o">=</span> <span class="n">tmp_df</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">mean_of_price</span> <span class="o">=</span> <span class="n">tmp_df</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">cycle_mean_price_daily_samples</span><span class="p">[</span><span class="n">day</span><span class="p">]</span> <span class="o">=</span> <span class="n">mean_of_price</span>
</span></span><span class="line"><span class="cl">            <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">shipping_df</span><span class="p">[</span><span class="s1">&#39;days_to_port&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">random_day</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="o">&lt;=</span><span class="mi">0</span> <span class="k">else</span> <span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">total_tons_shipped</span> <span class="o">=</span> <span class="n">total_tons_shipped</span> <span class="o">+</span> <span class="n">sum_of_capacity</span>
</span></span><span class="line"><span class="cl">            <span class="n">total_price</span> <span class="o">=</span> <span class="n">total_price</span> <span class="o">+</span> <span class="n">sum_of_price</span>
</span></span><span class="line"><span class="cl">            <span class="n">carbon_total_millions_metric_tons</span> <span class="o">=</span> <span class="n">carbon_total_millions_metric_tons</span> <span class="o">-</span> <span class="n">sum_of_capacity</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#print(carbon_total_millions_metric_tons)</span>
</span></span><span class="line"><span class="cl">            <span class="n">day_counter</span> <span class="o">=</span> <span class="n">day_counter</span><span class="o">+</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">#Drop the nan, ie empty samples</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_mean_price</span> <span class="o">=</span> <span class="n">cycle_mean_price_samples</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">logical_not</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">isnan</span><span class="p">(</span><span class="n">cycle_mean_price_samples</span><span class="p">))]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#Calculate mean price of filling a ship (around a billion according to the data i have if filled to capacity.  Ridiculous.)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_mean_price</span> <span class="o">=</span> <span class="n">cycle_mean_price</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cycle_mean_price_annual_samples</span><span class="p">[</span><span class="n">sample</span><span class="p">]</span> <span class="o">=</span><span class="n">cycle_mean_price</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">price_samples</span><span class="p">[</span><span class="n">sample</span><span class="p">]</span> <span class="o">=</span> <span class="n">total_price</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        
</span></span></code></pre></div><h3 id="creating-the-annual-price-samples-df">Creating the Annual Price Samples DF</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">annual_price_samples_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">price_samples</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;cost_in_usd&#39;</span><span class="p">])</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">annual_price_samples_df</span><span class="p">[</span><span class="s1">&#39;cost_in_usd_billions&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">annual_price_samples_df</span><span class="o">.</span><span class="n">cost_in_usd</span> 
</span></span></code></pre></div><h2 id="imports">Imports</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">folium</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">contextily</span> <span class="k">as</span> <span class="nn">cx</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">rtree</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">zlib</span> <span class="kn">import</span> <span class="n">crc32</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hashlib</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">shapely.geometry</span> <span class="kn">import</span> <span class="n">Point</span><span class="p">,</span> <span class="n">LineString</span><span class="p">,</span> <span class="n">Polygon</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scipy.spatial</span> <span class="kn">import</span> <span class="n">cKDTree</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">scipy.stats</span> <span class="k">as</span> <span class="nn">st</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">shapely.geometry</span> <span class="kn">import</span> <span class="n">Point</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">haversine</span> <span class="kn">import</span> <span class="n">Unit</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">geopy.distance</span> <span class="kn">import</span> <span class="n">distance</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">warnings</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">warnings</span><span class="o">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>/Users/jnapolitano/venvs/finance/lib/python3.9/site-packages/geopandas/_compat.py:111: UserWarning: The Shapely GEOS version (3.10.2-CAPI-1.16.0) is incompatible with the GEOS version PyGEOS was compiled with (3.10.1-CAPI-1.16.0). Conversions between both will be slow.
  warnings.warn(
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"></code></pre></div>]]></content>
			<postid> d0547a51c0ff8492b0c1be4c8f830192</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Potential Carbon and Hydrogen Storage Facilities Near Import/Export Ports</title>
			<link>//localhost:1313/en/posts/wells-near-ports/</link>
			<pubDate>Fri, 06 May 2022 08:30:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/wells-near-ports/</guid>
			<description><![CDATA[Identifying potential carbon and hydrogen storage facilities near lng ports.]]></description>
			<content type="html"><![CDATA[<h1 id="potential-carbon-storage-facilities-near-importexport-ports">Potential Carbon Storage Facilities Near Import/Export Ports</h1>
<h2 id="import-and-procedural-functions">Import and Procedural Functions</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">folium</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">contextily</span> <span class="k">as</span> <span class="nn">cx</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">rtree</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">zlib</span> <span class="kn">import</span> <span class="n">crc32</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hashlib</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">shapely.geometry</span> <span class="kn">import</span> <span class="n">Point</span><span class="p">,</span> <span class="n">LineString</span><span class="p">,</span> <span class="n">Polygon</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scipy.spatial</span> <span class="kn">import</span> <span class="n">cKDTree</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">shapely.geometry</span> <span class="kn">import</span> <span class="n">Point</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">haversine</span> <span class="kn">import</span> <span class="n">Unit</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">geopy.distance</span> <span class="kn">import</span> <span class="n">distance</span>
</span></span></code></pre></div><h2 id="restrictions">Restrictions</h2>
<ul>
<li>Must be near a pipeline terminal</li>
<li>Must be Near a petrolium Port</li>
</ul>
<h3 id="query-plan">Query Plan</h3>
<p>Imports</p>
<ul>
<li>Import LNG terminal Data</li>
<li>Import well data</li>
</ul>
<p>Filtering</p>
<ul>
<li>for each well calculate nearest terminal</li>
<li>for each well calculate distance from nearest terminal</li>
<li>eliminate wells further than 15 miles from a terminal</li>
</ul>
<h2 id="data-frame-import">Data Frame Import</h2>
<h3 id="wells-dataframe">Wells DataFrame</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## Importing our DataFrames</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">gisfilepath</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/data/energy/non-active-wells.geojson&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">wells_df</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="n">gisfilepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">wells_df</span> <span class="o">=</span> <span class="n">wells_df</span><span class="o">.</span><span class="n">to_crs</span><span class="p">(</span><span class="n">epsg</span><span class="o">=</span><span class="mi">3857</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="terminal-dataframe">Terminal DataFrame</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## Importing our DataFrames</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">gisfilepath</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/data/energy/Liquified_Natural_Gas_Import_Exports_and_Terminals.geojson&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">terminal_df</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="n">gisfilepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">terminal_df</span> <span class="o">=</span> <span class="n">terminal_df</span><span class="o">.</span><span class="n">to_crs</span><span class="p">(</span><span class="n">epsg</span><span class="o">=</span><span class="mi">3857</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="eliminating-suspended-terminal-from-the-dataframe">Eliminating SUSPENDED Terminal from the DataFrame</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">terminal_df</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">terminal_df</span><span class="p">[</span><span class="n">terminal_df</span><span class="p">[</span><span class="s1">&#39;STATUS&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;SUSPENDED&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">terminal_df</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;NAME&#34;</span><span class="p">:</span> <span class="s2">&#34;TERMINAL_NAME&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">terminal_df</span><span class="p">[</span><span class="s1">&#39;TERMINAL_GEO&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">terminal_df</span><span class="p">[</span><span class="s1">&#39;geometry&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">terminal_df</span><span class="o">.</span><span class="n">columns</span>
</span></span></code></pre></div><pre><code>Index(['OBJECTID', 'TERMID', 'NAME', 'ADDRESS', 'CITY', 'STATE', 'ZIP', 'ZIP4',
       'TELEPHONE', 'TYPE', 'STATUS', 'POPULATION', 'COUNTY', 'COUNTYFIPS',
       'COUNTRY', 'LATITUDE', 'LONGITUDE', 'NAICS_CODE', 'NAICS_DESC',
       'SOURCE', 'SOURCEDATE', 'VAL_METHOD', 'VAL_DATE', 'WEBSITE', 'EPA_ID',
       'ALT_NAME', 'OWNER', 'POSREL', 'JRSDCTN', 'CONTYPE', 'IE_PORT',
       'BERTHS', 'STORAGE', 'STORCAP', 'CURRENTCAP', 'APPCAP', 'OPYEAR',
       'IMPEXPCTRY', 'VOLUME', 'PRICE', 'geometry', 'TERMINAL_GEO'],
      dtype='object')
</code></pre>
<h3 id="plotting-terminal-by-type">Plotting Terminal by TYPE</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">terminal_map</span> <span class="o">=</span><span class="n">terminal_df</span><span class="o">.</span><span class="n">explore</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">column</span><span class="o">=</span><span class="s2">&#34;TYPE&#34;</span><span class="p">,</span> <span class="c1"># make choropleth based on &#34;PORT_NAME&#34; column</span>
</span></span><span class="line"><span class="cl">     <span class="n">popup</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="c1"># show all values in popup (on click)</span>
</span></span><span class="line"><span class="cl">     <span class="n">tiles</span><span class="o">=</span><span class="s2">&#34;Stamen Terrain&#34;</span><span class="p">,</span> <span class="c1"># use &#34;CartoDB positron&#34; tiles</span>
</span></span><span class="line"><span class="cl">     <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;Set1&#39;</span><span class="p">,</span> <span class="c1"># use &#34;Set1&#34; matplotlib colormap</span>
</span></span><span class="line"><span class="cl">     <span class="c1">#style_kwds=dict(color=&#34;black&#34;),</span>
</span></span><span class="line"><span class="cl">     <span class="n">marker_kwds</span><span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">radius</span><span class="o">=</span><span class="mi">6</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">     <span class="c1">#tooltip=[&#39;NAICS_DESC&#39;,&#39;REGION&#39;, &#39;COMMODITY&#39; ],</span>
</span></span><span class="line"><span class="cl">     <span class="n">legend</span> <span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="c1"># use black outline)</span>
</span></span><span class="line"><span class="cl">     <span class="n">categorical</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">terminal_map</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<h3 id="terminal-impressions">Terminal Impressions</h3>
<p>According to the data there is not an export nor import location on The Western Side of the United States.</p>
<p>East Asian import or carbon capture export demands could justfity port development.  Another study must be conducted.</p>
<h2 id="filtering-wells-by-terminal-distance-in-scipy">Filtering Wells by Terminal Distance in Scipy</h2>
<h3 id="edit">Edit</h3>
<p>This method does not accuraletly calculate distance.  The algorith used below calculates distance on a euclidan plane.  In order to calculate a correct answer we must account for sphericity.</p>
<p>I include the code below as reference and a learning opportunity</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">ckdnearest</span><span class="p">(</span><span class="n">gdA</span><span class="p">,</span> <span class="n">gdB</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">nA</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">gdA</span><span class="o">.</span><span class="n">geometry</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">y</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">    <span class="n">nB</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">gdB</span><span class="o">.</span><span class="n">geometry</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">y</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">    <span class="n">btree</span> <span class="o">=</span> <span class="n">cKDTree</span><span class="p">(</span><span class="n">nB</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">dist</span><span class="p">,</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">btree</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">nA</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">gdB_nearest</span> <span class="o">=</span> <span class="n">gdB</span><span class="o">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="s2">&#34;geometry&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">gdf</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="n">gdA</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">gdB_nearest</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">(</span><span class="n">dist</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;dist&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span> 
</span></span><span class="line"><span class="cl">        <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">gdf</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="n">ckdnearest</span><span class="p">(</span><span class="n">wells_df</span><span class="p">,</span> <span class="n">terminal_df</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">c</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">nearest_wells_df</span><span class="o">=</span> <span class="n">wells_df</span><span class="o">.</span><span class="n">sjoin_nearest</span><span class="p">(</span><span class="n">terminal_df</span><span class="p">,</span> <span class="n">distance_col</span><span class="o">=</span><span class="s2">&#34;distance_euclidian&#34;</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">nearest_wells_df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="calculating-distance-in-kilometers-from-importexport-terminal">Calculating Distance in Kilometers from Import/Export Terminal</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#df.geopy.distance.distance(coords_1, coords_2).km</span>
</span></span><span class="line"><span class="cl"><span class="c1">#df.apply(lambda row: distance(row[&#39;point&#39;], row[&#39;point_next&#39;]).km if row[&#39;point_next&#39;] is not None else float(&#39;nan&#39;), axis=1)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Thanks to https://stackoverflow.com/questions/55909305/using-geopy-in-a-dataframe-to-get-distances</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nearest_wells_df</span><span class="p">[</span><span class="s1">&#39;true_distance_km&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">nearest_wells_df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">row</span><span class="p">:</span> <span class="n">distance</span><span class="p">((</span><span class="n">row</span><span class="p">[</span><span class="s1">&#39;LATITUDE_left&#39;</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="s1">&#39;LONGITUDE_left&#39;</span><span class="p">]),</span> <span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s1">&#39;LATITUDE_right&#39;</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="s1">&#39;LONGITUDE_right&#39;</span><span class="p">]))</span><span class="o">.</span><span class="n">km</span> <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="s1">&#39;geometry&#39;</span><span class="p">]</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="k">else</span> <span class="nb">float</span><span class="p">(</span><span class="s1">&#39;nan&#39;</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">nearest_wells_df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="filtering-wells-within-50-km-of-a-terminal">Filtering Wells within 50 KM of a Terminal</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">filtered_wells</span> <span class="o">=</span> <span class="n">nearest_wells_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">nearest_wells_df</span><span class="p">[</span><span class="s1">&#39;true_distance_km&#39;</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">filtered_wells</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="map-of-wells-within-50-km-of-an-importexport-terminal-by-type">Map of Wells within 50 km of an Import/Export Terminal by Type</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">filtered_wells</span><span class="o">.</span><span class="n">explore</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">column</span><span class="o">=</span><span class="s2">&#34;STATUS_left&#34;</span><span class="p">,</span> <span class="c1"># make choropleth based on &#34;PORT_NAME&#34; column</span>
</span></span><span class="line"><span class="cl">     <span class="n">popup</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="c1"># show all values in popup (on click)</span>
</span></span><span class="line"><span class="cl">     <span class="n">tiles</span><span class="o">=</span><span class="s2">&#34;Stamen Terrain&#34;</span><span class="p">,</span> <span class="c1"># use &#34;CartoDB positron&#34; tiles</span>
</span></span><span class="line"><span class="cl">     <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;Set1&#39;</span><span class="p">,</span> <span class="c1"># use &#34;Set1&#34; matplotlib colormap</span>
</span></span><span class="line"><span class="cl">     <span class="c1">#style_kwds=dict(color=&#34;black&#34;),</span>
</span></span><span class="line"><span class="cl">     <span class="n">marker_kwds</span><span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">radius</span><span class="o">=</span><span class="mi">6</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">     <span class="c1">#tooltip=[&#39;NAICS_DESC&#39;,&#39;REGION&#39;, &#39;COMMODITY&#39; ],</span>
</span></span><span class="line"><span class="cl">     <span class="n">legend</span> <span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="c1"># use black outline)</span>
</span></span><span class="line"><span class="cl">     <span class="n">categorical</span><span class="o">=</span><span class="kc">True</span><span class="p">,)</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"></code></pre></div>]]></content>
			<postid> 8c061e5781494b7cf69ce174f8d317bb</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>Potential Carbon and Hydrogen Storage Wells Near Pipelines</title>
			<link>//localhost:1313/en/posts/wells-near-pipelines/</link>
			<pubDate>Fri, 06 May 2022 05:30:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/wells-near-pipelines/</guid>
			<description><![CDATA[Identifying potential carbon and hydrogen storage facilities from spent well data.]]></description>
			<content type="html"><![CDATA[<h1 id="potential-carbon-storage-wells-near-pipelines">Potential Carbon Storage Wells Near Pipelines</h1>
<h2 id="import-and-procedural-functions">Import and Procedural Functions</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="nn">gpd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">folium</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">contextily</span> <span class="k">as</span> <span class="nn">cx</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">rtree</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">zlib</span> <span class="kn">import</span> <span class="n">crc32</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hashlib</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">shapely.geometry</span> <span class="kn">import</span> <span class="n">Point</span><span class="p">,</span> <span class="n">LineString</span><span class="p">,</span> <span class="n">Polygon</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scipy.spatial</span> <span class="kn">import</span> <span class="n">cKDTree</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">shapely.geometry</span> <span class="kn">import</span> <span class="n">Point</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">haversine</span> <span class="kn">import</span> <span class="n">Unit</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">geopy.distance</span> <span class="kn">import</span> <span class="n">distance</span>
</span></span></code></pre></div><h2 id="query-plan">Query Plan</h2>
<h3 id="restrictions">Restrictions</h3>
<ul>
<li>Must be near a pipeline terminal</li>
</ul>
<h3 id="imports">Imports</h3>
<ul>
<li>Pipeline Data</li>
<li>Well Data</li>
</ul>
<h3 id="filtering">Filtering</h3>
<ul>
<li>
<p>For each well calculate nearest pipeline</p>
</li>
<li>
<p>For each well calculate geographic distance from pipeline</p>
</li>
<li>
<p>eliminate wells further than 2 km from a pipeline</p>
</li>
</ul>
<h2 id="data-frame-import">Data Frame Import</h2>
<h3 id="wells-dataframe">Wells Dataframe</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## Importing our DataFrames</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">gisfilepath</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/data/energy/non-active-wells.geojson&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">wells_df</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="n">gisfilepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">wells_df</span> <span class="o">=</span> <span class="n">wells_df</span><span class="o">.</span><span class="n">to_crs</span><span class="p">(</span><span class="n">epsg</span><span class="o">=</span><span class="mi">3857</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">wells_df</span><span class="o">.</span><span class="n">columns</span>
</span></span></code></pre></div><pre><code>Index(['index', 'OBJECTID', 'ID', 'NAME', 'STATE', 'TYPE', 'STATUS', 'COUNTY',
       'COUNTYFIPS', 'COUNTRY', 'LATITUDE', 'LONGITUDE', 'NAICS_CODE',
       'NAICS_DESC', 'SOURCE', 'SOURCEDATE', 'VAL_METHOD', 'VAL_DATE',
       'WEBSITE', 'WELLIDNO', 'API', 'PERMITNO', 'OPERATOR', 'OPERATORID',
       'PRODTYPE', 'COORDTYPE', 'SURF_LAT', 'SURF_LONG', 'BOT_LAT', 'BOT_LONG',
       'POSREL', 'FIELD', 'COMPDATE', 'TOTDEPTH', 'STAUTS_CAT', 'geometry'],
      dtype='object')
</code></pre>
<h3 id="pipeline-dataframe">Pipeline DataFrame</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## Importing Pipeline Dataframe</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">gisfilepath</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/data/energy/Natural_Gas_Pipelines.geojson&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pipeline_df</span> <span class="o">=</span> <span class="n">gpd</span><span class="o">.</span><span class="n">read_file</span><span class="p">(</span><span class="n">gisfilepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pipeline_df</span> <span class="o">=</span> <span class="n">pipeline_df</span><span class="o">.</span><span class="n">to_crs</span><span class="p">(</span><span class="n">epsg</span><span class="o">=</span><span class="mi">3857</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="removing-gathering-pipes-from-the-data">Removing Gathering Pipes from the Data</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pipeline_df</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">pipeline_df</span><span class="p">[</span><span class="n">pipeline_df</span><span class="p">[</span><span class="s1">&#39;TYPEPIPE&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;Gathering&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">inplace</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="adding-pipegeometry-column">Adding PipeGeometry Column</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pipeline_df</span><span class="p">[</span><span class="s1">&#39;PipeGeometry&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pipeline_df</span><span class="p">[</span><span class="s1">&#39;geometry&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pipeline_df</span><span class="o">.</span><span class="n">columns</span>
</span></span></code></pre></div><pre><code>Index(['FID', 'TYPEPIPE', 'Operator', 'Shape_Leng', 'Shape__Length',
       'geometry', 'PipeGeometry'],
      dtype='object')
</code></pre>
<h2 id="joining-well-and-pipeline-data">Joining Well and Pipeline Data</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">nearest_wells_df</span><span class="o">=</span> <span class="n">wells_df</span><span class="o">.</span><span class="n">sjoin_nearest</span><span class="p">(</span><span class="n">pipeline_df</span><span class="p">,</span> <span class="n">how</span> <span class="o">=</span> <span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="n">distance_col</span><span class="o">=</span><span class="s2">&#34;distance_euclidian&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nearest_wells_df</span><span class="o">.</span><span class="n">columns</span>
</span></span></code></pre></div><pre><code>Index(['index', 'OBJECTID', 'ID', 'NAME', 'STATE', 'TYPE', 'STATUS', 'COUNTY',
       'COUNTYFIPS', 'COUNTRY', 'LATITUDE', 'LONGITUDE', 'NAICS_CODE',
       'NAICS_DESC', 'SOURCE', 'SOURCEDATE', 'VAL_METHOD', 'VAL_DATE',
       'WEBSITE', 'WELLIDNO', 'API', 'PERMITNO', 'OPERATOR', 'OPERATORID',
       'PRODTYPE', 'COORDTYPE', 'SURF_LAT', 'SURF_LONG', 'BOT_LAT', 'BOT_LONG',
       'POSREL', 'FIELD', 'COMPDATE', 'TOTDEPTH', 'STAUTS_CAT', 'geometry',
       'index_right', 'FID', 'TYPEPIPE', 'Operator', 'Shape_Leng',
       'Shape__Length', 'PipeGeometry', 'distance_euclidian'],
      dtype='object')
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">nearest_wells_df</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h3 id="adding-a-distance-km-column">Adding a Distance Km Column</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">nearest_wells_df</span><span class="p">[</span><span class="s1">&#39;distance_km&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">nearest_wells_df</span><span class="o">.</span><span class="n">distance_euclidian</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">filtered_wells</span> <span class="o">=</span> <span class="n">nearest_wells_df</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="n">nearest_wells_df</span><span class="p">[</span><span class="s1">&#39;distance_km&#39;</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">filtered_wells</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
<p><!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<h2 id="wells-base-map">Wells Base Map</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">well_map_ax</span> <span class="o">=</span> <span class="n">filtered_wells</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="s1">&#39;k&#39;</span><span class="p">,</span> <span class="n">markersize</span> <span class="o">=</span> <span class="mf">.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cx</span><span class="o">.</span><span class="n">add_basemap</span><span class="p">(</span><span class="n">well_map_ax</span><span class="p">,</span> <span class="n">zoom</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#filtered_wells.plot()</span>
</span></span></code></pre></div><p><img src="wells_near_pipelines_files/wells_near_pipelines_23_0.png" alt="png"></p>
<h2 id="pipelines-base-map">Pipelines Base Map</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pipeline_map</span> <span class="o">=</span> <span class="n">pipeline_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">15</span><span class="p">),</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,)</span>
</span></span><span class="line"><span class="cl"><span class="n">cx</span><span class="o">.</span><span class="n">add_basemap</span><span class="p">(</span><span class="n">pipeline_map</span><span class="p">,</span> <span class="n">zoom</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
</span></span></code></pre></div><p><img src="wells_near_pipelines_files/wells_near_pipelines_25_0.png" alt="png"></p>
<h2 id="pipeline-and-potential-carbon-storage-well-map">Pipeline and Potential Carbon Storage Well Map</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">combined_map</span> <span class="o">=</span> <span class="n">wells_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ax</span> <span class="o">=</span> <span class="n">pipeline_map</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">),</span> <span class="n">edgecolor</span><span class="o">=</span><span class="s1">&#39;k&#39;</span><span class="p">,</span> <span class="n">markersize</span> <span class="o">=</span> <span class="mf">.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#cx.add_basemap(well_map, zoom=6)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#plt.show()</span>
</span></span></code></pre></div><pre><code>&lt;Figure size 432x288 with 0 Axes&gt;
</code></pre>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">combined_map</span><span class="o">.</span><span class="n">figure</span>
</span></span></code></pre></div><p><img src="wells_near_pipelines_files/wells_near_pipelines_28_0.png" alt="png"></p>
]]></content>
			<postid> f281eaf448d0735ce644be2acbbd7451</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>EuroZone Gas Imports and Exports</title>
			<link>//localhost:1313/en/posts/european-gas-imports/</link>
			<pubDate>Thu, 05 May 2022 00:00:00 +0000</pubDate>
			<guid>//localhost:1313/en/posts/european-gas-imports/</guid>
			<description><![CDATA[EuroZone Gas Imports and Exports.]]></description>
			<content type="html"><![CDATA[<h1 id="eurozone-gas-imports-and-exports">EuroZone Gas Imports and Exports</h1>
<h2 id="import-and-procedural-functions">Import and Procedural Functions</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">geopy.distance</span> <span class="kn">import</span> <span class="n">distance</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">IPython.core.display</span> <span class="kn">import</span> <span class="n">HTML</span>
</span></span><span class="line"><span class="cl"><span class="c1">#import IPython.core.display as display</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hugo_safe_render</span><span class="p">(</span><span class="n">styler</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34; Removes spacing from HTML output of df.style to prevent rendering issues in Hugo. &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">raw_html</span> <span class="o">=</span> <span class="n">styler</span><span class="o">.</span><span class="n">to_html</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">clean_html</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">raw_html</span><span class="o">.</span><span class="n">split</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">HTML</span><span class="p">(</span><span class="n">clean_html</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">magnify</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="nb">dict</span><span class="p">(</span><span class="n">selector</span><span class="o">=</span><span class="s2">&#34;th&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                 <span class="n">props</span><span class="o">=</span><span class="p">[(</span><span class="s2">&#34;font-size&#34;</span><span class="p">,</span> <span class="s2">&#34;4pt&#34;</span><span class="p">)]),</span>
</span></span><span class="line"><span class="cl">            <span class="nb">dict</span><span class="p">(</span><span class="n">selector</span><span class="o">=</span><span class="s2">&#34;td&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                 <span class="n">props</span><span class="o">=</span><span class="p">[(</span><span class="s1">&#39;padding&#39;</span><span class="p">,</span> <span class="s2">&#34;0em 0em&#34;</span><span class="p">)]),</span>
</span></span><span class="line"><span class="cl">            <span class="nb">dict</span><span class="p">(</span><span class="n">selector</span><span class="o">=</span><span class="s2">&#34;th:hover&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                 <span class="n">props</span><span class="o">=</span><span class="p">[(</span><span class="s2">&#34;font-size&#34;</span><span class="p">,</span> <span class="s2">&#34;12pt&#34;</span><span class="p">)]),</span>
</span></span><span class="line"><span class="cl">            <span class="nb">dict</span><span class="p">(</span><span class="n">selector</span><span class="o">=</span><span class="s2">&#34;tr:hover td:hover&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                 <span class="n">props</span><span class="o">=</span><span class="p">[(</span><span class="s1">&#39;max-width&#39;</span><span class="p">,</span> <span class="s1">&#39;200px&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                        <span class="p">(</span><span class="s1">&#39;font-size&#39;</span><span class="p">,</span> <span class="s1">&#39;12pt&#39;</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><h2 id="query-strategy">Query Strategy</h2>
<h3 id="imports">Imports</h3>
<p>TO many to list&hellip; I&rsquo;ll ad them as I go below</p>
<h2 id="glossary">Glossary</h2>
<h3 id="units">Units</h3>
<p>Data should be reported in Terajoules (TJ) on the basis of Gross calorific values (GCV) and in million
cubic metres (at 15oC and 760 mm Hg, i.e. Standard Conditions)</p>
<h4 id="source">Source</h4>
<p><a href="https://ec.europa.eu/eurostat/documents/38154/10015688/Gas-Instructions-2018.pdf/2c78ed79-88fe-47ce-91f6-6069081755fb">https://ec.europa.eu/eurostat/documents/38154/10015688/Gas-Instructions-2018.pdf/2c78ed79-88fe-47ce-91f6-6069081755fb</a></p>
<h2 id="data">Data</h2>
<h2 id="converting-all-tsv-to-csv-documents">Converting all tsv to csv documents</h2>
<h3 id="building-tsv-file-list">Building tsv file list</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">glob</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># assign directory</span>
</span></span><span class="line"><span class="cl"><span class="n">directory</span> <span class="o">=</span> <span class="s1">&#39;/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng&#39;</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">tsv_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">glob</span><span class="o">.</span><span class="n">iglob</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">directory</span><span class="si">}</span><span class="s1">/*.tsv&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">tsv_list</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>['/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/imports_montth.tsv', '/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/ng_imports.tsv', '/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/ng_exports.tsv', '/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/supply_transformation_consumption.tsv', '/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/non_house_consumption.tsv', '/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/ng_stocks.tsv', '/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/gas_prices.tsv', '/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/house_hold_consumption.tsv', '/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/exports_month.tsv', '/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/transport_costs.tsv']
</code></pre>
<h3 id="converting-to-csv">Converting to CSV</h3>
<p>The columns of this data are ugly. Some are in csv format and others are in tab.</p>
<p>I&rsquo;ll convert the entire document to csv to simplify our work.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">tsv_file</span> <span class="ow">in</span> <span class="n">tsv_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">filepath</span> <span class="o">=</span> <span class="n">tsv_file</span>
</span></span><span class="line"><span class="cl">  <span class="n">outfile</span> <span class="o">=</span> <span class="n">filepath</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;tsv&#39;</span><span class="p">,</span><span class="s1">&#39;csv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">  <span class="c1"># reading given tsv file </span>
</span></span><span class="line"><span class="cl">  <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">myfile</span><span class="p">:</span>   
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">outfile</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csv_file</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">myfile</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">          
</span></span><span class="line"><span class="cl">        <span class="c1"># Replace every tab with comma </span>
</span></span><span class="line"><span class="cl">        <span class="n">fileContent</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\t</span><span class="s2">&#34;</span><span class="p">,</span> <span class="s2">&#34;,&#34;</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">          
</span></span><span class="line"><span class="cl">        <span class="c1"># Writing into csv file </span>
</span></span><span class="line"><span class="cl">        <span class="n">csv_file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">fileContent</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">  <span class="c1"># output </span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="n">outfile</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/imports_montth.csv
/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/ng_imports.csv
/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/ng_exports.csv
/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/supply_transformation_consumption.csv
/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/non_house_consumption.csv
/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/ng_stocks.csv
/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/gas_prices.csv
/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/house_hold_consumption.csv
/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/exports_month.csv
/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/transport_costs.csv
</code></pre>
<h2 id="natural-gas-imports-data">Natural Gas Imports Data</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## Importing our DataFrames</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">filepath</span> <span class="o">=</span> <span class="s2">&#34;/Users/jnapolitano/Projects/data/EuropeanEnergyData/ng/ng_imports.csv&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## Reading the CSV Columns</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="n">skipinitialspace</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">low_memory</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Repacing NA&#39;s</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">to_replace</span><span class="o">=</span><span class="s1">&#39;: &#39;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#coverting to float</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1990 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1990 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1991 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1991 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1992 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1992 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1993 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1993 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1994 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1994 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1995 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1995 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1996 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1996 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1997 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1997 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1998 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1998 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1999 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;1999 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2000 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2000 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2001 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2001 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2002 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2002 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2003 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2003 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2004 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2004 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2005 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2005 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2006 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2006 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2007 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2007 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2008 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2008 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2009 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2009 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2010 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2010 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2011 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2011 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2012 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2012 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2013 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2013 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2014 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2014 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2015 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2015 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2016 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2016 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2017 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2017 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2018 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2018 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2019 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2019 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2020 &#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="p">[</span><span class="s1">&#39;2020 &#39;</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## This data set has spaces at the end of the years... Be aware of this when trying to findd keys</span>
</span></span></code></pre></div><pre><code>Index(['siec', 'partner', 'unit', 'geo', '2020 ', '2019 ', '2018 ', '2017 ',
       '2016 ', '2015 ', '2014 ', '2013 ', '2012 ', '2011 ', '2010 ', '2009 ',
       '2008 ', '2007 ', '2006 ', '2005 ', '2004 ', '2003 ', '2002 ', '2001 ',
       '2000 ', '1999 ', '1998 ', '1997 ', '1996 ', '1995 ', '1994 ', '1993 ',
       '1992 ', '1991 ', '1990 '],
      dtype='object')
</code></pre>
<h3 id="natural-gas-imports-descriptive-statistics">Natural Gas Imports Descriptive Statistics</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#ng_imports_df.describe()</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s1">&#39;Natural Gas Imports Descriptive Statistics&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">set_sticky</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">set_properties</span><span class="p">(</span><span class="o">**</span><span class="p">{</span><span class="s1">&#39;max-width&#39;</span><span class="p">:</span> <span class="s1">&#39;80px&#39;</span><span class="p">,</span> <span class="s1">&#39;font-size&#39;</span><span class="p">:</span> <span class="s1">&#39;1pt&#39;</span><span class="p">})</span><span class="o">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s2">&#34;Hover to magnify&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">precision</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">set_table_styles</span><span class="p">(</span><span class="n">magnify</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="c1">#bigdf.style.set_sticky(axis=&#34;index&#34;)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#.describe().style</span>
</span></span><span class="line"><span class="cl"><span class="c1">#create table</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#bigdf.style</span>
</span></span><span class="line"><span class="cl"><span class="c1">#    .set_properties(**{&#39;max-width&#39;: &#39;80px&#39;, &#39;font-size&#39;: &#39;1pt&#39;})\</span>
</span></span><span class="line"><span class="cl"><span class="c1">#    .set_caption(&#34;Hover to magnify&#34;)\</span>
</span></span><span class="line"><span class="cl"><span class="c1">#    .format(precision=2)\</span>
</span></span><span class="line"><span class="cl"><span class="c1">##    .set_table_styles(magnify())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#define figure and axes</span>
</span></span><span class="line"><span class="cl"><span class="c1">#ng_imports_df.style.set_caption(&#34;testing&#34;)</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div><h3 id="replace-0s-with-numpy-nan">Replace 0&rsquo;s with Numpy NAN</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">nan</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="remove-nan-rows-for-the-dataframe">Remove NAN Rows for the dataframe</h3>
<p>I remove rows where all of the rows are 0 to reduce the size of the dataframe for analysis.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">## There are 30 years of data in the set. If there are 30 columns per row with nan values that row will be dropped.</span>
</span></span><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="o">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">thresh</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#df.dropna(thresh=2)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">ng_imports_df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s1">&#39;Natural Gas Imports Descriptive Statistics&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">set_sticky</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">hugo_safe_render</span><span class="p">)</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h3 id="grouping-totals-by-geostate">Grouping Totals by Geo/State</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">geo_imports_df</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;geo&#39;</span><span class="p">,</span> <span class="s1">&#39;partner&#39;</span><span class="p">,</span><span class="s1">&#39;unit&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">geo_imports_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s1">&#39;Grouped By State, Partern and Unit&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">hugo_safe_render</span><span class="p">)</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>With the tables compiled we can now look more in depthly at the imports of natural gas in europe.</p>
<h2 id="state-code-reference-sheet-source">State Code Reference Sheet Source</h2>
<p><a href="https://ec.europa.eu/eurostat/statistics-explained/index.php?title=Glossary:Country_codes">https://ec.europa.eu/eurostat/statistics-explained/index.php?title=Glossary:Country_codes</a></p>
<h3 id="german-totals">German Totals</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">german_totals_df</span> <span class="o">=</span> <span class="n">geo_imports_df</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s1">&#39;geo==&#34;DE&#34;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#geo_imports_df.loc[pd.IndexSlice[:,&#39;DE&#39;],:]</span>
</span></span></code></pre></div><p>German Totals Bar Chart</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">german_totals_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">15</span><span class="p">),</span> <span class="n">kind</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:xlabel='geo,partner,unit'&gt;
</code></pre>
<p><img src="european-gas-imports_files/european-gas-imports_31_1.png" alt="png"></p>
<h3 id="german-totals-line">German Totals Line</h3>
<p>Only including long term partners</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">german_totals_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">15</span><span class="p">),</span> <span class="n">kind</span> <span class="o">=</span> <span class="s1">&#39;line&#39;</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:xlabel='geo,partner,unit'&gt;
</code></pre>
<p><img src="european-gas-imports_files/european-gas-imports_33_1.png" alt="png"></p>
<h3 id="french-totals">French Totals</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">french_totals_df</span><span class="o">=</span><span class="n">geo_imports_df</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s1">&#39;geo==&#34;FR&#34;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">french_totals_df</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s1">&#39;French Totals Data&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">hugo_safe_render</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#geo_imports_df.loc[pd.IndexSlice[:,&#39;DE&#39;],:]</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h3 id="french-totals-bar-chart">French Totals Bar Chart</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">french_totals_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">15</span><span class="p">),</span> <span class="n">kind</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:xlabel='geo,partner,unit'&gt;
</code></pre>
<p><img src="european-gas-imports_files/european-gas-imports_37_1.png" alt="png"></p>
<h3 id="french-totals-line">French Totals Line</h3>
<p>Only long term partners</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">french_totals_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">15</span><span class="p">),</span> <span class="n">kind</span> <span class="o">=</span> <span class="s1">&#39;line&#39;</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:xlabel='geo,partner,unit'&gt;
</code></pre>
<p><img src="european-gas-imports_files/european-gas-imports_39_1.png" alt="png"></p>
<h2 id="max-importers-per-year">Max Importers Per Year</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">max_imports_df</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;geo&#39;</span><span class="p">,</span> <span class="s1">&#39;partner&#39;</span><span class="p">,</span><span class="s1">&#39;unit&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">max</span><span class="p">()</span>
</span></span></code></pre></div><h3 id="french-maximums">French Maximums</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">french_max_df</span><span class="o">=</span><span class="n">max_imports_df</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s1">&#39;geo==&#34;FR&#34;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">french_max_df</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s1">&#39;French Maximums&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">hugo_safe_render</span><span class="p">)</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h3 id="french-max-bar-chart">French Max Bar Chart</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">french_max_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">15</span><span class="p">),</span><span class="n">kind</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:xlabel='geo,partner,unit'&gt;
</code></pre>
<p><img src="european-gas-imports_files/european-gas-imports_45_1.png" alt="png"></p>
<h3 id="french-max-line">French Max Line</h3>
<p>** Only long term partners</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">french_max_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">15</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:xlabel='geo,partner,unit'&gt;
</code></pre>
<p><img src="european-gas-imports_files/european-gas-imports_47_1.png" alt="png"></p>
<h2 id="german-maximums">German Maximums</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">german_max_df</span> <span class="o">=</span> <span class="n">max_imports_df</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s1">&#39;geo==&#34;DE&#34;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">german_max_df</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s1">&#39;German Maximums&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">hugo_safe_render</span><span class="p">)</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h3 id="german-max-bar-chart">German Max Bar Chart</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">german_max_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">15</span><span class="p">),</span><span class="n">kind</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">)</span>
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:xlabel='geo,partner,unit'&gt;
</code></pre>
<p><img src="european-gas-imports_files/european-gas-imports_51_1.png" alt="png"></p>
<h3 id="german-max-line">German Max Line</h3>
<p>** Only long term partners</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">german_max_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">legend</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">15</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:xlabel='geo,partner,unit'&gt;
</code></pre>
<p><img src="european-gas-imports_files/european-gas-imports_53_1.png" alt="png"></p>
<h2 id="gas-partners">Gas Partners</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">partners_sum_df</span> <span class="o">=</span> <span class="n">ng_imports_df</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;partner&#39;</span><span class="p">,</span> <span class="s1">&#39;geo&#39;</span><span class="p">,</span><span class="s1">&#39;unit&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">partners_sum_df</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s1">&#39;Partner_Totals&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">hugo_safe_render</span><span class="p">)</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h3 id="russian-partners">Russian Partners</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">russian_partners_sum_df</span><span class="o">=</span> <span class="n">partners_sum_df</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s1">&#39;partner==&#34;RU&#34;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">russian_partners_sum_df</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s1">&#39;Russian Partners Data&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">hugo_safe_render</span><span class="p">)</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h3 id="russian-partner-bar-plot">Russian Partner Bar Plot</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">russian_partners_sum_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:xlabel='partner,geo,unit'&gt;
</code></pre>
<p><img src="european-gas-imports_files/european-gas-imports_60_1.png" alt="png"></p>
<h3 id="russian-partner-line-graph">Russian Partner Line Graph</h3>
<p>Only will include partners that hvae traded for 30 years.  This is a good indicator of long term fossil fuel dependency.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">russian_partners_sum_df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s1">&#39;line&#39;</span><span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
</span></span></code></pre></div><pre><code>&lt;AxesSubplot:xlabel='partner,geo,unit'&gt;
</code></pre>
<p><img src="european-gas-imports_files/european-gas-imports_62_1.png" alt="png"></p>
]]></content>
			<postid> 699a654ac2ef0c47b42912e400b333ee</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
		<item>
			<title>The World Trade Organization, Governments, and International Trade</title>
			<link>//localhost:1313/en/posts/project-evolution-of-ngos/</link>
			<pubDate>Wed, 04 May 2022 14:40:32 +0000</pubDate>
			<guid>//localhost:1313/en/posts/project-evolution-of-ngos/</guid>
			<description><![CDATA[Integrate JSON data from a rest API into your Neo4j Stack]]></description>
			<content type="html"><![CDATA[<h1 id="the-world-trade-organization-governments-and-international-trade">The World Trade Organization, Governments, and International Trade</h1>
<h2 id="intro">Intro</h2>
<p>International Organizations are vital to the operation of International
politics. They regulate behaviors, facilitate communication, and promote
cooperation between states. The process by which International
Organizations come into being is well discussed in the literature,
however, not equally well debated is the process by which International
Organizations come to modify their operating procedure. Or in other
words, when the member states renegotiate the terms of their membership.</p>
<h2 id="the-question">The Question</h2>
<p>International Organizations are vital to the operation of International
politics. They regulate behaviors, facilitate communication, and promote
cooperation between states. The process by which International
Organizations come into being is well discussed in the literature,
however, not equally well debated is the process by which International
Organizations come to modify their operating procedure. Or in other
words, when the member states renegotiate the terms of their membership.</p>
<h2 id="literature-review">Literature Review</h2>
<p>Kenneth Waltz argues that domestic politics is irrelevant to the
calculus of states. He argues primarily that states act according to the
actions of other states. The bureaucracy, the public, and the legal
systems are all factors not considered in his framework. He does however
take the position that &ldquo;politics determines economics (Waltz 2010)&rdquo;, but
does not further his sociological analyses. In other words, he accepts
that the behavior of states is derive from the socially constructed
political process, but does not analyze human systems to other than the
state when attempting to predict state behavior. (Waltz 2010)</p>
<p>Robert Keohane builds upon Waltz. He takes the assumption that there are
inherent common interests between states seeking wealth and power, and
the maximization of absolute gains. States are then presumed to possess
preferences dependent on the division of resources and information
within the international system. To accomplish goals and to minimize
insecurity states then cooperate by forming international regimes
defined to be, &ldquo;sets of implicit or explicit principles, norms, rules,
and decision-making procedures around which actor&rsquo;s expectations
converge in a given area of international relations&rdquo; (Keohane, 2005, p
57). In bargaining for international trade deals, states seek to
maximize power and wealth for all states involved in the process.
(Keohane, 2005)</p>
<p>Fearon also adopts this position, however also assumes that states seek
when bargaining the maximization of gains across time. Therefore the
logic of the iterated prisoners dilemma is used to explain cooperation.
Because of the shadow of the future, or the expectations of further
interaction between states, the most rational choice to maximize gains
across time is for states to cooperate and to normalize rules in the
form of a legalistic International Organizations. (Fearon 1998)</p>
<p>Moravsic adopts a liberal stance, breaking from the neorealist, as well
as the regime theorist position that the factors of the international
system determines state behavior. He argues that the preferences of
powerful coalitions within states and the combined societal will to
carry them out are the basis for state behavior. His theory rests upon
three core assumptions. 1. State actors primarily define state
preference. 2. Domestic institutions and their structure exert influence
on the realization of coalition preferences. 3. &ldquo;The configuration of
interdependent state preferences determines state behavior (Moravsic,
1997).&rdquo; Thus, powerful social coalitions pressure representative
governments, controlling for regime type, to bargain on the behalf of
their interests in the international game. This &ldquo;two stage model&rdquo; of
state behavior accounts for both regime theorist and realist
assumptions.</p>
<p>Putnam further formulizes the process with the application of the
two-level game metaphor (1988). Level 1 is considered the domestic game
played by representative leaders to appease the domestic interests of
individuals, groups, and political coalitions. Level 2 is the
international game in which states compete to appease domestic
posturing. The win-set, the possible set of actions considered
acceptable to both the domestic coalition and the international
coalition, is dependent upon three major factors. 1. The distribution of
power, preferences, and possible coalitions among level 2 constituents.
2. The size of the representative body of political institutions. 3. The
strategies of the level 1 negotiators. The net effect of the three
limiting factors results in a win-set most probable to be ratified by
the domestic institutions. In other words, representatives bargaining on
behalf of powerful domestic coalitions must negotiate trade packages
acceptable to their domestic handlers. To apply principal-agent theory
to the intuition, the coalitions are the principle handling the
representative, their agent.</p>
<p>Dahl&rsquo;s work on bureaucratic politics and policy networks within the city
of New Haven Connecticut is the foundation on which I will build to
identify the process of preferences becoming the action of a state. The
basis of his argument rests on the fact that certain actors possess the
authority to draft and to pass legislation. The units are the most
important actors within the policy network. All of those actors that
depend on the actor with authority must lobby to institute policy. The
power of the policy network is defined by their expertise, their social
standing, and their ability to satisfy the interests of the person or
persons in positions of authority. Depending on the issue at hand and
those actors mobilized the policy network is highly dynamic. (Dahl,
2005); (Dahl, 1957)</p>
<p>Finnemore explores the ways in which international institutions acquire
a degree of autonomy and then may influence the states in the system by
creating rules and regulation to serve the interests of the organization
itself. Her work relies heavily on sociological analysis of human
systems. At both the international level and the domestic level of
politics Finnemore&rsquo;s work argues that as organizations are comprised of
social actors the legal and social rules by which the institutions
operate by serve primarily to benefit the preservation of the group.
However, their legitimacy is dependent upon &ldquo;external recognition&rdquo; by
those ruled over (Finnemore 1999). In order, then to retain authority
and legitimacy, the government bureaucracy must development effective
methods of socialization to convince the public of its legitimacy.
Scaled up to International Organizations bureaucratic legitimacy is
equally dependent upon external validity. But as states are the only
units capable of effectively providing that validity, International
Organizations are wholly dependent on powerful states to enforce norms.
(Finnemore 1999); (Finnemore 1993); Finnemore 2001)</p>
<h2 id="theoretical-intuition">Theoretical Intuition</h2>
<p>Ultimately one must put forth a state centric argument in order to best
explain the operation of International Organizations and the
International System more generally. This heart of this paper will rest
on the assumption that the state as an organization is most responsible
for influencing the character of the International System, and
ultimately the modification of International Organizations. It does not
however, assume the state to be a rational entity capable of responding
to external stimuli in a way that maximizes its gains. Rather, as all
states depend on domestic legitimacy in order to exist, states
ultimately operate in order to appease the demands of powerful domestic
constituencies, often without regard to the actions of other states.</p>
<p>The structure of state can be thought of as a pyramidal hierarchy built
upon increasing levels of authority within the state. The base of which
is comprised of all of those people without any employment by the state.
Moving up from there may be civil servants of the state bureaucracy.
Ultimately the pinnacle of which is the institution or institutions
responsible for the management of all lower levels. The most important
factor binding the structure is legitimacy as each level is inherently
dependent on the external recognition of its legitimacy by the levels
beneath it. For instance, the Executive of the United States is
essentially without power, except for that power which is recognized
Congress and by extension the general public. A similar argument example
could be drawn for the military, the police, or any other institution
within a state.</p>
<p>The actual codification of this social process is by definition the law
of a state. It may be thought of as the enforcement mechanism by which
the social structure is maintained and behavior standardized. Those
within the state with the authority to create law are those with the
power to socially reinforce their position of authority.</p>
\[1\]
<p> Thus it is
paramount that a leader once in a position of authority also has the
means of the state available to him in order to buttress his status.
Otherwise law will be ignored and the state will devolve into anarchy.</p>
<p>At the international the same processes occurs. Powerful states, be it
military power, or economic power, reinforce norms among weaker states
in order to standardize behavioral outcomes. Great state in of
themselves may be able to accomplish this by force, but the legitimacy
of those actions will always be perceived by lesser states as entirely
illegitimate. Unless a legal institution comprised of members is
developed in order to give the lesser states the appearance of
influence, all attempts to institute norms from a position of absolute
power will surely fail. Hence the breakup of the English Empire. If
nations, with distinct identities from that of the hegemon are to be
managed a legal structure accepted to be legitimate must be created.</p>
<p>Thus, International Organizations come into being. They are an attempt
to institute a legal order binding to member states in order to minimize
risk ultimately at the behest of powerful states. The process by which
weak states join the organization is straightforward. They do so because
the powerful coalitions within their state seek to acquire the resources
available to them when entering an International Organization. Such
states will adapt to the rules of the IO, but only to the extent that
the IO serves their interest. Otherwise they will refuse to join. Once
they have joined, they will recognize the legitimacy of the powerful
state, and the IO only if the disciplinary measures are effective, and
threaten their ability to rule domestically. There is also the option to
join the Organization established by another powerful state in the
International System. If such an option is available, something like the
order prior to the first world war, and that of the cold war will come
into being.</p>
<p>For an IO then to be successful in setting the standards of the entire
international system, all powerful states must be able to converge about
a set of common interests. In other words for an international
organization to truly standardize norms throughout the international
system all great powers must act in collaboration with one another to
reinforce agreements to avoid undermining the legitimacy of the
institution. The difficulty in achieving this is found in the fact the
dictates of the international order do not determine great power
behavior, but rather the domestic forces which challenge the authority
of its leaders do. The prime example of which is the United States war
in Iraq under President George W. Bush. Despite the protests of the UN
member states, the government was forced to act under fear of losing
popularity among its base.</p>
<p>Only in highly technical and rather nonpolitical areas of international
affairs does it appear that coalitions of powerful states can manage to
converge about a set of interests. Especially is this true when it comes
to renegotiating the terms of membership.</p>
<h2 id="hypothesis">Hypothesis</h2>
<p>Therefore, I argue that international organizations modify the terms of
their agreements only when it is in the interest of the powerful
domestic constituencies of a coalition of powerful member states. A
state cannot go it alone at the international level, nor will it
successfully ratify the agreement if it is not in the interest of the
domestic camp.</p>
<h2 id="design-of-the-test">Design of the Test</h2>
<p>I adopt the intuition of the two-level game, but avoid the calculus by
way of preferences. Instead I adopt a calculus by way of expectations.
Preferences are unbounded. Expectations however are the set of expected
outcomes bounded by law and authority. In other words, expectations are
preferences bounded by the exercise of a state&rsquo;s institutions. As
institutions are expected to act in such a way as to maintain
legitimacy, their free exercise is not unbounded. As opposed to the
convergence about preferences, I expect that win-sets will converge
about a common set of expectations that arise from the internal process
of maintaining political legitimacy. To test my hypothesis then, I first
analyze the international organization. I then discern which states are
the most powerful. I then look to the issue, to see whether it is an
issue is supported by domestic coalitions of the powerful states. If
that issue is agreed upon by the most influential states within the
organization it is likely that new agreements will be signed, and the
policy of the organization will change.</p>
<h2 id="case-study">Case Study</h2>
<p>The transition of the GATT (the General Agreement on Tariffs and Trade)
to the World Trade Organization will serve as the case study of
analysis. I will analyze the foundations of the GATT, the basic terms
under which the states agreed to enter into the agreement. Then I will
look to the World Trade Organization, and seek to explain why the most
powerful states in the organization sought to expand the GATT and why
they agreed to the terms.</p>
<p>The GATT, formed after the Second World War, spearheaded by the efforts
of the United States and the United Kingdom, was the only multilateral
instrument governing international trade from 1948 until 1995 (Cite WTO
website). The point of its development was to liberalize trade and
reduce tariffs between members. Interestingly within less than a month
if its signing, the United States sought to expand the agreement to
govern all of international trade. The Havana conference of 1947 was to
do just that and to develop the International Trade Organization. The
deal proved to be incapable of ratification in the legislatures of many
member states, notable the Congress of the United States the leader of
the movement. Thus, marking the first in a series of failed attempts to
create a multilateral body regulating trade.</p>
<p>The GATT however was not an unsuccessful agreement. Periodic rounds of
negotiation, and subsequent agreements expanded the jurisdiction of the
organization and granted to it greater legitimacy as the years passed.
The agreements eight round of agreements, the Uruguay Round of 1986-94
is the most instrumental as it established the World Trade Organization.
Why is it that previous attempts to develop the body failed, but in this
one instance it came into being?</p>
<p>The question is ultimately answered by identifying the expectations of
the domestic structures of the most powerful states attempting to
renegotiate the deal. Or what was it that the domestic structure
pressured the leaders of the state to do? This type of analysis will
vary between states as it is dependent upon the institutional
organization of the state. To simplify the process for this analysis, I
look primarily to who is responsible for ratifying the trade deal, and
who is it they are responsible to.</p>
<p>The most powerful states at the time of the creation of the World Trade
Organization were in order the United States, Japan, Germany, France,
Italy, the United Kingdom, Canada, China, Brazil, and then Spain.</p>
\[2\]
<p> I
can further reduce the important states to the United States, the
European Union, Japan, and Canada, collectively known as the quad, as
they together account for most of international trade and the largest
share of international GDP (Databank: World Development Indicators).</p>
<p>In the United States its Senate is officially responsible for the
ratification of international treaties. However, due to legislative
enactments the process of ratification at the time the Uruguay rounds
was modified to require a majority vote in each of house of its Congress
and the approval of the President. The President and his staff were
responsible for the negotiation of the deal. Thus, the expectations to
analyze are those of the constituencies which the members of the
Congress and president rely on for appointment to their office. This
differs between each group and is thus a very difficult process to
determine. It is dependent upon the perceptions of the Congressman, and
the advice of their most important allies. They will vote for a deal
only if it is perceived to be a political win. A thorough analysis would
require reviewing the vote of each senator and then inferring the
constituents responsible for their appointment and the expectations of
each group. As this is untenable, reviewing the actions of the president
is actually a valid point of view to determine the aggregate
expectations of those within the domestic structure as the ratification
of the bill is dependent upon their support. Thus, the president is
negotiating on their behalf. (Trade Act of 1974, 19 U.S.C. Chapter 12);
(U.S. Constitution, Article 1 Sect. 3); (U.S. Constitution, Amendment
17)</p>
<p>The European Union is comprised of a very different political structure
of hierarchal authority. Individual states do not negotiate trade deals.
Rather the European Commission comprised of appointed members negotiate
deals on the behalf of the entire union. These deals must be approved by
the European Parliament which is comprised of elected representatives
from each of the members states, but the ultimate power to ratify the
agreements falls with the council. Members of the council are the heads
of state each EU member state. Their position in power is dependent upon
the domestic structures of their individual states. Nonetheless, when
bargaining internationally, they are doing so in order to maintain their
position as leader. Thus, they will not agree to a deal that will
compromise their domestic coalitions. (The European Council, 2018); (The
European Parliament: About Parliament).</p>
<p>The Japanese &ldquo;Diet&rdquo;, the state&rsquo;s version of parliament is responsible
for the ratification of treaties and international trade deals. The
executive cabinet is solely responsible for the negotiation of the deals
aided by its bureaucracy. However, as Japan is a parliamentary state,
unlike the United States, the prime minister, the executive of the
country, possesses almost free ability to institute law. This is due to
party discipline, and the fact that as the head of the government, the
prime minister is also the head of the party in possession of the
majority seats in the parliament. What then the executive negotiates
will most likely be passed. There is surely an internal bargaining
process, but it is not as crucial to the process as that of the United
States. (Fundamental Structure of the Government of Japan, 2007);
(Structure of the National Diet, 2014).</p>
<p>Canada is also structured around a Parliamentary government. The
executive committee like that of japan is centered around the prime
minister. The prime minister and his cabinet negotiate the trade deals
and then put it to parliament for ratification. The same rules of party
discipline apply here as in Japan. The likelihood of a trade deal
negotiated by the executive cabinet being ratified is very high.
(Parliamentary Primer).</p>
<p>According to my hypothesis then, these states will renegotiate the GATT
agreements when it is in the domestic interests of the heads of states
responsible for the ratification of the trade deal. The most difficult
state to accomplish in would be the United States as the greatest number
of individuals are responsible for ratification. And, because the
possible domestic win-set is the smallest in relationship to the other
powers. It is then expected that the United States will find it most
difficult to ratify the World Trade Organization agreement.</p>
<h2 id="findings">Findings</h2>
<p>As expected the Quad States (United States, Canada, Japan, EU) were by
far the most important states involved in the process of negotiation.
Their economic power and political clout were necessary to develop an
international organization with actual effect on international trade.
Thus, the states with economic value were essentially ignored in this
process. (VanGrasstek, 2013).</p>
<p>Ratification of the deals also depended on the perceptions of the
domestic coalitions of states engaged in talks. Dispute resolutions,
agricultural subsidies, and auto tariffs were the most contentious
issues between the Quad. Each sate feared primarily the delegitimizing
their domestic governments. The United States and the EU for instance
disputed over pork tariffs seriously enough to threaten the deal
outright. The United States senators and the president were concerned
that a deal that lifted subsidies would put a large number of their
constituencies out of a job. If this were to occur they thought their
positions of authority would be compromised. (VanGrasstek, 2013).</p>
<p>The solution to the problem came about in the form of substantial
dispute resolution mechanisms to solve the enforcement problem. The
United States as the most influential member of the organization most
likely assumed that it could use the Dispute Settlement Body to its own
end. The other states in the system perceived it to be capable enough to
bind the United States to internationally agreed to norms and
consensuses on trade. The goal of course to put an end to politically
disruptive tariff spikes targeted at politically relevant sectors of
economies. Or in other words to regulate international trade in order to
put an end to trade wards. This to all states at the time seemed to be
vital to securing the domestic expectations of their constituencies. The
intent of all measures is to ensure a domestic win at the time of
signing, but also to ensure ongoing win-sets across time (Fearon, 1998).
The World Trade Organization embodies that it is inherently an
organization designed to satisfy the demands of the members states not
to act as an independent body. (VanGrasstek, 2013).</p>
<h2 id="discussion">Discussion</h2>
<p>Regarding when international organizations likely to modify their
agreements, they appear to do so when a coalition of powerful states can
agree to do so. Such a straightforward answer to the question seems
obvious however, in the process of research many questions arose as to
if this is actually true. I began this research from an entirely
different point of view. I sought to answer whether Non-Governmental
Organizations (NGO) could influence Inter-Governmental organization to
adopt new policy.</p>
<p>The answer to that question led me to study states as opposed NGO&rsquo;s
because in order for an NGO to influence an IGO powerful states must be
recruited to the cause. The global civil society literature is fairly
adamant about this. Thus, I led astray from studying only NGO&rsquo;s and
instead sought to understand why states may modify existing IGO&rsquo;s or
develop new ones.</p>
<p>States are a far more interesting unit of analyses as all forms of
influence within the state could be studied to determine if domestic
politics really does lead to international politics. To this I would say
that there is no doubt that international politics begins at home. The
Logic of the Two Level Game cannot be ignored. Leaders dependent upon
domestic coalitions must act accordingly to realize their expectations
or risk losing office. From this one could see how domestic perceptions
of economic conditions, human rights, or any other issue can influence a
state&rsquo;s behavior.</p>
<p>Thus, when approaching IGO&rsquo;s and the forces which influence their
operation, not only is it more interesting look to states, but also far
more functional than attempting to discern the influence of NGO&rsquo;s
operating within states. Such an analysis requires testimony from policy
makers, meeting minutes, extensive media analysis, and a harmonious
relationship with an NGO, an IGO, and a state bureaucracy. Frankly
speaking these resources were not available, nor was I able to establish
contact with any of the important players. Therefore, one had to default
to observation from the point of view of a neutral observer.</p>
<p>In so doing it became evident that states, whether one likes it or not,
solely possess the legal authority and material capability to influence
IGO&rsquo;s. Civil society on the other hand, while influential, is without
the authority or means to actually bring about legitimate change.
Institutions trusted by citizens, or even possibly willed into being by
military force, are those with the legitimate power to actually enforce
laws and norms. As such, I adopted Dahl&rsquo;s intuition into decision making
that institutions with legal authority regulate and standardize decision
making procedures and also patterns of influence. These institutions are
the field in which those seeking to acquire influence play, and
therefore adapt to the rules. Without then needing to further delve into
this process I chose to instead analyze relationships between states, as
opposed to analyzing the operations of NGO&rsquo;s.</p>
<p>This paper is in need of expansion however in one crucial category. It
assumes wholeheartedly that the leaders of states are entirely dependent
on the whims of their domestic coalitions and that they are incapable of
employing any tactics to manipulate them. A new research project that
explores the topic in depth is in need. To make the assumption that the
preferences of influential leaders do not play a role in international
politics is too great a pill to swallow.</p>
<h2 id="conclusion">Conclusion</h2>
<p>When do International Organizations renegotiate the terms of their
agreements? They do so when powerful states within the organization
compel it do so. The logic of the Two-Level game though indicates that
the process is dependent on the expectations of domestic coalitions.
Also, the relative power between states makes it so that only a minority
of powerful states are actually important when attempting to renegotiate
deals. A win-set is achieved when the expectations of the domestic
coalitions of the most relevant states converge about a deal. The
transition of the GATT to the World Trade Organization as case study
demonstrates this process. The Quad states, the most relevant state in
the international economy Rather, it is apparent that the need for
politicians to maintain their domestic coalitions was more important to
the calculus of the leaders than the acquisition of power or wealth.</p>
<h2 id="works-cited">Works Cited</h2>
<p>Dahl, Robert Alan. &ldquo;Who Governs? Democracy and power in an American
city.&rdquo; (2005).</p>
<p>Dahl, Robert A. &ldquo;The concept of power.&rdquo; Systems Research and Behavioral
Science 2, no. 3 (1957): 201-215.</p>
<p>&ldquo;Databank: World Development Indicators&rdquo;
<a href="http://databank.worldbank.org/data/reports.aspx?source=2&amp;series=NY.GDP.PCAP.PP.CD">http://databank.worldbank.org/data/reports.aspx?source=2&amp;series=NY.GDP.PCAP.PP.CD</a></p>
<p>&ldquo;European Council: Council of the European Union&rdquo;.
<a href="http://www.consilium.europa.eu/en/">http://www.consilium.europa.eu/en/</a>. (2018)</p>
<p>Fearon, James D. &ldquo;Bargaining, enforcement, and international
cooperation.&rdquo; International organization 52, no. 2 (1998): 269-305</p>
<p>Finnemore, Martha. &ldquo;Norms, culture, and world politics: insights from
sociology&rsquo;s institutionalism.&rdquo; International organization 50, no. 2
(1996): 325-347</p>
<p>Finnemore, Martha, and Stephen J. Toope. &ldquo;Alternatives to
&ldquo;legalization&rdquo;: richer views of law and politics.&rdquo; International
Organization 55, no. 3 (2001): 743-758.</p>
<p>Finnemore, Martha. &ldquo;International organizations as teachers of norms:
the United Nations Educational, Scientific, and Cutural Organization and
science policy.&rdquo; International Organization47, no. 4 (1993): 565-597.</p>
<p>&ldquo;Fundamental Structure of the Government of Japan&rdquo;.
<a href="http://japan.kantei.go.jp/constitution_and_government_of_japan/fundamental_e.html">http://japan.kantei.go.jp/constitution_and_government_of_japan/fundamental_e.html</a>.
(2007)</p>
<p>Keohane, Robert. After Hegemony: Cooperation and Discord in the World
Political Economy. Princeton University Press. (2005)</p>
<p>Moravcsik, Andrew. &ldquo;Taking preferences seriously: A liberal theory of
international politics.&rdquo; International organization 51, no. 4 (1997):
513-553.</p>
<p>&ldquo;Parliamentary Primer&rdquo;.
<a href="https://lop.parl.ca/About/Parliament/Publications/index-e.html">https://lop.parl.ca/About/Parliament/Publications/index-e.html</a></p>
<p>Putnam, Robert D. &ldquo;Diplomacy and domestic politics: the logic of
two-level games.&rdquo; International organization 42, no. 3 (1988): 427-460.</p>
<p>&ldquo;The European Parliament about Parliament&rdquo;
<a href="http://www.europarl.europa.eu/aboutparliament/en">http://www.europarl.europa.eu/aboutparliament/en</a></p>
<p>&ldquo;Structure of the National Diet&rdquo;
<a href="http://www.shugiin.go.jp/internet/itdb_english.nsf/html/statics/guide/structure.htm">http://www.shugiin.go.jp/internet/itdb_english.nsf/html/statics/guide/structure.htm</a>.
(2014)</p>
<p>VanGrasstek, Craig. The History and Future of the World Trade
Organization. World Trade Organization Publication.
<a href="https://www.wto.org/english/res_e/booksp_e/historywto_e.pdf">https://www.wto.org/english/res_e/booksp_e/historywto_e.pdf</a>.</p>
<p>\(2013\)</p>
<p>Waltz, Kenneth N. Theory of international politics. Waveland Press.
(2010)</p>
\[1\]
<p> Power is to be defined as the ability to make someone do what they
otherwise would not do.</p>
\[2\]
<p> The European Union is officially a signee of the WTO. It is
important to note that five of the top ten states are EU members. As
trade regulation must be uniform throughout the EU, the European Union
representatives negotiated on behalf of their member. For the purpose of
this paper I will treat the EU as a single state to avoid greatly
complicating the analysis</p>
]]></content>
			<postid> 64db5d49835973203d6a017aceac1131</postid>
			<author>Justin Napolitano</author>
			<author_name>Justin Napolitano</author_name>
			<author_email>personal.jnapolitano@gmail.com</author_email>
			<author_id>87654367b2fca109e7dc9d3ea8a1ebbaf0bfe374773b148c2c20d278479add99</author_id>			
		</item>
		
	</channel>
</rss>
